
DOANTKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e64  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020fc  080020fc  000120fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800210c  0800210c  0001210c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  24000000  08002114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000050  24000018  0800212c  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000068  0800212c  00020068  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ea8b  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ffe  00000000  00000000  0002ead1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000770  00000000  00000000  00030ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000006b8  00000000  00000000  00031240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034c3a  00000000  00000000  000318f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008995  00000000  00000000  00066532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014f256  00000000  00000000  0006eec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001be11d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c80  00000000  00000000  001be170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080020e4 	.word	0x080020e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	080020e4 	.word	0x080020e4

080002d8 <GetSector>:
// There are 2 BANKS available for H745, BANK 1 (0x0800 0000 - 0x080F FFFF) and BANK 2 (0x0810 0000 - 0x080F FFFF)
// Both of them have Sectors 0 to 7.
// We will define the sectors in normal way (like Defined below), and later the BANK will be taken care by the HAL

static uint32_t GetSector(uint32_t Address)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]

  /* BANK 1 */
  if((Address >= 0x08000000) && (Address < 0x08020000))
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80002ea:	d306      	bcc.n	80002fa <GetSector+0x22>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a58      	ldr	r2, [pc, #352]	; (8000450 <GetSector+0x178>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d802      	bhi.n	80002fa <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	e04b      	b.n	8000392 <GetSector+0xba>
  }

  else if((Address >= 0x08020000) && (Address < 0x08040000))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a54      	ldr	r2, [pc, #336]	; (8000450 <GetSector+0x178>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d906      	bls.n	8000310 <GetSector+0x38>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a53      	ldr	r2, [pc, #332]	; (8000454 <GetSector+0x17c>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d802      	bhi.n	8000310 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800030a:	2301      	movs	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	e040      	b.n	8000392 <GetSector+0xba>
  }

  else if((Address >= 0x08040000) && (Address < 0x08060000))
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a50      	ldr	r2, [pc, #320]	; (8000454 <GetSector+0x17c>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d906      	bls.n	8000326 <GetSector+0x4e>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a4f      	ldr	r2, [pc, #316]	; (8000458 <GetSector+0x180>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d802      	bhi.n	8000326 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000320:	2302      	movs	r3, #2
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	e035      	b.n	8000392 <GetSector+0xba>
  }

  else if((Address >= 0x08060000) && (Address < 0x08080000))
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a4b      	ldr	r2, [pc, #300]	; (8000458 <GetSector+0x180>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d906      	bls.n	800033c <GetSector+0x64>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a4a      	ldr	r2, [pc, #296]	; (800045c <GetSector+0x184>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d802      	bhi.n	800033c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000336:	2303      	movs	r3, #3
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	e02a      	b.n	8000392 <GetSector+0xba>
  }

  else if((Address >= 0x08080000) && (Address < 0x080A0000))
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a47      	ldr	r2, [pc, #284]	; (800045c <GetSector+0x184>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d906      	bls.n	8000352 <GetSector+0x7a>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a46      	ldr	r2, [pc, #280]	; (8000460 <GetSector+0x188>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d802      	bhi.n	8000352 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800034c:	2304      	movs	r3, #4
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	e01f      	b.n	8000392 <GetSector+0xba>
  }

  else if((Address >= 0x080A0000) && (Address < 0x080C0000))
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a42      	ldr	r2, [pc, #264]	; (8000460 <GetSector+0x188>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d906      	bls.n	8000368 <GetSector+0x90>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a41      	ldr	r2, [pc, #260]	; (8000464 <GetSector+0x18c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d802      	bhi.n	8000368 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000362:	2305      	movs	r3, #5
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	e014      	b.n	8000392 <GetSector+0xba>
  }

  else if((Address >= 0x080C0000) && (Address < 0x080E0000))
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a3e      	ldr	r2, [pc, #248]	; (8000464 <GetSector+0x18c>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d906      	bls.n	800037e <GetSector+0xa6>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a3d      	ldr	r2, [pc, #244]	; (8000468 <GetSector+0x190>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d802      	bhi.n	800037e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000378:	2306      	movs	r3, #6
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	e009      	b.n	8000392 <GetSector+0xba>
  }

  else if((Address >= 0x080E0000) && (Address < 0x08100000))
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a39      	ldr	r2, [pc, #228]	; (8000468 <GetSector+0x190>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d905      	bls.n	8000392 <GetSector+0xba>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800038c:	d201      	bcs.n	8000392 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800038e:	2307      	movs	r3, #7
 8000390:	60fb      	str	r3, [r7, #12]
  }


  /* BANK 2 */
  if((Address >= 0x08100000) && (Address < 0x08120000))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000398:	d306      	bcc.n	80003a8 <GetSector+0xd0>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a33      	ldr	r2, [pc, #204]	; (800046c <GetSector+0x194>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <GetSector+0xd0>
  {
    sector = FLASH_SECTOR_0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e04b      	b.n	8000440 <GetSector+0x168>
  }

  else if((Address >= 0x08120000) && (Address < 0x08140000))
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a30      	ldr	r2, [pc, #192]	; (800046c <GetSector+0x194>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d906      	bls.n	80003be <GetSector+0xe6>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a2f      	ldr	r2, [pc, #188]	; (8000470 <GetSector+0x198>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d802      	bhi.n	80003be <GetSector+0xe6>
  {
    sector = FLASH_SECTOR_1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	e040      	b.n	8000440 <GetSector+0x168>
  }

  else if((Address >= 0x08140000) && (Address < 0x08160000))
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a2b      	ldr	r2, [pc, #172]	; (8000470 <GetSector+0x198>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d906      	bls.n	80003d4 <GetSector+0xfc>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a2a      	ldr	r2, [pc, #168]	; (8000474 <GetSector+0x19c>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d802      	bhi.n	80003d4 <GetSector+0xfc>
  {
    sector = FLASH_SECTOR_2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	e035      	b.n	8000440 <GetSector+0x168>
  }

  else if((Address >= 0x08160000) && (Address < 0x08180000))
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a27      	ldr	r2, [pc, #156]	; (8000474 <GetSector+0x19c>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d906      	bls.n	80003ea <GetSector+0x112>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a26      	ldr	r2, [pc, #152]	; (8000478 <GetSector+0x1a0>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d802      	bhi.n	80003ea <GetSector+0x112>
  {
    sector = FLASH_SECTOR_3;
 80003e4:	2303      	movs	r3, #3
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e02a      	b.n	8000440 <GetSector+0x168>
  }

  else if((Address >= 0x08180000) && (Address < 0x081A0000))
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a22      	ldr	r2, [pc, #136]	; (8000478 <GetSector+0x1a0>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d906      	bls.n	8000400 <GetSector+0x128>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a21      	ldr	r2, [pc, #132]	; (800047c <GetSector+0x1a4>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d802      	bhi.n	8000400 <GetSector+0x128>
  {
    sector = FLASH_SECTOR_4;
 80003fa:	2304      	movs	r3, #4
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e01f      	b.n	8000440 <GetSector+0x168>
  }

  else if((Address >= 0x081A0000) && (Address < 0x081C0000))
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a1e      	ldr	r2, [pc, #120]	; (800047c <GetSector+0x1a4>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d906      	bls.n	8000416 <GetSector+0x13e>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a1d      	ldr	r2, [pc, #116]	; (8000480 <GetSector+0x1a8>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d802      	bhi.n	8000416 <GetSector+0x13e>
  {
    sector = FLASH_SECTOR_5;
 8000410:	2305      	movs	r3, #5
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e014      	b.n	8000440 <GetSector+0x168>
  }

  else if((Address >= 0x081C0000) && (Address < 0x081E0000))
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a19      	ldr	r2, [pc, #100]	; (8000480 <GetSector+0x1a8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d906      	bls.n	800042c <GetSector+0x154>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <GetSector+0x1ac>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d802      	bhi.n	800042c <GetSector+0x154>
  {
    sector = FLASH_SECTOR_6;
 8000426:	2306      	movs	r3, #6
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e009      	b.n	8000440 <GetSector+0x168>
  }

  else if((Address >= 0x081E0000) && (Address < 0x08200000))
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a15      	ldr	r2, [pc, #84]	; (8000484 <GetSector+0x1ac>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d905      	bls.n	8000440 <GetSector+0x168>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800043a:	d201      	bcs.n	8000440 <GetSector+0x168>
  {
    sector = FLASH_SECTOR_7;
 800043c:	2307      	movs	r3, #7
 800043e:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8000440:	68fb      	ldr	r3, [r7, #12]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	0801ffff 	.word	0x0801ffff
 8000454:	0803ffff 	.word	0x0803ffff
 8000458:	0805ffff 	.word	0x0805ffff
 800045c:	0807ffff 	.word	0x0807ffff
 8000460:	0809ffff 	.word	0x0809ffff
 8000464:	080bffff 	.word	0x080bffff
 8000468:	080dffff 	.word	0x080dffff
 800046c:	0811ffff 	.word	0x0811ffff
 8000470:	0813ffff 	.word	0x0813ffff
 8000474:	0815ffff 	.word	0x0815ffff
 8000478:	0817ffff 	.word	0x0817ffff
 800047c:	0819ffff 	.word	0x0819ffff
 8000480:	081bffff 	.word	0x081bffff
 8000484:	081dffff 	.word	0x081dffff

08000488 <Flash_Write_Data>:
*          - 256 bits for STM32H72x/3X devices (8x 32bits words)
*
*/

uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *data, uint16_t numberofwords)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	4613      	mov	r3, r2
 8000494:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8000496:	2300      	movs	r3, #0
 8000498:	627b      	str	r3, [r7, #36]	; 0x24

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800049a:	f000 fbe3 	bl	8000c64 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	f7ff ff1a 	bl	80002d8 <GetSector>
 80004a4:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 80004a6:	88fb      	ldrh	r3, [r7, #6]
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	461a      	mov	r2, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	4413      	add	r3, r2
 80004b0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80004b2:	69f8      	ldr	r0, [r7, #28]
 80004b4:	f7ff ff10 	bl	80002d8 <GetSector>
 80004b8:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <Flash_Write_Data+0xc4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80004c0:	4b22      	ldr	r3, [pc, #136]	; (800054c <Flash_Write_Data+0xc4>)
 80004c2:	2220      	movs	r2, #32
 80004c4:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80004c6:	4a21      	ldr	r2, [pc, #132]	; (800054c <Flash_Write_Data+0xc4>)
 80004c8:	6a3b      	ldr	r3, [r7, #32]
 80004ca:	6093      	str	r3, [r2, #8]

	  // The the proper BANK to erase the Sector
	  if (StartSectorAddress < 0x08100000)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80004d2:	d203      	bcs.n	80004dc <Flash_Write_Data+0x54>
		  EraseInitStruct.Banks     = FLASH_BANK_1;
 80004d4:	4b1d      	ldr	r3, [pc, #116]	; (800054c <Flash_Write_Data+0xc4>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	e002      	b.n	80004e2 <Flash_Write_Data+0x5a>
	  else EraseInitStruct.Banks    = FLASH_BANK_2;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <Flash_Write_Data+0xc4>)
 80004de:	2202      	movs	r2, #2
 80004e0:	605a      	str	r2, [r3, #4]

	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80004e2:	69ba      	ldr	r2, [r7, #24]
 80004e4:	6a3b      	ldr	r3, [r7, #32]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	3301      	adds	r3, #1
 80004ea:	4a18      	ldr	r2, [pc, #96]	; (800054c <Flash_Write_Data+0xc4>)
 80004ec:	60d3      	str	r3, [r2, #12]


	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4619      	mov	r1, r3
 80004f4:	4815      	ldr	r0, [pc, #84]	; (800054c <Flash_Write_Data+0xc4>)
 80004f6:	f000 fcc1 	bl	8000e7c <HAL_FLASHEx_Erase>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d01a      	beq.n	8000536 <Flash_Write_Data+0xae>
	  {
		  return HAL_FLASH_GetError ();
 8000500:	f000 fc14 	bl	8000d2c <HAL_FLASH_GetError>
 8000504:	4603      	mov	r3, r0
 8000506:	e01d      	b.n	8000544 <Flash_Write_Data+0xbc>
	  /* Program the user Flash area 8 WORDS at a time
	   * (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, StartSectorAddress, (uint32_t ) &data[sofar]) == HAL_OK)
 8000508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	68ba      	ldr	r2, [r7, #8]
 800050e:	4413      	add	r3, r2
 8000510:	461a      	mov	r2, r3
 8000512:	68f9      	ldr	r1, [r7, #12]
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fb13 	bl	8000b40 <HAL_FLASH_Program>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d106      	bne.n	800052e <Flash_Write_Data+0xa6>
	     {
	    	 StartSectorAddress += 4*FLASHWORD;  //
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3320      	adds	r3, #32
 8000524:	60fb      	str	r3, [r7, #12]
	    	 sofar+=FLASHWORD;
 8000526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000528:	3308      	adds	r3, #8
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
 800052c:	e003      	b.n	8000536 <Flash_Write_Data+0xae>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800052e:	f000 fbfd 	bl	8000d2c <HAL_FLASH_GetError>
 8000532:	4603      	mov	r3, r0
 8000534:	e006      	b.n	8000544 <Flash_Write_Data+0xbc>
	   while (sofar<numberofwords)
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800053a:	429a      	cmp	r2, r3
 800053c:	dbe4      	blt.n	8000508 <Flash_Write_Data+0x80>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800053e:	f000 fbcb 	bl	8000cd8 <HAL_FLASH_Lock>

	   return 0;
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	3728      	adds	r7, #40	; 0x28
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	24000034 	.word	0x24000034

08000550 <main>:
  * @brief  The application entry point.
  * @retval int
  */
uint8_t test[]="Hello";
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 f972 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f80a 	bl	8000570 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Flash_Write_Data(0x081E0000, test, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	4902      	ldr	r1, [pc, #8]	; (8000568 <main+0x18>)
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <main+0x1c>)
 8000562:	f7ff ff91 	bl	8000488 <Flash_Write_Data>
  while (1)
 8000566:	e7fe      	b.n	8000566 <main+0x16>
 8000568:	24000000 	.word	0x24000000
 800056c:	081e0000 	.word	0x081e0000

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09c      	sub	sp, #112	; 0x70
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	224c      	movs	r2, #76	; 0x4c
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fda8 	bl	80020d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2220      	movs	r2, #32
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fda2 	bl	80020d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000590:	2002      	movs	r0, #2
 8000592:	f000 fde5 	bl	8001160 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0xcc>)
 800059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059e:	4a27      	ldr	r2, [pc, #156]	; (800063c <SystemClock_Config+0xcc>)
 80005a0:	f023 0301 	bic.w	r3, r3, #1
 80005a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xcc>)
 80005a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SystemClock_Config+0xd0>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005cc:	bf00      	nop
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SystemClock_Config+0xd0>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005da:	d1f8      	bne.n	80005ce <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2340      	movs	r3, #64	; 0x40
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fdef 	bl	80011d4 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005fc:	f000 f822 	bl	8000644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	233f      	movs	r3, #63	; 0x3f
 8000602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2101      	movs	r1, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fa01 	bl	8001a2c <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000630:	f000 f808 	bl	8000644 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3770      	adds	r7, #112	; 0x70
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	58000400 	.word	0x58000400
 8000640:	58024800 	.word	0x58024800

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x30>)
 8000658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800065c:	4a08      	ldr	r2, [pc, #32]	; (8000680 <HAL_MspInit+0x30>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_MspInit+0x30>)
 8000668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	58024400 	.word	0x58024400

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f926 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006dc:	4b37      	ldr	r3, [pc, #220]	; (80007bc <SystemInit+0xe4>)
 80006de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e2:	4a36      	ldr	r2, [pc, #216]	; (80007bc <SystemInit+0xe4>)
 80006e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ec:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <SystemInit+0xe8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	2b06      	cmp	r3, #6
 80006f6:	d807      	bhi.n	8000708 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <SystemInit+0xe8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f023 030f 	bic.w	r3, r3, #15
 8000700:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <SystemInit+0xe8>)
 8000702:	f043 0307 	orr.w	r3, r3, #7
 8000706:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <SystemInit+0xec>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <SystemInit+0xec>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <SystemInit+0xec>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <SystemInit+0xec>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4929      	ldr	r1, [pc, #164]	; (80007c4 <SystemInit+0xec>)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <SystemInit+0xf0>)
 8000722:	4013      	ands	r3, r2
 8000724:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <SystemInit+0xe8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	2b00      	cmp	r3, #0
 8000730:	d007      	beq.n	8000742 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemInit+0xe8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f023 030f 	bic.w	r3, r3, #15
 800073a:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemInit+0xe8>)
 800073c:	f043 0307 	orr.w	r3, r3, #7
 8000740:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <SystemInit+0xec>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <SystemInit+0xec>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemInit+0xec>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <SystemInit+0xec>)
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <SystemInit+0xf4>)
 8000758:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <SystemInit+0xec>)
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <SystemInit+0xf8>)
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <SystemInit+0xec>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <SystemInit+0xfc>)
 8000764:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <SystemInit+0xec>)
 8000768:	2200      	movs	r2, #0
 800076a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <SystemInit+0xec>)
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <SystemInit+0xfc>)
 8000770:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <SystemInit+0xec>)
 8000774:	2200      	movs	r2, #0
 8000776:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <SystemInit+0xec>)
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <SystemInit+0xfc>)
 800077c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <SystemInit+0xec>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <SystemInit+0xec>)
 800078a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800078e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <SystemInit+0xec>)
 8000792:	2200      	movs	r2, #0
 8000794:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <SystemInit+0x100>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <SystemInit+0x104>)
 800079c:	4013      	ands	r3, r2
 800079e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007a2:	d202      	bcs.n	80007aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <SystemInit+0x108>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <SystemInit+0x10c>)
 80007ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007b0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	52002000 	.word	0x52002000
 80007c4:	58024400 	.word	0x58024400
 80007c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007cc:	02020200 	.word	0x02020200
 80007d0:	01ff0000 	.word	0x01ff0000
 80007d4:	01010280 	.word	0x01010280
 80007d8:	5c001000 	.word	0x5c001000
 80007dc:	ffff0000 	.word	0xffff0000
 80007e0:	51008108 	.word	0x51008108
 80007e4:	52004000 	.word	0x52004000

080007e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f7ff ff74 	bl	80006d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 fc39 	bl	800208c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081a:	f7ff fe99 	bl	8000550 <main>
  bx  lr
 800081e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000820:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000824:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000828:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 800082c:	08002114 	.word	0x08002114
  ldr r2, =_sbss
 8000830:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8000834:	24000068 	.word	0x24000068

08000838 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC3_IRQHandler>
	...

0800083c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000842:	2003      	movs	r0, #3
 8000844:	f000 f94a 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000848:	f001 faa6 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 800084c:	4602      	mov	r2, r0
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_Init+0x68>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	4913      	ldr	r1, [pc, #76]	; (80008a8 <HAL_Init+0x6c>)
 800085a:	5ccb      	ldrb	r3, [r1, r3]
 800085c:	f003 031f 	and.w	r3, r3, #31
 8000860:	fa22 f303 	lsr.w	r3, r2, r3
 8000864:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_Init+0x68>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_Init+0x6c>)
 8000870:	5cd3      	ldrb	r3, [r2, r3]
 8000872:	f003 031f 	and.w	r3, r3, #31
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	fa22 f303 	lsr.w	r3, r2, r3
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_Init+0x70>)
 800087e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <HAL_Init+0x74>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f814 	bl	80008b4 <HAL_InitTick>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e002      	b.n	800089c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000896:	f7ff fedb 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58024400 	.word	0x58024400
 80008a8:	080020fc 	.word	0x080020fc
 80008ac:	2400000c 	.word	0x2400000c
 80008b0:	24000008 	.word	0x24000008

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_InitTick+0x60>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e021      	b.n	800090c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_InitTick+0x64>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_InitTick+0x60>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f921 	bl	8000b26 <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f8f9 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x68>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000014 	.word	0x24000014
 8000918:	24000008 	.word	0x24000008
 800091c:	24000010 	.word	0x24000010

08000920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	24000014 	.word	0x24000014
 8000944:	24000048 	.word	0x24000048

08000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	24000048 	.word	0x24000048

08000960 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <HAL_GetREVID+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	0c1b      	lsrs	r3, r3, #16
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	5c001000 	.word	0x5c001000

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <__NVIC_SetPriorityGrouping+0x40>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x40>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	05fa0000 	.word	0x05fa0000

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff8e 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff47 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff5e 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff90 	bl	8000a30 <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5f 	bl	80009dc <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffb2 	bl	8000a98 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8000b54:	2308      	movs	r3, #8
 8000b56:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b58:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <HAL_FLASH_Program+0x11c>)
 8000b5a:	7d1b      	ldrb	r3, [r3, #20]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_FLASH_Program+0x24>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e076      	b.n	8000c52 <HAL_FLASH_Program+0x112>
 8000b64:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <HAL_FLASH_Program+0x11c>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000b70:	d306      	bcc.n	8000b80 <HAL_FLASH_Program+0x40>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000b78:	d202      	bcs.n	8000b80 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	e00c      	b.n	8000b9a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000b86:	d306      	bcc.n	8000b96 <HAL_FLASH_Program+0x56>
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8000b8e:	d202      	bcs.n	8000b96 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	e001      	b.n	8000b9a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e05b      	b.n	8000c52 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <HAL_FLASH_Program+0x11c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8000ba0:	69b9      	ldr	r1, [r7, #24]
 8000ba2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ba6:	f000 f8cd 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8000bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d147      	bne.n	8000c48 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d106      	bne.n	8000bcc <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	60d3      	str	r3, [r2, #12]
 8000bca:	e007      	b.n	8000bdc <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000bce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000bdc:	f3bf 8f6f 	isb	sy
}
 8000be0:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000be2:	f3bf 8f4f 	dsb	sy
}
 8000be6:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	623b      	str	r3, [r7, #32]
        src_addr++;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	61fb      	str	r3, [r7, #28]
        row_index--;
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ef      	bne.n	8000be8 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8000c08:	f3bf 8f6f 	isb	sy
}
 8000c0c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8000c0e:	f3bf 8f4f 	dsb	sy
}
 8000c12:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8000c14:	69b9      	ldr	r1, [r7, #24]
 8000c16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c1a:	f000 f893 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d106      	bne.n	8000c38 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000c30:	f023 0302 	bic.w	r3, r3, #2
 8000c34:	60d3      	str	r3, [r2, #12]
 8000c36:	e007      	b.n	8000c48 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000c3a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_FLASH_Program+0x120>)
 8000c40:	f023 0302 	bic.w	r3, r3, #2
 8000c44:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_FLASH_Program+0x11c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	751a      	strb	r2, [r3, #20]

  return status;
 8000c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2400004c 	.word	0x2400004c
 8000c60:	52002000 	.word	0x52002000

08000c64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00d      	beq.n	8000c90 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_FLASH_Unlock+0x6c>)
 8000c78:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <HAL_FLASH_Unlock+0x70>)
 8000c7e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e018      	b.n	8000cc2 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000c92:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d010      	beq.n	8000cc0 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <HAL_FLASH_Unlock+0x6c>)
 8000ca2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_FLASH_Unlock+0x70>)
 8000caa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_FLASH_Unlock+0x68>)
 8000cb0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	52002000 	.word	0x52002000
 8000cd0:	45670123 	.word	0x45670123
 8000cd4:	cdef89ab 	.word	0xcdef89ab

08000cd8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_FLASH_Lock+0x50>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_FLASH_Lock+0x50>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_FLASH_Lock+0x50>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e011      	b.n	8000d1c <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_FLASH_Lock+0x50>)
 8000cfa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_FLASH_Lock+0x50>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_FLASH_Lock+0x50>)
 8000d0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	52002000 	.word	0x52002000

08000d2c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_FLASH_GetError+0x14>)
 8000d32:	699b      	ldr	r3, [r3, #24]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2400004c 	.word	0x2400004c

08000d44 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8000d56:	f7ff fdf7 	bl	8000948 <HAL_GetTick>
 8000d5a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d113      	bne.n	8000d8a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <FLASH_WaitForLastOperation+0x124>)
 8000d64:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8000d66:	e010      	b.n	8000d8a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6e:	d00c      	beq.n	8000d8a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000d70:	f7ff fdea 	bl	8000948 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d302      	bcc.n	8000d86 <FLASH_WaitForLastOperation+0x42>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e06a      	b.n	8000e60 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <FLASH_WaitForLastOperation+0x128>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d10a      	bne.n	8000dac <FLASH_WaitForLastOperation+0x68>
 8000d96:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	e00c      	b.n	8000dc6 <FLASH_WaitForLastOperation+0x82>
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000dae:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000db2:	43da      	mvns	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	4013      	ands	r3, r2
 8000db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf0c      	ite	eq
 8000dc0:	2301      	moveq	r3, #1
 8000dc2:	2300      	movne	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1ce      	bne.n	8000d68 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8000dd0:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <FLASH_WaitForLastOperation+0x130>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e007      	b.n	8000dec <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000dde:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <FLASH_WaitForLastOperation+0x130>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dea:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d017      	beq.n	8000e26 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <FLASH_WaitForLastOperation+0x134>)
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <FLASH_WaitForLastOperation+0x134>)
 8000e00:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <FLASH_WaitForLastOperation+0x128>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d103      	bne.n	8000e16 <FLASH_WaitForLastOperation+0xd2>
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	6153      	str	r3, [r2, #20]
 8000e14:	e005      	b.n	8000e22 <FLASH_WaitForLastOperation+0xde>
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e1e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e01c      	b.n	8000e60 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10b      	bne.n	8000e44 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e38:	d111      	bne.n	8000e5e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000e3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	e00c      	b.n	8000e5e <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000e46:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e52:	d104      	bne.n	8000e5e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <FLASH_WaitForLastOperation+0x12c>)
 8000e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	80000004 	.word	0x80000004
 8000e6c:	1fef000f 	.word	0x1fef000f
 8000e70:	52002000 	.word	0x52002000
 8000e74:	17ee0000 	.word	0x17ee0000
 8000e78:	2400004c 	.word	0x2400004c

08000e7c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e8a:	4b5e      	ldr	r3, [pc, #376]	; (8001004 <HAL_FLASHEx_Erase+0x188>)
 8000e8c:	7d1b      	ldrb	r3, [r3, #20]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <HAL_FLASHEx_Erase+0x1a>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e0b2      	b.n	8000ffc <HAL_FLASHEx_Erase+0x180>
 8000e96:	4b5b      	ldr	r3, [pc, #364]	; (8001004 <HAL_FLASHEx_Erase+0x188>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e9c:	4b59      	ldr	r3, [pc, #356]	; (8001004 <HAL_FLASHEx_Erase+0x188>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d009      	beq.n	8000ec2 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eb4:	f7ff ff46 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d009      	beq.n	8000ee2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ed4:	f7ff ff36 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 8085 	bne.w	8000ff4 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d136      	bne.n	8000f60 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4610      	mov	r0, r2
 8000efe:	f000 f887 	bl	8001010 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00f      	beq.n	8000f2e <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f14:	f7ff ff16 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4a38      	ldr	r2, [pc, #224]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000f28:	f023 0308 	bic.w	r3, r3, #8
 8000f2c:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d05c      	beq.n	8000ff4 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f40:	f7ff ff00 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000f50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000f56:	f023 0308 	bic.w	r3, r3, #8
 8000f5a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8000f5e:	e049      	b.n	8000ff4 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	e039      	b.n	8000fe4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6859      	ldr	r1, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68b8      	ldr	r0, [r7, #8]
 8000f7c:	f000 f8b2 	bl	80010e4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00c      	beq.n	8000fa6 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f92:	f7ff fed7 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	491a      	ldr	r1, [pc, #104]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_FLASHEx_Erase+0x190>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00e      	beq.n	8000fd0 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb8:	f7ff fec4 	bl	8000d44 <FLASH_WaitForLastOperation>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000fc2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000fc6:	4910      	ldr	r1, [pc, #64]	; (8001008 <HAL_FLASHEx_Erase+0x18c>)
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_FLASHEx_Erase+0x190>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
          break;
 8000fdc:	e00a      	b.n	8000ff4 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3bd      	bcc.n	8000f70 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_FLASHEx_Erase+0x188>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	751a      	strb	r2, [r3, #20]

  return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2400004c 	.word	0x2400004c
 8001008:	52002000 	.word	0x52002000
 800100c:	fffff8fb 	.word	0xfffff8fb

08001010 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d122      	bne.n	800106a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <FLASH_MassErase+0xd0>)
 800102a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800102e:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001032:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001036:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001038:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800103c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	4926      	ldr	r1, [pc, #152]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4313      	orrs	r3, r2
 800104a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <FLASH_MassErase+0xd0>)
 800104e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001052:	4923      	ldr	r1, [pc, #140]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4313      	orrs	r3, r2
 8001058:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <FLASH_MassErase+0xd0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8001068:	e033      	b.n	80010d2 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d011      	beq.n	8001098 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <FLASH_MassErase+0xd0>)
 800107a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800107e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	4916      	ldr	r1, [pc, #88]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4313      	orrs	r3, r2
 800108a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <FLASH_MassErase+0xd0>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <FLASH_MassErase+0xd0>)
 8001092:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8001096:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d017      	beq.n	80010d2 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <FLASH_MassErase+0xd0>)
 80010a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <FLASH_MassErase+0xd0>)
 80010aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010ae:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <FLASH_MassErase+0xd0>)
 80010b4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80010b8:	4909      	ldr	r1, [pc, #36]	; (80010e0 <FLASH_MassErase+0xd0>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <FLASH_MassErase+0xd0>)
 80010c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <FLASH_MassErase+0xd0>)
 80010ca:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80010ce:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	52002000 	.word	0x52002000

080010e4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d010      	beq.n	800111c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <FLASH_Erase_Sector+0x78>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <FLASH_Erase_Sector+0x78>)
 8001100:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8001104:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <FLASH_Erase_Sector+0x78>)
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	0219      	lsls	r1, r3, #8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	430b      	orrs	r3, r1
 8001112:	4313      	orrs	r3, r2
 8001114:	4a11      	ldr	r2, [pc, #68]	; (800115c <FLASH_Erase_Sector+0x78>)
 8001116:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800111a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d014      	beq.n	8001150 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <FLASH_Erase_Sector+0x78>)
 8001128:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <FLASH_Erase_Sector+0x78>)
 800112e:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8001132:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <FLASH_Erase_Sector+0x78>)
 8001138:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	0219      	lsls	r1, r3, #8
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	430b      	orrs	r3, r1
 8001144:	4313      	orrs	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <FLASH_Erase_Sector+0x78>)
 8001148:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800114c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	52002000 	.word	0x52002000

08001160 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b04      	cmp	r3, #4
 8001172:	d00a      	beq.n	800118a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d001      	beq.n	8001186 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e01f      	b.n	80011c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e01d      	b.n	80011c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f023 0207 	bic.w	r2, r3, #7
 8001192:	490f      	ldr	r1, [pc, #60]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4313      	orrs	r3, r2
 8001198:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800119a:	f7ff fbd5 	bl	8000948 <HAL_GetTick>
 800119e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011a0:	e009      	b.n	80011b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011a2:	f7ff fbd1 	bl	8000948 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b0:	d901      	bls.n	80011b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e007      	b.n	80011c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011c2:	d1ee      	bne.n	80011a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	58024800 	.word	0x58024800

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f000 bc1c 	b.w	8001a20 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8087 	beq.w	8001304 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f6:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001200:	4b9b      	ldr	r3, [pc, #620]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001208:	2b10      	cmp	r3, #16
 800120a:	d007      	beq.n	800121c <HAL_RCC_OscConfig+0x48>
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	2b18      	cmp	r3, #24
 8001210:	d110      	bne.n	8001234 <HAL_RCC_OscConfig+0x60>
 8001212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b94      	ldr	r3, [pc, #592]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d06c      	beq.n	8001302 <HAL_RCC_OscConfig+0x12e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d168      	bne.n	8001302 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e3f5      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x78>
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a8b      	ldr	r2, [pc, #556]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e02e      	b.n	80012aa <HAL_RCC_OscConfig+0xd6>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <HAL_RCC_OscConfig+0x9a>
 8001254:	4b86      	ldr	r3, [pc, #536]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a85      	ldr	r2, [pc, #532]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800125a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b83      	ldr	r3, [pc, #524]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a82      	ldr	r2, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e01d      	b.n	80012aa <HAL_RCC_OscConfig+0xd6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0xbe>
 8001278:	4b7d      	ldr	r3, [pc, #500]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a7c      	ldr	r2, [pc, #496]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800127e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a79      	ldr	r2, [pc, #484]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0xd6>
 8001292:	4b77      	ldr	r3, [pc, #476]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a76      	ldr	r2, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b74      	ldr	r3, [pc, #464]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a73      	ldr	r2, [pc, #460]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d013      	beq.n	80012da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b2:	f7ff fb49 	bl	8000948 <HAL_GetTick>
 80012b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ba:	f7ff fb45 	bl	8000948 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b64      	cmp	r3, #100	; 0x64
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e3a9      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012cc:	4b68      	ldr	r3, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0xe6>
 80012d8:	e014      	b.n	8001304 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff fb35 	bl	8000948 <HAL_GetTick>
 80012de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e2:	f7ff fb31 	bl	8000948 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e395      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f4:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x10e>
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001302:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80ca 	beq.w	80014a6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800131a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_RCC_OscConfig+0x164>
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	2b18      	cmp	r3, #24
 800132c:	d156      	bne.n	80013dc <HAL_RCC_OscConfig+0x208>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d151      	bne.n	80013dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x17c>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e367      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 0219 	bic.w	r2, r3, #25
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4944      	ldr	r1, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001362:	f7ff faf1 	bl	8000948 <HAL_GetTick>
 8001366:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136a:	f7ff faed 	bl	8000948 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e351      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800137c:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	f7ff faea 	bl	8000960 <HAL_GetREVID>
 800138c:	4603      	mov	r3, r0
 800138e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001392:	4293      	cmp	r3, r2
 8001394:	d817      	bhi.n	80013c6 <HAL_RCC_OscConfig+0x1f2>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b40      	cmp	r3, #64	; 0x40
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1dc>
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013a6:	4a32      	ldr	r2, [pc, #200]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ae:	e07a      	b.n	80014a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	031b      	lsls	r3, r3, #12
 80013be:	492c      	ldr	r1, [pc, #176]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c4:	e06f      	b.n	80014a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	061b      	lsls	r3, r3, #24
 80013d4:	4926      	ldr	r1, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013da:	e064      	b.n	80014a6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d047      	beq.n	8001474 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 0219 	bic.w	r2, r3, #25
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	491f      	ldr	r1, [pc, #124]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff faa7 	bl	8000948 <HAL_GetTick>
 80013fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff faa3 	bl	8000948 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e307      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	f7ff faa0 	bl	8000960 <HAL_GetREVID>
 8001420:	4603      	mov	r3, r0
 8001422:	f241 0203 	movw	r2, #4099	; 0x1003
 8001426:	4293      	cmp	r3, r2
 8001428:	d817      	bhi.n	800145a <HAL_RCC_OscConfig+0x286>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d108      	bne.n	8001444 <HAL_RCC_OscConfig+0x270>
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	6053      	str	r3, [r2, #4]
 8001442:	e030      	b.n	80014a6 <HAL_RCC_OscConfig+0x2d2>
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	031b      	lsls	r3, r3, #12
 8001452:	4907      	ldr	r1, [pc, #28]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e025      	b.n	80014a6 <HAL_RCC_OscConfig+0x2d2>
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	061b      	lsls	r3, r3, #24
 8001468:	4901      	ldr	r1, [pc, #4]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
 800146e:	e01a      	b.n	80014a6 <HAL_RCC_OscConfig+0x2d2>
 8001470:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001474:	4b9e      	ldr	r3, [pc, #632]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a9d      	ldr	r2, [pc, #628]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fa62 	bl	8000948 <HAL_GetTick>
 8001484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fa5e 	bl	8000948 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e2c2      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800149a:	4b95      	ldr	r3, [pc, #596]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80a9 	beq.w	8001606 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b4:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014be:	4b8c      	ldr	r3, [pc, #560]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d007      	beq.n	80014da <HAL_RCC_OscConfig+0x306>
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b18      	cmp	r3, #24
 80014ce:	d13a      	bne.n	8001546 <HAL_RCC_OscConfig+0x372>
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d135      	bne.n	8001546 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x31e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	2b80      	cmp	r3, #128	; 0x80
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e296      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014f2:	f7ff fa35 	bl	8000960 <HAL_GetREVID>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d817      	bhi.n	8001530 <HAL_RCC_OscConfig+0x35c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	2b20      	cmp	r3, #32
 8001506:	d108      	bne.n	800151a <HAL_RCC_OscConfig+0x346>
 8001508:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001510:	4a77      	ldr	r2, [pc, #476]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001516:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001518:	e075      	b.n	8001606 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800151a:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	069b      	lsls	r3, r3, #26
 8001528:	4971      	ldr	r1, [pc, #452]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800152e:	e06a      	b.n	8001606 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001530:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	496c      	ldr	r1, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001540:	4313      	orrs	r3, r2
 8001542:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001544:	e05f      	b.n	8001606 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d042      	beq.n	80015d4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800154e:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a67      	ldr	r2, [pc, #412]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff f9f5 	bl	8000948 <HAL_GetTick>
 800155e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001562:	f7ff f9f1 	bl	8000948 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e255      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001574:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001580:	f7ff f9ee 	bl	8000960 <HAL_GetREVID>
 8001584:	4603      	mov	r3, r0
 8001586:	f241 0203 	movw	r2, #4099	; 0x1003
 800158a:	4293      	cmp	r3, r2
 800158c:	d817      	bhi.n	80015be <HAL_RCC_OscConfig+0x3ea>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	2b20      	cmp	r3, #32
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_OscConfig+0x3d4>
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015a4:	6053      	str	r3, [r2, #4]
 80015a6:	e02e      	b.n	8001606 <HAL_RCC_OscConfig+0x432>
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	069b      	lsls	r3, r3, #26
 80015b6:	494e      	ldr	r1, [pc, #312]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e023      	b.n	8001606 <HAL_RCC_OscConfig+0x432>
 80015be:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	4948      	ldr	r1, [pc, #288]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]
 80015d2:	e018      	b.n	8001606 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a45      	ldr	r2, [pc, #276]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff f9b2 	bl	8000948 <HAL_GetTick>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015e8:	f7ff f9ae 	bl	8000948 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e212      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d036      	beq.n	8001680 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d019      	beq.n	800164e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161e:	4a34      	ldr	r2, [pc, #208]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff f98f 	bl	8000948 <HAL_GetTick>
 800162a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff f98b 	bl	8000948 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1ef      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x45a>
 800164c:	e018      	b.n	8001680 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001652:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff f975 	bl	8000948 <HAL_GetTick>
 800165e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff f971 	bl	8000948 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1d5      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b00      	cmp	r3, #0
 800168a:	d039      	beq.n	8001700 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d019      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 800169a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016a0:	f7ff f952 	bl	8000948 <HAL_GetTick>
 80016a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016a8:	f7ff f94e 	bl	8000948 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1b2      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4d4>
 80016c6:	e01b      	b.n	8001700 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_RCC_OscConfig+0x51c>)
 80016ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016d4:	f7ff f938 	bl	8000948 <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016dc:	f7ff f934 	bl	8000948 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d904      	bls.n	80016f4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e198      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
 80016ee:	bf00      	nop
 80016f0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016f4:	4ba3      	ldr	r3, [pc, #652]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ed      	bne.n	80016dc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8081 	beq.w	8001810 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800170e:	4b9e      	ldr	r3, [pc, #632]	; (8001988 <HAL_RCC_OscConfig+0x7b4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a9d      	ldr	r2, [pc, #628]	; (8001988 <HAL_RCC_OscConfig+0x7b4>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800171a:	f7ff f915 	bl	8000948 <HAL_GetTick>
 800171e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff f911 	bl	8000948 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e175      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001734:	4b94      	ldr	r3, [pc, #592]	; (8001988 <HAL_RCC_OscConfig+0x7b4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x582>
 8001748:	4b8e      	ldr	r3, [pc, #568]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a8d      	ldr	r2, [pc, #564]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_OscConfig+0x5de>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x5a4>
 800175e:	4b89      	ldr	r3, [pc, #548]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	4a88      	ldr	r2, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	; 0x70
 800176a:	4b86      	ldr	r3, [pc, #536]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	4a85      	ldr	r2, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	; 0x70
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x5de>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x5c6>
 8001780:	4b80      	ldr	r3, [pc, #512]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a7f      	ldr	r2, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	4b7d      	ldr	r3, [pc, #500]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a7c      	ldr	r2, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x5de>
 800179a:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a79      	ldr	r2, [pc, #484]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	4b77      	ldr	r3, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a76      	ldr	r2, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff f8c5 	bl	8000948 <HAL_GetTick>
 80017be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff f8c1 	bl	8000948 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e123      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x5ee>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff f8af 	bl	8000948 <HAL_GetTick>
 80017ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff f8ab 	bl	8000948 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e10d      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001804:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 8102 	beq.w	8001a1e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001822:	2b18      	cmp	r3, #24
 8001824:	f000 80bd 	beq.w	80019a2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2b02      	cmp	r3, #2
 800182e:	f040 8095 	bne.w	800195c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a53      	ldr	r2, [pc, #332]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff f883 	bl	8000948 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff f87f 	bl	8000948 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0e3      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	4b48      	ldr	r3, [pc, #288]	; (800198c <HAL_RCC_OscConfig+0x7b8>)
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	430a      	orrs	r2, r1
 8001878:	4942      	ldr	r1, [pc, #264]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800187a:	4313      	orrs	r3, r2
 800187c:	628b      	str	r3, [r1, #40]	; 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	3b01      	subs	r3, #1
 8001884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	3b01      	subs	r3, #1
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	b29b      	uxth	r3, r3
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001898:	3b01      	subs	r3, #1
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	3b01      	subs	r3, #1
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018ae:	4935      	ldr	r1, [pc, #212]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80018b4:	4b33      	ldr	r3, [pc, #204]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	4a32      	ldr	r2, [pc, #200]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x7bc>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018cc:	00d2      	lsls	r2, r2, #3
 80018ce:	492d      	ldr	r1, [pc, #180]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f023 020c 	bic.w	r2, r3, #12
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4928      	ldr	r1, [pc, #160]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	f023 0202 	bic.w	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4924      	ldr	r1, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800190a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	4a18      	ldr	r2, [pc, #96]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a15      	ldr	r2, [pc, #84]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f808 	bl	8000948 <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f804 	bl	8000948 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e068      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x768>
 800195a:	e060      	b.n	8001a1e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_RCC_OscConfig+0x7b0>)
 8001962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7fe ffee 	bl	8000948 <HAL_GetTick>
 800196c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800196e:	e011      	b.n	8001994 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7fe ffea 	bl	8000948 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d90a      	bls.n	8001994 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e04e      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
 8001982:	bf00      	nop
 8001984:	58024400 	.word	0x58024400
 8001988:	58024800 	.word	0x58024800
 800198c:	fffffc0c 	.word	0xfffffc0c
 8001990:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x854>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e7      	bne.n	8001970 <HAL_RCC_OscConfig+0x79c>
 80019a0:	e03d      	b.n	8001a1e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x854>)
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_RCC_OscConfig+0x854>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d031      	beq.n	8001a1a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d12a      	bne.n	8001a1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d122      	bne.n	8001a1a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d11a      	bne.n	8001a1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	0a5b      	lsrs	r3, r3, #9
 80019e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d111      	bne.n	8001a1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d108      	bne.n	8001a1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	0e1b      	lsrs	r3, r3, #24
 8001a0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58024400 	.word	0x58024400

08001a2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e19c      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b8a      	ldr	r3, [pc, #552]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b87      	ldr	r3, [pc, #540]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 020f 	bic.w	r2, r3, #15
 8001a56:	4985      	ldr	r1, [pc, #532]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e184      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d010      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d908      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a8c:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4975      	ldr	r1, [pc, #468]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d908      	bls.n	8001acc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aba:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	496a      	ldr	r1, [pc, #424]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d010      	beq.n	8001afa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d908      	bls.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ae8:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	495e      	ldr	r1, [pc, #376]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d010      	beq.n	8001b28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d908      	bls.n	8001b28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b16:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4953      	ldr	r1, [pc, #332]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d010      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d908      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f023 020f 	bic.w	r2, r3, #15
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4947      	ldr	r1, [pc, #284]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d055      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4940      	ldr	r1, [pc, #256]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b7c:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d121      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0f6      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d115      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0ea      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0de      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d6      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f023 0207 	bic.w	r2, r3, #7
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4925      	ldr	r1, [pc, #148]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7fe feb3 	bl	8000948 <HAL_GetTick>
 8001be2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be6:	f7fe feaf 	bl	8000948 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0be      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d1eb      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d010      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d208      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f023 020f 	bic.w	r2, r3, #15
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	490e      	ldr	r1, [pc, #56]	; (8001c70 <HAL_RCC_ClockConfig+0x244>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d214      	bcs.n	8001c74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	4906      	ldr	r1, [pc, #24]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_RCC_ClockConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e086      	b.n	8001d7a <HAL_RCC_ClockConfig+0x34e>
 8001c6c:	52002000 	.word	0x52002000
 8001c70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d208      	bcs.n	8001ca2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c90:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	4939      	ldr	r1, [pc, #228]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d208      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cbe:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	492e      	ldr	r1, [pc, #184]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d010      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d208      	bcs.n	8001cfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4922      	ldr	r1, [pc, #136]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d208      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4917      	ldr	r1, [pc, #92]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d2c:	f000 f834 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	4912      	ldr	r1, [pc, #72]	; (8001d88 <HAL_RCC_ClockConfig+0x35c>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_RCC_ClockConfig+0x358>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_RCC_ClockConfig+0x35c>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x360>)
 8001d62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x364>)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x368>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fda0 	bl	80008b4 <HAL_InitTick>
 8001d74:	4603      	mov	r3, r0
 8001d76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	58024400 	.word	0x58024400
 8001d88:	080020fc 	.word	0x080020fc
 8001d8c:	2400000c 	.word	0x2400000c
 8001d90:	24000008 	.word	0x24000008
 8001d94:	24000010 	.word	0x24000010

08001d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d9e:	4bb3      	ldr	r3, [pc, #716]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001da6:	2b18      	cmp	r3, #24
 8001da8:	f200 8155 	bhi.w	8002056 <HAL_RCC_GetSysClockFreq+0x2be>
 8001dac:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db2:	bf00      	nop
 8001db4:	08001e19 	.word	0x08001e19
 8001db8:	08002057 	.word	0x08002057
 8001dbc:	08002057 	.word	0x08002057
 8001dc0:	08002057 	.word	0x08002057
 8001dc4:	08002057 	.word	0x08002057
 8001dc8:	08002057 	.word	0x08002057
 8001dcc:	08002057 	.word	0x08002057
 8001dd0:	08002057 	.word	0x08002057
 8001dd4:	08001e3f 	.word	0x08001e3f
 8001dd8:	08002057 	.word	0x08002057
 8001ddc:	08002057 	.word	0x08002057
 8001de0:	08002057 	.word	0x08002057
 8001de4:	08002057 	.word	0x08002057
 8001de8:	08002057 	.word	0x08002057
 8001dec:	08002057 	.word	0x08002057
 8001df0:	08002057 	.word	0x08002057
 8001df4:	08001e45 	.word	0x08001e45
 8001df8:	08002057 	.word	0x08002057
 8001dfc:	08002057 	.word	0x08002057
 8001e00:	08002057 	.word	0x08002057
 8001e04:	08002057 	.word	0x08002057
 8001e08:	08002057 	.word	0x08002057
 8001e0c:	08002057 	.word	0x08002057
 8001e10:	08002057 	.word	0x08002057
 8001e14:	08001e4b 	.word	0x08001e4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e18:	4b94      	ldr	r3, [pc, #592]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e24:	4b91      	ldr	r3, [pc, #580]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	4a90      	ldr	r2, [pc, #576]	; (8002070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001e36:	e111      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e38:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e3a:	61bb      	str	r3, [r7, #24]
    break;
 8001e3c:	e10e      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e3e:	4b8d      	ldr	r3, [pc, #564]	; (8002074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e40:	61bb      	str	r3, [r7, #24]
    break;
 8001e42:	e10b      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e44:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e46:	61bb      	str	r3, [r7, #24]
    break;
 8001e48:	e108      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e54:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e60:	4b82      	ldr	r3, [pc, #520]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e6a:	4b80      	ldr	r3, [pc, #512]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6e:	08db      	lsrs	r3, r3, #3
 8001e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80e1 	beq.w	8002050 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	f000 8083 	beq.w	8001f9c <HAL_RCC_GetSysClockFreq+0x204>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f200 80a1 	bhi.w	8001fe0 <HAL_RCC_GetSysClockFreq+0x248>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x114>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d056      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001eaa:	e099      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d02d      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	4a6b      	ldr	r2, [pc, #428]	; (8002070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee2:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ef6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800207c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001f12:	e087      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002080 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f26:	4b51      	ldr	r3, [pc, #324]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800207c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f56:	e065      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800207c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f9a:	e043      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002088 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800207c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fde:	e021      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002002:	ed97 6a02 	vldr	s12, [r7, #8]
 8002006:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800207c <HAL_RCC_GetSysClockFreq+0x2e4>
 800200a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002022:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	0a5b      	lsrs	r3, r3, #9
 800202a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800202e:	3301      	adds	r3, #1
 8002030:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800203c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002048:	ee17 3a90 	vmov	r3, s15
 800204c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800204e:	e005      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    break;
 8002054:	e002      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002058:	61bb      	str	r3, [r7, #24]
    break;
 800205a:	bf00      	nop
  }

  return sysclockfreq;
 800205c:	69bb      	ldr	r3, [r7, #24]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	58024400 	.word	0x58024400
 8002070:	03d09000 	.word	0x03d09000
 8002074:	003d0900 	.word	0x003d0900
 8002078:	017d7840 	.word	0x017d7840
 800207c:	46000000 	.word	0x46000000
 8002080:	4c742400 	.word	0x4c742400
 8002084:	4a742400 	.word	0x4a742400
 8002088:	4bbebc20 	.word	0x4bbebc20

0800208c <__libc_init_array>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	4d0d      	ldr	r5, [pc, #52]	; (80020c4 <__libc_init_array+0x38>)
 8002090:	4c0d      	ldr	r4, [pc, #52]	; (80020c8 <__libc_init_array+0x3c>)
 8002092:	1b64      	subs	r4, r4, r5
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	2600      	movs	r6, #0
 8002098:	42a6      	cmp	r6, r4
 800209a:	d109      	bne.n	80020b0 <__libc_init_array+0x24>
 800209c:	4d0b      	ldr	r5, [pc, #44]	; (80020cc <__libc_init_array+0x40>)
 800209e:	4c0c      	ldr	r4, [pc, #48]	; (80020d0 <__libc_init_array+0x44>)
 80020a0:	f000 f820 	bl	80020e4 <_init>
 80020a4:	1b64      	subs	r4, r4, r5
 80020a6:	10a4      	asrs	r4, r4, #2
 80020a8:	2600      	movs	r6, #0
 80020aa:	42a6      	cmp	r6, r4
 80020ac:	d105      	bne.n	80020ba <__libc_init_array+0x2e>
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b4:	4798      	blx	r3
 80020b6:	3601      	adds	r6, #1
 80020b8:	e7ee      	b.n	8002098 <__libc_init_array+0xc>
 80020ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80020be:	4798      	blx	r3
 80020c0:	3601      	adds	r6, #1
 80020c2:	e7f2      	b.n	80020aa <__libc_init_array+0x1e>
 80020c4:	0800210c 	.word	0x0800210c
 80020c8:	0800210c 	.word	0x0800210c
 80020cc:	0800210c 	.word	0x0800210c
 80020d0:	08002110 	.word	0x08002110

080020d4 <memset>:
 80020d4:	4402      	add	r2, r0
 80020d6:	4603      	mov	r3, r0
 80020d8:	4293      	cmp	r3, r2
 80020da:	d100      	bne.n	80020de <memset+0xa>
 80020dc:	4770      	bx	lr
 80020de:	f803 1b01 	strb.w	r1, [r3], #1
 80020e2:	e7f9      	b.n	80020d8 <memset+0x4>

080020e4 <_init>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr

080020f0 <_fini>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr
