
Line_Dection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ec  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08002888  08002888  00012888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00004e30  24000000  08002a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000ec74  24004e30  080078a8  00024e30  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24013aa4  080078a8  00033aa4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00024e30  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000be3e  00000000  00000000  00024e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018e3  00000000  00000000  00030c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005d0  00000000  00000000  00032580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000538  00000000  00000000  00032b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001d33  00000000  00000000  00033088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000068f4  00000000  00000000  00034dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014ec82  00000000  00000000  0003b6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0018a331  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000017b4  00000000  00000000  0018a384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24004e30 	.word	0x24004e30
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800286c 	.word	0x0800286c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24004e34 	.word	0x24004e34
 80002d4:	0800286c 	.word	0x0800286c

080002d8 <Create_LineMatrix>:
		 { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		 { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }

};

void Create_LineMatrix(){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
	for(int i= 0; i< h; i++){
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	e015      	b.n	8000310 <Create_LineMatrix+0x38>
		for(int j= 0; j< w; j++){
 80002e4:	2300      	movs	r3, #0
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	e00c      	b.n	8000304 <Create_LineMatrix+0x2c>
			Line_Matrix[i][j] = 0;
 80002ea:	490e      	ldr	r1, [pc, #56]	; (8000324 <Create_LineMatrix+0x4c>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2264      	movs	r2, #100	; 0x64
 80002f0:	fb02 f203 	mul.w	r2, r2, r3
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	4413      	add	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j= 0; j< w; j++){
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b63      	cmp	r3, #99	; 0x63
 8000308:	ddef      	ble.n	80002ea <Create_LineMatrix+0x12>
	for(int i= 0; i< h; i++){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3301      	adds	r3, #1
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b31      	cmp	r3, #49	; 0x31
 8000314:	dde6      	ble.n	80002e4 <Create_LineMatrix+0xc>
		}
	}
}
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	24004e4c 	.word	0x24004e4c

08000328 <Create_VoteTable>:

void Create_VoteTable(){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	for(int i= 0; i< a; i++){
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e017      	b.n	8000364 <Create_VoteTable+0x3c>
		for(int j= 0; j< 2*r+ 1; j++){
 8000334:	2300      	movs	r3, #0
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	e00e      	b.n	8000358 <Create_VoteTable+0x30>
			Vote_Matrix[i][j] = 0;
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <Create_VoteTable+0x50>)
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4613      	mov	r3, r2
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	1a9b      	subs	r3, r3, r2
 8000344:	011a      	lsls	r2, r3, #4
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	4413      	add	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j= 0; j< 2*r+ 1; j++){
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2be0      	cmp	r3, #224	; 0xe0
 800035c:	dded      	ble.n	800033a <Create_VoteTable+0x12>
	for(int i= 0; i< a; i++){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3301      	adds	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b2c      	cmp	r3, #44	; 0x2c
 8000368:	dde4      	ble.n	8000334 <Create_VoteTable+0xc>
		}
	}
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	24009c6c 	.word	0x24009c6c
 800037c:	00000000 	.word	0x00000000

08000380 <HoughTransform>:

void HoughTransform( ){
 8000380:	b580      	push	{r7, lr}
 8000382:	ed2d 8b04 	vpush	{d8-d9}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
    for(int x = 0 ; x < w ; x++ ){
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
 800038e:	e082      	b.n	8000496 <HoughTransform+0x116>
        for(int y = 0 ; y < h ; y++){
 8000390:	2300      	movs	r3, #0
 8000392:	613b      	str	r3, [r7, #16]
 8000394:	e079      	b.n	800048a <HoughTransform+0x10a>
            if( Image_Matrix[y][x] == 1){
 8000396:	494a      	ldr	r1, [pc, #296]	; (80004c0 <HoughTransform+0x140>)
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	2264      	movs	r2, #100	; 0x64
 800039c:	fb02 f203 	mul.w	r2, r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	4413      	add	r3, r2
 80003a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d16b      	bne.n	8000484 <HoughTransform+0x104>
                for(int i = 0; i < 180 ; i+=4){
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e065      	b.n	800047e <HoughTransform+0xfe>
                    // theta
                    float Angle = i*pi/180;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	ee07 3a90 	vmov	s15, r3
 80003b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80003bc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80004b0 <HoughTransform+0x130>
 80003c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003c4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80004b8 <HoughTransform+0x138>
 80003c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80003cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80003d0:	edc7 7a02 	vstr	s15, [r7, #8]
                    // p
                    float Distance = ((float) x)*cos(Angle) + ((float) y)*sin(Angle);
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	ee07 3a90 	vmov	s15, r3
 80003da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003de:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80003e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80003e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80003ea:	eeb0 0b47 	vmov.f64	d0, d7
 80003ee:	f001 fbd3 	bl	8001b98 <cos>
 80003f2:	eeb0 7b40 	vmov.f64	d7, d0
 80003f6:	ee28 8b07 	vmul.f64	d8, d8, d7
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	ee07 3a90 	vmov	s15, r3
 8000400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000404:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000408:	edd7 7a02 	vldr	s15, [r7, #8]
 800040c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000410:	eeb0 0b47 	vmov.f64	d0, d7
 8000414:	f001 fc08 	bl	8001c28 <sin>
 8000418:	eeb0 7b40 	vmov.f64	d7, d0
 800041c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000420:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000424:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000428:	edc7 7a01 	vstr	s15, [r7, #4]
                    // round
                    int j = ceilf(Distance)+ r ;
 800042c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000430:	f001 fc42 	bl	8001cb8 <ceilf>
 8000434:	eef0 7a40 	vmov.f32	s15, s0
 8000438:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80004c4 <HoughTransform+0x144>
 800043c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000444:	ee17 3a90 	vmov	r3, s15
 8000448:	603b      	str	r3, [r7, #0]
                    Vote_Matrix[i][j]++;
 800044a:	491f      	ldr	r1, [pc, #124]	; (80004c8 <HoughTransform+0x148>)
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	4613      	mov	r3, r2
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	011a      	lsls	r2, r3, #4
 8000456:	1ad2      	subs	r2, r2, r3
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	4413      	add	r3, r2
 800045c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000460:	1c59      	adds	r1, r3, #1
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <HoughTransform+0x148>)
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	4613      	mov	r3, r2
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	011a      	lsls	r2, r3, #4
 800046e:	1ad2      	subs	r2, r2, r3
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	4413      	add	r3, r2
 8000474:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                for(int i = 0; i < 180 ; i+=4){
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3304      	adds	r3, #4
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2bb3      	cmp	r3, #179	; 0xb3
 8000482:	dd96      	ble.n	80003b2 <HoughTransform+0x32>
        for(int y = 0 ; y < h ; y++){
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	3301      	adds	r3, #1
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	2b31      	cmp	r3, #49	; 0x31
 800048e:	dd82      	ble.n	8000396 <HoughTransform+0x16>
    for(int x = 0 ; x < w ; x++ ){
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	3301      	adds	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	2b63      	cmp	r3, #99	; 0x63
 800049a:	f77f af79 	ble.w	8000390 <HoughTransform+0x10>
                }
            }
        }
    }
}
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	ecbd 8b04 	vpop	{d8-d9}
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	f3af 8000 	nop.w
 80004b0:	54442eea 	.word	0x54442eea
 80004b4:	400921fb 	.word	0x400921fb
 80004b8:	00000000 	.word	0x00000000
 80004bc:	40668000 	.word	0x40668000
 80004c0:	24000000 	.word	0x24000000
 80004c4:	42e00000 	.word	0x42e00000
 80004c8:	24009c6c 	.word	0x24009c6c
 80004cc:	00000000 	.word	0x00000000

080004d0 <Get_ImageLine>:


void Get_ImageLine(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	ed2d 8b04 	vpush	{d8-d9}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
	for(int x = 0 ; x < w ; x++ ){
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e082      	b.n	80005e6 <Get_ImageLine+0x116>
	        for(int y = 0 ; y < h ; y++){
 80004e0:	2300      	movs	r3, #0
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	e079      	b.n	80005da <Get_ImageLine+0x10a>
	            if( Image_Matrix[y][x] == 1){
 80004e6:	494a      	ldr	r1, [pc, #296]	; (8000610 <Get_ImageLine+0x140>)
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	2264      	movs	r2, #100	; 0x64
 80004ec:	fb02 f203 	mul.w	r2, r2, r3
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	4413      	add	r3, r2
 80004f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d16b      	bne.n	80005d4 <Get_ImageLine+0x104>
	                for(int i = 0; i < 180 ; i+=4){
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e065      	b.n	80005ce <Get_ImageLine+0xfe>
	                    // theta
	                    float Angle = i*pi/180;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	ee07 3a90 	vmov	s15, r3
 8000508:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800050c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8000600 <Get_ImageLine+0x130>
 8000510:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000514:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8000608 <Get_ImageLine+0x138>
 8000518:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800051c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000520:	edc7 7a02 	vstr	s15, [r7, #8]
	                    // p
	                    float Distance = ((float) x)*cos(Angle) + ((float) y)*sin(Angle);
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	ee07 3a90 	vmov	s15, r3
 800052a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800052e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000532:	edd7 7a02 	vldr	s15, [r7, #8]
 8000536:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800053a:	eeb0 0b47 	vmov.f64	d0, d7
 800053e:	f001 fb2b 	bl	8001b98 <cos>
 8000542:	eeb0 7b40 	vmov.f64	d7, d0
 8000546:	ee28 8b07 	vmul.f64	d8, d8, d7
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	ee07 3a90 	vmov	s15, r3
 8000550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000554:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000558:	edd7 7a02 	vldr	s15, [r7, #8]
 800055c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000560:	eeb0 0b47 	vmov.f64	d0, d7
 8000564:	f001 fb60 	bl	8001c28 <sin>
 8000568:	eeb0 7b40 	vmov.f64	d7, d0
 800056c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000570:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000574:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000578:	edc7 7a01 	vstr	s15, [r7, #4]
	                    // round
	                    int j = ceilf(Distance)+ r ;
 800057c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000580:	f001 fb9a 	bl	8001cb8 <ceilf>
 8000584:	eef0 7a40 	vmov.f32	s15, s0
 8000588:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000614 <Get_ImageLine+0x144>
 800058c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000594:	ee17 3a90 	vmov	r3, s15
 8000598:	603b      	str	r3, [r7, #0]
	                    if(Vote_Matrix[i][j] > threshold){
 800059a:	491f      	ldr	r1, [pc, #124]	; (8000618 <Get_ImageLine+0x148>)
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4613      	mov	r3, r2
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	011a      	lsls	r2, r3, #4
 80005a6:	1ad2      	subs	r2, r2, r3
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b0:	2b0a      	cmp	r3, #10
 80005b2:	dd09      	ble.n	80005c8 <Get_ImageLine+0xf8>
	                        Line_Matrix[y][x] = 1;
 80005b4:	4919      	ldr	r1, [pc, #100]	; (800061c <Get_ImageLine+0x14c>)
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	fb02 f203 	mul.w	r2, r2, r3
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	4413      	add	r3, r2
 80005c2:	2201      	movs	r2, #1
 80005c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	                for(int i = 0; i < 180 ; i+=4){
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3304      	adds	r3, #4
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2bb3      	cmp	r3, #179	; 0xb3
 80005d2:	dd96      	ble.n	8000502 <Get_ImageLine+0x32>
	        for(int y = 0 ; y < h ; y++){
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	3301      	adds	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	2b31      	cmp	r3, #49	; 0x31
 80005de:	dd82      	ble.n	80004e6 <Get_ImageLine+0x16>
	for(int x = 0 ; x < w ; x++ ){
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2b63      	cmp	r3, #99	; 0x63
 80005ea:	f77f af79 	ble.w	80004e0 <Get_ImageLine+0x10>
	                    }
	                }
	            }
	        }
	    }
};
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	ecbd 8b04 	vpop	{d8-d9}
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	f3af 8000 	nop.w
 8000600:	54442eea 	.word	0x54442eea
 8000604:	400921fb 	.word	0x400921fb
 8000608:	00000000 	.word	0x00000000
 800060c:	40668000 	.word	0x40668000
 8000610:	24000000 	.word	0x24000000
 8000614:	42e00000 	.word	0x42e00000
 8000618:	24009c6c 	.word	0x24009c6c
 800061c:	24004e4c 	.word	0x24004e4c

08000620 <main>:
  * @retval int
  */
int Vote_Matrix[a][2*r+1];
int Line_Matrix[h][w];
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 f972 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f80a 	bl	8000640 <SystemClock_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Hough_space
  Create_VoteTable();
 800062c:	f7ff fe7c 	bl	8000328 <Create_VoteTable>
  HoughTransform();
 8000630:	f7ff fea6 	bl	8000380 <HoughTransform>
  // Reset Image to get output:
  Create_LineMatrix();
 8000634:	f7ff fe50 	bl	80002d8 <Create_LineMatrix>
  // Get Line output and save in Image_Matrix
  Get_ImageLine();
 8000638:	f7ff ff4a 	bl	80004d0 <Get_ImageLine>
  // UART Line
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x1c>
	...

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fa98 	bl	8001b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fa92 	bl	8001b84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000660:	2002      	movs	r0, #2
 8000662:	f000 fad5 	bl	8000c10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069c:	bf00      	nop
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <SystemClock_Config+0xd0>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006aa:	d1f8      	bne.n	800069e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fadf 	bl	8000c84 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006cc:	f000 f822 	bl	8000714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	233f      	movs	r3, #63	; 0x3f
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fef1 	bl	80014dc <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000700:	f000 f808 	bl	8000714 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3770      	adds	r7, #112	; 0x70
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	58000400 	.word	0x58000400
 8000710:	58024800 	.word	0x58024800

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_MspInit+0x30>)
 8000728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800072c:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x30>)
 800072e:	f043 0302 	orr.w	r3, r3, #2
 8000732:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x30>)
 8000738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800073c:	f003 0302 	and.w	r3, r3, #2
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	58024400 	.word	0x58024400

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f926 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SystemInit+0xe4>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b2:	4a36      	ldr	r2, [pc, #216]	; (800088c <SystemInit+0xe4>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <SystemInit+0xe8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	2b06      	cmp	r3, #6
 80007c6:	d807      	bhi.n	80007d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c8:	4b31      	ldr	r3, [pc, #196]	; (8000890 <SystemInit+0xe8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f023 030f 	bic.w	r3, r3, #15
 80007d0:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <SystemInit+0xe8>)
 80007d2:	f043 0307 	orr.w	r3, r3, #7
 80007d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d8:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <SystemInit+0xec>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <SystemInit+0xec>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <SystemInit+0xec>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <SystemInit+0xec>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4929      	ldr	r1, [pc, #164]	; (8000894 <SystemInit+0xec>)
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <SystemInit+0xf0>)
 80007f2:	4013      	ands	r3, r2
 80007f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <SystemInit+0xe8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemInit+0xe8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f023 030f 	bic.w	r3, r3, #15
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SystemInit+0xe8>)
 800080c:	f043 0307 	orr.w	r3, r3, #7
 8000810:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <SystemInit+0xec>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <SystemInit+0xec>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <SystemInit+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <SystemInit+0xec>)
 8000826:	4a1d      	ldr	r2, [pc, #116]	; (800089c <SystemInit+0xf4>)
 8000828:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <SystemInit+0xec>)
 800082c:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <SystemInit+0xf8>)
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <SystemInit+0xec>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <SystemInit+0xfc>)
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <SystemInit+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <SystemInit+0xec>)
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <SystemInit+0xfc>)
 8000840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <SystemInit+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <SystemInit+0xec>)
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <SystemInit+0xfc>)
 800084c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <SystemInit+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <SystemInit+0xec>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <SystemInit+0xec>)
 800085a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <SystemInit+0xec>)
 8000862:	2200      	movs	r2, #0
 8000864:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <SystemInit+0x100>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <SystemInit+0x104>)
 800086c:	4013      	ands	r3, r2
 800086e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000872:	d202      	bcs.n	800087a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <SystemInit+0x108>)
 8000876:	2201      	movs	r2, #1
 8000878:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <SystemInit+0x10c>)
 800087c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000880:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	52002000 	.word	0x52002000
 8000894:	58024400 	.word	0x58024400
 8000898:	eaf6ed7f 	.word	0xeaf6ed7f
 800089c:	02020200 	.word	0x02020200
 80008a0:	01ff0000 	.word	0x01ff0000
 80008a4:	01010280 	.word	0x01010280
 80008a8:	5c001000 	.word	0x5c001000
 80008ac:	ffff0000 	.word	0xffff0000
 80008b0:	51008108 	.word	0x51008108
 80008b4:	52004000 	.word	0x52004000

080008b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008bc:	f7ff ff74 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008c2:	490d      	ldr	r1, [pc, #52]	; (80008f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d8:	4c0a      	ldr	r4, [pc, #40]	; (8000904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e6:	f001 f929 	bl	8001b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ea:	f7ff fe99 	bl	8000620 <main>
  bx  lr
 80008ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008f8:	24004e30 	.word	0x24004e30
  ldr r2, =_sidata
 80008fc:	08002a78 	.word	0x08002a78
  ldr r2, =_sbss
 8000900:	24004e30 	.word	0x24004e30
  ldr r4, =_ebss
 8000904:	24013aa4 	.word	0x24013aa4

08000908 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC3_IRQHandler>
	...

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000912:	2003      	movs	r0, #3
 8000914:	f000 f94a 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000918:	f000 ff96 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 800091c:	4602      	mov	r2, r0
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_Init+0x68>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	f003 030f 	and.w	r3, r3, #15
 8000928:	4913      	ldr	r1, [pc, #76]	; (8000978 <HAL_Init+0x6c>)
 800092a:	5ccb      	ldrb	r3, [r1, r3]
 800092c:	f003 031f 	and.w	r3, r3, #31
 8000930:	fa22 f303 	lsr.w	r3, r2, r3
 8000934:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_Init+0x68>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_Init+0x6c>)
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	f003 031f 	and.w	r3, r3, #31
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	fa22 f303 	lsr.w	r3, r2, r3
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <HAL_Init+0x70>)
 800094e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <HAL_Init+0x74>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f814 	bl	8000984 <HAL_InitTick>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e002      	b.n	800096c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000966:	f7ff fedb 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58024400 	.word	0x58024400
 8000978:	08002888 	.word	0x08002888
 800097c:	24004e24 	.word	0x24004e24
 8000980:	24004e20 	.word	0x24004e20

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_InitTick+0x60>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e021      	b.n	80009dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_InitTick+0x64>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_InitTick+0x60>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f921 	bl	8000bf6 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f8f9 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x68>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	24004e2c 	.word	0x24004e2c
 80009e8:	24004e20 	.word	0x24004e20
 80009ec:	24004e28 	.word	0x24004e28

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	24004e2c 	.word	0x24004e2c
 8000a14:	24013aa0 	.word	0x24013aa0

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	24013aa0 	.word	0x24013aa0

08000a30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetREVID+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	0c1b      	lsrs	r3, r3, #16
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	5c001000 	.word	0x5c001000

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <__NVIC_SetPriorityGrouping+0x40>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x40>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	05fa0000 	.word	0x05fa0000

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff47 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff5e 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff90 	bl	8000b00 <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5f 	bl	8000aac <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffb2 	bl	8000b68 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_PWREx_ConfigSupply+0x70>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d00a      	beq.n	8000c3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_PWREx_ConfigSupply+0x70>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	f003 0307 	and.w	r3, r3, #7
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d001      	beq.n	8000c36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e01f      	b.n	8000c76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e01d      	b.n	8000c76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_PWREx_ConfigSupply+0x70>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f023 0207 	bic.w	r2, r3, #7
 8000c42:	490f      	ldr	r1, [pc, #60]	; (8000c80 <HAL_PWREx_ConfigSupply+0x70>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000c4a:	f7ff fee5 	bl	8000a18 <HAL_GetTick>
 8000c4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000c50:	e009      	b.n	8000c66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000c52:	f7ff fee1 	bl	8000a18 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c60:	d901      	bls.n	8000c66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e007      	b.n	8000c76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_PWREx_ConfigSupply+0x70>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c72:	d1ee      	bne.n	8000c52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	58024800 	.word	0x58024800

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f000 bc1c 	b.w	80014d0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 8087 	beq.w	8000db4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca6:	4b9e      	ldr	r3, [pc, #632]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cb0:	4b9b      	ldr	r3, [pc, #620]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	d007      	beq.n	8000ccc <HAL_RCC_OscConfig+0x48>
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	2b18      	cmp	r3, #24
 8000cc0:	d110      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x60>
 8000cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d10b      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ccc:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d06c      	beq.n	8000db2 <HAL_RCC_OscConfig+0x12e>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d168      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e3f5      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cec:	d106      	bne.n	8000cfc <HAL_RCC_OscConfig+0x78>
 8000cee:	4b8c      	ldr	r3, [pc, #560]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a8b      	ldr	r2, [pc, #556]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e02e      	b.n	8000d5a <HAL_RCC_OscConfig+0xd6>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10c      	bne.n	8000d1e <HAL_RCC_OscConfig+0x9a>
 8000d04:	4b86      	ldr	r3, [pc, #536]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a85      	ldr	r2, [pc, #532]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b83      	ldr	r3, [pc, #524]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a82      	ldr	r2, [pc, #520]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e01d      	b.n	8000d5a <HAL_RCC_OscConfig+0xd6>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0xbe>
 8000d28:	4b7d      	ldr	r3, [pc, #500]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a7c      	ldr	r2, [pc, #496]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b7a      	ldr	r3, [pc, #488]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a79      	ldr	r2, [pc, #484]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e00b      	b.n	8000d5a <HAL_RCC_OscConfig+0xd6>
 8000d42:	4b77      	ldr	r3, [pc, #476]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a76      	ldr	r2, [pc, #472]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b74      	ldr	r3, [pc, #464]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a73      	ldr	r2, [pc, #460]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d013      	beq.n	8000d8a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d62:	f7ff fe59 	bl	8000a18 <HAL_GetTick>
 8000d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fe55 	bl	8000a18 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b64      	cmp	r3, #100	; 0x64
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e3a9      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d7c:	4b68      	ldr	r3, [pc, #416]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0xe6>
 8000d88:	e014      	b.n	8000db4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fe45 	bl	8000a18 <HAL_GetTick>
 8000d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d92:	f7ff fe41 	bl	8000a18 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b64      	cmp	r3, #100	; 0x64
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e395      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000da4:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f0      	bne.n	8000d92 <HAL_RCC_OscConfig+0x10e>
 8000db0:	e000      	b.n	8000db4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80ca 	beq.w	8000f56 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000dca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000dcc:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <HAL_RCC_OscConfig+0x164>
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	2b18      	cmp	r3, #24
 8000ddc:	d156      	bne.n	8000e8c <HAL_RCC_OscConfig+0x208>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d151      	bne.n	8000e8c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d005      	beq.n	8000e00 <HAL_RCC_OscConfig+0x17c>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e367      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 0219 	bic.w	r2, r3, #25
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	4944      	ldr	r1, [pc, #272]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000e12:	f7ff fe01 	bl	8000a18 <HAL_GetTick>
 8000e16:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fdfd 	bl	8000a18 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e351      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f0      	beq.n	8000e1a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e38:	f7ff fdfa 	bl	8000a30 <HAL_GetREVID>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d817      	bhi.n	8000e76 <HAL_RCC_OscConfig+0x1f2>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	2b40      	cmp	r3, #64	; 0x40
 8000e4c:	d108      	bne.n	8000e60 <HAL_RCC_OscConfig+0x1dc>
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000e56:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e5e:	e07a      	b.n	8000f56 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	031b      	lsls	r3, r3, #12
 8000e6e:	492c      	ldr	r1, [pc, #176]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e74:	e06f      	b.n	8000f56 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	061b      	lsls	r3, r3, #24
 8000e84:	4926      	ldr	r1, [pc, #152]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e8a:	e064      	b.n	8000f56 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d047      	beq.n	8000f24 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 0219 	bic.w	r2, r3, #25
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	491f      	ldr	r1, [pc, #124]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea6:	f7ff fdb7 	bl	8000a18 <HAL_GetTick>
 8000eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eae:	f7ff fdb3 	bl	8000a18 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e307      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f0      	beq.n	8000eae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ecc:	f7ff fdb0 	bl	8000a30 <HAL_GetREVID>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f241 0203 	movw	r2, #4099	; 0x1003
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d817      	bhi.n	8000f0a <HAL_RCC_OscConfig+0x286>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	2b40      	cmp	r3, #64	; 0x40
 8000ee0:	d108      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x270>
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000eea:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6053      	str	r3, [r2, #4]
 8000ef2:	e030      	b.n	8000f56 <HAL_RCC_OscConfig+0x2d2>
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	031b      	lsls	r3, r3, #12
 8000f02:	4907      	ldr	r1, [pc, #28]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
 8000f08:	e025      	b.n	8000f56 <HAL_RCC_OscConfig+0x2d2>
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	061b      	lsls	r3, r3, #24
 8000f18:	4901      	ldr	r1, [pc, #4]	; (8000f20 <HAL_RCC_OscConfig+0x29c>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
 8000f1e:	e01a      	b.n	8000f56 <HAL_RCC_OscConfig+0x2d2>
 8000f20:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f24:	4b9e      	ldr	r3, [pc, #632]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a9d      	ldr	r2, [pc, #628]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd72 	bl	8000a18 <HAL_GetTick>
 8000f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fd6e 	bl	8000a18 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e2c2      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f4a:	4b95      	ldr	r3, [pc, #596]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80a9 	beq.w	80010b6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f64:	4b8e      	ldr	r3, [pc, #568]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f6e:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d007      	beq.n	8000f8a <HAL_RCC_OscConfig+0x306>
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b18      	cmp	r3, #24
 8000f7e:	d13a      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x372>
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d135      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f8a:	4b85      	ldr	r3, [pc, #532]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x31e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b80      	cmp	r3, #128	; 0x80
 8000f9c:	d001      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e296      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fa2:	f7ff fd45 	bl	8000a30 <HAL_GetREVID>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d817      	bhi.n	8000fe0 <HAL_RCC_OscConfig+0x35c>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d108      	bne.n	8000fca <HAL_RCC_OscConfig+0x346>
 8000fb8:	4b79      	ldr	r3, [pc, #484]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000fc0:	4a77      	ldr	r2, [pc, #476]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fc6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000fc8:	e075      	b.n	80010b6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fca:	4b75      	ldr	r3, [pc, #468]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	069b      	lsls	r3, r3, #26
 8000fd8:	4971      	ldr	r1, [pc, #452]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000fde:	e06a      	b.n	80010b6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fe0:	4b6f      	ldr	r3, [pc, #444]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	061b      	lsls	r3, r3, #24
 8000fee:	496c      	ldr	r1, [pc, #432]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ff4:	e05f      	b.n	80010b6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d042      	beq.n	8001084 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000ffe:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a67      	ldr	r2, [pc, #412]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100a:	f7ff fd05 	bl	8000a18 <HAL_GetTick>
 800100e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001012:	f7ff fd01 	bl	8000a18 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e255      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001024:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001030:	f7ff fcfe 	bl	8000a30 <HAL_GetREVID>
 8001034:	4603      	mov	r3, r0
 8001036:	f241 0203 	movw	r2, #4099	; 0x1003
 800103a:	4293      	cmp	r3, r2
 800103c:	d817      	bhi.n	800106e <HAL_RCC_OscConfig+0x3ea>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	2b20      	cmp	r3, #32
 8001044:	d108      	bne.n	8001058 <HAL_RCC_OscConfig+0x3d4>
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800104e:	4a54      	ldr	r2, [pc, #336]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001054:	6053      	str	r3, [r2, #4]
 8001056:	e02e      	b.n	80010b6 <HAL_RCC_OscConfig+0x432>
 8001058:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	069b      	lsls	r3, r3, #26
 8001066:	494e      	ldr	r1, [pc, #312]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]
 800106c:	e023      	b.n	80010b6 <HAL_RCC_OscConfig+0x432>
 800106e:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	061b      	lsls	r3, r3, #24
 800107c:	4948      	ldr	r1, [pc, #288]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 800107e:	4313      	orrs	r3, r2
 8001080:	60cb      	str	r3, [r1, #12]
 8001082:	e018      	b.n	80010b6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001084:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 800108a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800108e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff fcc2 	bl	8000a18 <HAL_GetTick>
 8001094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001098:	f7ff fcbe 	bl	8000a18 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e212      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d036      	beq.n	8001130 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d019      	beq.n	80010fe <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 80010cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ce:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d6:	f7ff fc9f 	bl	8000a18 <HAL_GetTick>
 80010da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010de:	f7ff fc9b 	bl	8000a18 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1ef      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 80010f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x45a>
 80010fc:	e018      	b.n	8001130 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001102:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110a:	f7ff fc85 	bl	8000a18 <HAL_GetTick>
 800110e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc81 	bl	8000a18 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1d5      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	2b00      	cmp	r3, #0
 800113a:	d039      	beq.n	80011b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d019      	beq.n	8001178 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 800114a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001150:	f7ff fc62 	bl	8000a18 <HAL_GetTick>
 8001154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001158:	f7ff fc5e 	bl	8000a18 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1b2      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x4d4>
 8001176:	e01b      	b.n	80011b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_RCC_OscConfig+0x51c>)
 800117e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001182:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001184:	f7ff fc48 	bl	8000a18 <HAL_GetTick>
 8001188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800118c:	f7ff fc44 	bl	8000a18 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d904      	bls.n	80011a4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e198      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
 800119e:	bf00      	nop
 80011a0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011a4:	4ba3      	ldr	r3, [pc, #652]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ed      	bne.n	800118c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8081 	beq.w	80012c0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80011be:	4b9e      	ldr	r3, [pc, #632]	; (8001438 <HAL_RCC_OscConfig+0x7b4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a9d      	ldr	r2, [pc, #628]	; (8001438 <HAL_RCC_OscConfig+0x7b4>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80011ca:	f7ff fc25 	bl	8000a18 <HAL_GetTick>
 80011ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff fc21 	bl	8000a18 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e175      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80011e4:	4b94      	ldr	r3, [pc, #592]	; (8001438 <HAL_RCC_OscConfig+0x7b4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x582>
 80011f8:	4b8e      	ldr	r3, [pc, #568]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80011fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fc:	4a8d      	ldr	r2, [pc, #564]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6713      	str	r3, [r2, #112]	; 0x70
 8001204:	e02d      	b.n	8001262 <HAL_RCC_OscConfig+0x5de>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x5a4>
 800120e:	4b89      	ldr	r3, [pc, #548]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	4a88      	ldr	r2, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6713      	str	r3, [r2, #112]	; 0x70
 800121a:	4b86      	ldr	r3, [pc, #536]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800121c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121e:	4a85      	ldr	r2, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	6713      	str	r3, [r2, #112]	; 0x70
 8001226:	e01c      	b.n	8001262 <HAL_RCC_OscConfig+0x5de>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x5c6>
 8001230:	4b80      	ldr	r3, [pc, #512]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001234:	4a7f      	ldr	r2, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6713      	str	r3, [r2, #112]	; 0x70
 800123c:	4b7d      	ldr	r3, [pc, #500]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	4a7c      	ldr	r2, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6713      	str	r3, [r2, #112]	; 0x70
 8001248:	e00b      	b.n	8001262 <HAL_RCC_OscConfig+0x5de>
 800124a:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800124c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124e:	4a79      	ldr	r2, [pc, #484]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6713      	str	r3, [r2, #112]	; 0x70
 8001256:	4b77      	ldr	r3, [pc, #476]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	4a76      	ldr	r2, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d015      	beq.n	8001296 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126a:	f7ff fbd5 	bl	8000a18 <HAL_GetTick>
 800126e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fbd1 	bl	8000a18 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e123      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ee      	beq.n	8001272 <HAL_RCC_OscConfig+0x5ee>
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff fbbf 	bl	8000a18 <HAL_GetTick>
 800129a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fbbb 	bl	8000a18 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e10d      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012b4:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80012b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8102 	beq.w	80014ce <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012d2:	2b18      	cmp	r3, #24
 80012d4:	f000 80bd 	beq.w	8001452 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	2b02      	cmp	r3, #2
 80012de:	f040 8095 	bne.w	800140c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e2:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a53      	ldr	r2, [pc, #332]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80012e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb93 	bl	8000a18 <HAL_GetTick>
 80012f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fb8f 	bl	8000a18 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e0e3      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001308:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001314:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001318:	4b48      	ldr	r3, [pc, #288]	; (800143c <HAL_RCC_OscConfig+0x7b8>)
 800131a:	4013      	ands	r3, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	430a      	orrs	r2, r1
 8001328:	4942      	ldr	r1, [pc, #264]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800132a:	4313      	orrs	r3, r2
 800132c:	628b      	str	r3, [r1, #40]	; 0x28
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	3b01      	subs	r3, #1
 8001334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133c:	3b01      	subs	r3, #1
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	b29b      	uxth	r3, r3
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001348:	3b01      	subs	r3, #1
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	3b01      	subs	r3, #1
 8001358:	061b      	lsls	r3, r3, #24
 800135a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800135e:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001360:	4313      	orrs	r3, r2
 8001362:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <HAL_RCC_OscConfig+0x7bc>)
 8001376:	4013      	ands	r3, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800137c:	00d2      	lsls	r2, r2, #3
 800137e:	492d      	ldr	r1, [pc, #180]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001380:	4313      	orrs	r3, r2
 8001382:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	f023 020c 	bic.w	r2, r3, #12
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4928      	ldr	r1, [pc, #160]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001392:	4313      	orrs	r3, r2
 8001394:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f023 0202 	bic.w	r2, r3, #2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4924      	ldr	r1, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a15      	ldr	r2, [pc, #84]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 80013de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb18 	bl	8000a18 <HAL_GetTick>
 80013e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fb14 	bl	8000a18 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e068      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x768>
 800140a:	e060      	b.n	80014ce <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 8001412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fafe 	bl	8000a18 <HAL_GetTick>
 800141c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800141e:	e011      	b.n	8001444 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fafa 	bl	8000a18 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d90a      	bls.n	8001444 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e04e      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
 8001432:	bf00      	nop
 8001434:	58024400 	.word	0x58024400
 8001438:	58024800 	.word	0x58024800
 800143c:	fffffc0c 	.word	0xfffffc0c
 8001440:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_RCC_OscConfig+0x854>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e7      	bne.n	8001420 <HAL_RCC_OscConfig+0x79c>
 8001450:	e03d      	b.n	80014ce <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_RCC_OscConfig+0x854>)
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_RCC_OscConfig+0x854>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	2b01      	cmp	r3, #1
 8001464:	d031      	beq.n	80014ca <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d12a      	bne.n	80014ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d122      	bne.n	80014ca <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001490:	429a      	cmp	r2, r3
 8001492:	d11a      	bne.n	80014ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	0a5b      	lsrs	r3, r3, #9
 8001498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d111      	bne.n	80014ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	0c1b      	lsrs	r3, r3, #16
 80014aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d108      	bne.n	80014ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	0e1b      	lsrs	r3, r3, #24
 80014bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3730      	adds	r7, #48	; 0x30
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58024400 	.word	0x58024400

080014dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e19c      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b8a      	ldr	r3, [pc, #552]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d910      	bls.n	8001520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b87      	ldr	r3, [pc, #540]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 020f 	bic.w	r2, r3, #15
 8001506:	4985      	ldr	r1, [pc, #532]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b83      	ldr	r3, [pc, #524]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e184      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d010      	beq.n	800154e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	4b7b      	ldr	r3, [pc, #492]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001538:	429a      	cmp	r2, r3
 800153a:	d908      	bls.n	800154e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800153c:	4b78      	ldr	r3, [pc, #480]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4975      	ldr	r1, [pc, #468]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800154a:	4313      	orrs	r3, r2
 800154c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d010      	beq.n	800157c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	4b70      	ldr	r3, [pc, #448]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001566:	429a      	cmp	r2, r3
 8001568:	d908      	bls.n	800157c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800156a:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	496a      	ldr	r1, [pc, #424]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 8001578:	4313      	orrs	r3, r2
 800157a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	d010      	beq.n	80015aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	4b64      	ldr	r3, [pc, #400]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001594:	429a      	cmp	r2, r3
 8001596:	d908      	bls.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001598:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	495e      	ldr	r1, [pc, #376]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d010      	beq.n	80015d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d908      	bls.n	80015d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80015c6:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4953      	ldr	r1, [pc, #332]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d010      	beq.n	8001606 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d908      	bls.n	8001606 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f023 020f 	bic.w	r2, r3, #15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4947      	ldr	r1, [pc, #284]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 8001602:	4313      	orrs	r3, r2
 8001604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d055      	beq.n	80016be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	4940      	ldr	r1, [pc, #256]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 8001620:	4313      	orrs	r3, r2
 8001622:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d107      	bne.n	800163c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d121      	bne.n	800167c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0f6      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d107      	bne.n	8001654 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d115      	bne.n	800167c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0ea      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0de      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d6      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f023 0207 	bic.w	r2, r3, #7
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4925      	ldr	r1, [pc, #148]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 800168a:	4313      	orrs	r3, r2
 800168c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff f9c3 	bl	8000a18 <HAL_GetTick>
 8001692:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001694:	e00a      	b.n	80016ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001696:	f7ff f9bf 	bl	8000a18 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0be      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d1eb      	bne.n	8001696 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d010      	beq.n	80016ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d208      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f023 020f 	bic.w	r2, r3, #15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_RCC_ClockConfig+0x244>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d214      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 020f 	bic.w	r2, r3, #15
 8001702:	4906      	ldr	r1, [pc, #24]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_RCC_ClockConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e086      	b.n	800182a <HAL_RCC_ClockConfig+0x34e>
 800171c:	52002000 	.word	0x52002000
 8001720:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d010      	beq.n	8001752 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800173c:	429a      	cmp	r2, r3
 800173e:	d208      	bcs.n	8001752 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001740:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4939      	ldr	r1, [pc, #228]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 800174e:	4313      	orrs	r3, r2
 8001750:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800176a:	429a      	cmp	r2, r3
 800176c:	d208      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	492e      	ldr	r1, [pc, #184]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 800177c:	4313      	orrs	r3, r2
 800177e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	d010      	beq.n	80017ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699a      	ldr	r2, [r3, #24]
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001798:	429a      	cmp	r2, r3
 800179a:	d208      	bcs.n	80017ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4922      	ldr	r1, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d010      	beq.n	80017dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d208      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4917      	ldr	r1, [pc, #92]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017dc:	f000 f834 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	4912      	ldr	r1, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x35c>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x358>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_RCC_ClockConfig+0x35c>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x360>)
 8001812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_RCC_ClockConfig+0x364>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_RCC_ClockConfig+0x368>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f8b0 	bl	8000984 <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	58024400 	.word	0x58024400
 8001838:	08002888 	.word	0x08002888
 800183c:	24004e24 	.word	0x24004e24
 8001840:	24004e20 	.word	0x24004e20
 8001844:	24004e28 	.word	0x24004e28

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800184e:	4bb3      	ldr	r3, [pc, #716]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001856:	2b18      	cmp	r3, #24
 8001858:	f200 8155 	bhi.w	8001b06 <HAL_RCC_GetSysClockFreq+0x2be>
 800185c:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <HAL_RCC_GetSysClockFreq+0x1c>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	080018c9 	.word	0x080018c9
 8001868:	08001b07 	.word	0x08001b07
 800186c:	08001b07 	.word	0x08001b07
 8001870:	08001b07 	.word	0x08001b07
 8001874:	08001b07 	.word	0x08001b07
 8001878:	08001b07 	.word	0x08001b07
 800187c:	08001b07 	.word	0x08001b07
 8001880:	08001b07 	.word	0x08001b07
 8001884:	080018ef 	.word	0x080018ef
 8001888:	08001b07 	.word	0x08001b07
 800188c:	08001b07 	.word	0x08001b07
 8001890:	08001b07 	.word	0x08001b07
 8001894:	08001b07 	.word	0x08001b07
 8001898:	08001b07 	.word	0x08001b07
 800189c:	08001b07 	.word	0x08001b07
 80018a0:	08001b07 	.word	0x08001b07
 80018a4:	080018f5 	.word	0x080018f5
 80018a8:	08001b07 	.word	0x08001b07
 80018ac:	08001b07 	.word	0x08001b07
 80018b0:	08001b07 	.word	0x08001b07
 80018b4:	08001b07 	.word	0x08001b07
 80018b8:	08001b07 	.word	0x08001b07
 80018bc:	08001b07 	.word	0x08001b07
 80018c0:	08001b07 	.word	0x08001b07
 80018c4:	080018fb 	.word	0x080018fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018c8:	4b94      	ldr	r3, [pc, #592]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d009      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80018d4:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	4a90      	ldr	r2, [pc, #576]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80018e6:	e111      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80018e8:	4b8d      	ldr	r3, [pc, #564]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018ea:	61bb      	str	r3, [r7, #24]
    break;
 80018ec:	e10e      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80018ee:	4b8d      	ldr	r3, [pc, #564]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80018f0:	61bb      	str	r3, [r7, #24]
    break;
 80018f2:	e10b      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80018f4:	4b8c      	ldr	r3, [pc, #560]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80018f6:	61bb      	str	r3, [r7, #24]
    break;
 80018f8:	e108      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001904:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001910:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800191a:	4b80      	ldr	r3, [pc, #512]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800191c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001932:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80e1 	beq.w	8001b00 <HAL_RCC_GetSysClockFreq+0x2b8>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b02      	cmp	r3, #2
 8001942:	f000 8083 	beq.w	8001a4c <HAL_RCC_GetSysClockFreq+0x204>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f200 80a1 	bhi.w	8001a90 <HAL_RCC_GetSysClockFreq+0x248>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x114>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d056      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x1c0>
 800195a:	e099      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800195c:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d02d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001968:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001992:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80019a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80019aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80019c2:	e087      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001b30 <HAL_RCC_GetSysClockFreq+0x2e8>
 80019d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80019ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80019ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a06:	e065      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a1a:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a4a:	e043      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001b38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a8e:	e021      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ab6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ad2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	0a5b      	lsrs	r3, r3, #9
 8001ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ade:	3301      	adds	r3, #1
 8001ae0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8001af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af8:	ee17 3a90 	vmov	r3, s15
 8001afc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001afe:	e005      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
    break;
 8001b04:	e002      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b08:	61bb      	str	r3, [r7, #24]
    break;
 8001b0a:	bf00      	nop
  }

  return sysclockfreq;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	58024400 	.word	0x58024400
 8001b20:	03d09000 	.word	0x03d09000
 8001b24:	003d0900 	.word	0x003d0900
 8001b28:	017d7840 	.word	0x017d7840
 8001b2c:	46000000 	.word	0x46000000
 8001b30:	4c742400 	.word	0x4c742400
 8001b34:	4a742400 	.word	0x4a742400
 8001b38:	4bbebc20 	.word	0x4bbebc20

08001b3c <__libc_init_array>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4d0d      	ldr	r5, [pc, #52]	; (8001b74 <__libc_init_array+0x38>)
 8001b40:	4c0d      	ldr	r4, [pc, #52]	; (8001b78 <__libc_init_array+0x3c>)
 8001b42:	1b64      	subs	r4, r4, r5
 8001b44:	10a4      	asrs	r4, r4, #2
 8001b46:	2600      	movs	r6, #0
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d109      	bne.n	8001b60 <__libc_init_array+0x24>
 8001b4c:	4d0b      	ldr	r5, [pc, #44]	; (8001b7c <__libc_init_array+0x40>)
 8001b4e:	4c0c      	ldr	r4, [pc, #48]	; (8001b80 <__libc_init_array+0x44>)
 8001b50:	f000 fe8c 	bl	800286c <_init>
 8001b54:	1b64      	subs	r4, r4, r5
 8001b56:	10a4      	asrs	r4, r4, #2
 8001b58:	2600      	movs	r6, #0
 8001b5a:	42a6      	cmp	r6, r4
 8001b5c:	d105      	bne.n	8001b6a <__libc_init_array+0x2e>
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b64:	4798      	blx	r3
 8001b66:	3601      	adds	r6, #1
 8001b68:	e7ee      	b.n	8001b48 <__libc_init_array+0xc>
 8001b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6e:	4798      	blx	r3
 8001b70:	3601      	adds	r6, #1
 8001b72:	e7f2      	b.n	8001b5a <__libc_init_array+0x1e>
 8001b74:	08002a70 	.word	0x08002a70
 8001b78:	08002a70 	.word	0x08002a70
 8001b7c:	08002a70 	.word	0x08002a70
 8001b80:	08002a74 	.word	0x08002a74

08001b84 <memset>:
 8001b84:	4402      	add	r2, r0
 8001b86:	4603      	mov	r3, r0
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <memset+0xa>
 8001b8c:	4770      	bx	lr
 8001b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b92:	e7f9      	b.n	8001b88 <memset+0x4>
 8001b94:	0000      	movs	r0, r0
	...

08001b98 <cos>:
 8001b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b9e:	ee17 3a90 	vmov	r3, s15
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <cos+0x88>)
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	dc04      	bgt.n	8001bb6 <cos+0x1e>
 8001bac:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001c18 <cos+0x80>
 8001bb0:	f000 fa06 	bl	8001fc0 <__kernel_cos>
 8001bb4:	e004      	b.n	8001bc0 <cos+0x28>
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <cos+0x8c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	dd04      	ble.n	8001bc6 <cos+0x2e>
 8001bbc:	ee30 0b40 	vsub.f64	d0, d0, d0
 8001bc0:	b005      	add	sp, #20
 8001bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc6:	4668      	mov	r0, sp
 8001bc8:	f000 f8ba 	bl	8001d40 <__ieee754_rem_pio2>
 8001bcc:	f000 0003 	and.w	r0, r0, #3
 8001bd0:	2801      	cmp	r0, #1
 8001bd2:	d007      	beq.n	8001be4 <cos+0x4c>
 8001bd4:	2802      	cmp	r0, #2
 8001bd6:	d00e      	beq.n	8001bf6 <cos+0x5e>
 8001bd8:	b9a0      	cbnz	r0, 8001c04 <cos+0x6c>
 8001bda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001bde:	ed9d 0b00 	vldr	d0, [sp]
 8001be2:	e7e5      	b.n	8001bb0 <cos+0x18>
 8001be4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001be8:	ed9d 0b00 	vldr	d0, [sp]
 8001bec:	f000 fcd4 	bl	8002598 <__kernel_sin>
 8001bf0:	eeb1 0b40 	vneg.f64	d0, d0
 8001bf4:	e7e4      	b.n	8001bc0 <cos+0x28>
 8001bf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001bfa:	ed9d 0b00 	vldr	d0, [sp]
 8001bfe:	f000 f9df 	bl	8001fc0 <__kernel_cos>
 8001c02:	e7f5      	b.n	8001bf0 <cos+0x58>
 8001c04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001c08:	ed9d 0b00 	vldr	d0, [sp]
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f000 fcc3 	bl	8002598 <__kernel_sin>
 8001c12:	e7d5      	b.n	8001bc0 <cos+0x28>
 8001c14:	f3af 8000 	nop.w
	...
 8001c20:	3fe921fb 	.word	0x3fe921fb
 8001c24:	7fefffff 	.word	0x7fefffff

08001c28 <sin>:
 8001c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <sin+0x88>)
 8001c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	dc05      	bgt.n	8001c48 <sin+0x20>
 8001c3c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001ca8 <sin+0x80>
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 fca9 	bl	8002598 <__kernel_sin>
 8001c46:	e004      	b.n	8001c52 <sin+0x2a>
 8001c48:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <sin+0x8c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	dd04      	ble.n	8001c58 <sin+0x30>
 8001c4e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8001c52:	b005      	add	sp, #20
 8001c54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c58:	4668      	mov	r0, sp
 8001c5a:	f000 f871 	bl	8001d40 <__ieee754_rem_pio2>
 8001c5e:	f000 0003 	and.w	r0, r0, #3
 8001c62:	2801      	cmp	r0, #1
 8001c64:	d008      	beq.n	8001c78 <sin+0x50>
 8001c66:	2802      	cmp	r0, #2
 8001c68:	d00d      	beq.n	8001c86 <sin+0x5e>
 8001c6a:	b9b0      	cbnz	r0, 8001c9a <sin+0x72>
 8001c6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001c70:	ed9d 0b00 	vldr	d0, [sp]
 8001c74:	2001      	movs	r0, #1
 8001c76:	e7e4      	b.n	8001c42 <sin+0x1a>
 8001c78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001c7c:	ed9d 0b00 	vldr	d0, [sp]
 8001c80:	f000 f99e 	bl	8001fc0 <__kernel_cos>
 8001c84:	e7e5      	b.n	8001c52 <sin+0x2a>
 8001c86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001c8a:	ed9d 0b00 	vldr	d0, [sp]
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f000 fc82 	bl	8002598 <__kernel_sin>
 8001c94:	eeb1 0b40 	vneg.f64	d0, d0
 8001c98:	e7db      	b.n	8001c52 <sin+0x2a>
 8001c9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001c9e:	ed9d 0b00 	vldr	d0, [sp]
 8001ca2:	f000 f98d 	bl	8001fc0 <__kernel_cos>
 8001ca6:	e7f5      	b.n	8001c94 <sin+0x6c>
	...
 8001cb0:	3fe921fb 	.word	0x3fe921fb
 8001cb4:	7fefffff 	.word	0x7fefffff

08001cb8 <ceilf>:
 8001cb8:	ee10 3a10 	vmov	r3, s0
 8001cbc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8001cc0:	3a7f      	subs	r2, #127	; 0x7f
 8001cc2:	2a16      	cmp	r2, #22
 8001cc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8001cc8:	dc2a      	bgt.n	8001d20 <ceilf+0x68>
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	da11      	bge.n	8001cf2 <ceilf+0x3a>
 8001cce:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001d34 <ceilf+0x7c>
 8001cd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001cd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd05      	ble.n	8001cec <ceilf+0x34>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db23      	blt.n	8001d2c <ceilf+0x74>
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	bf18      	it	ne
 8001ce8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8001cec:	ee00 3a10 	vmov	s0, r3
 8001cf0:	4770      	bx	lr
 8001cf2:	4911      	ldr	r1, [pc, #68]	; (8001d38 <ceilf+0x80>)
 8001cf4:	4111      	asrs	r1, r2
 8001cf6:	420b      	tst	r3, r1
 8001cf8:	d0fa      	beq.n	8001cf0 <ceilf+0x38>
 8001cfa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8001d34 <ceilf+0x7c>
 8001cfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001d02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	ddef      	ble.n	8001cec <ceilf+0x34>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bfc2      	ittt	gt
 8001d10:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8001d14:	fa40 f202 	asrgt.w	r2, r0, r2
 8001d18:	189b      	addgt	r3, r3, r2
 8001d1a:	ea23 0301 	bic.w	r3, r3, r1
 8001d1e:	e7e5      	b.n	8001cec <ceilf+0x34>
 8001d20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8001d24:	d3e4      	bcc.n	8001cf0 <ceilf+0x38>
 8001d26:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d2a:	4770      	bx	lr
 8001d2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d30:	e7dc      	b.n	8001cec <ceilf+0x34>
 8001d32:	bf00      	nop
 8001d34:	7149f2ca 	.word	0x7149f2ca
 8001d38:	007fffff 	.word	0x007fffff
 8001d3c:	00000000 	.word	0x00000000

08001d40 <__ieee754_rem_pio2>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	eeb0 7b40 	vmov.f64	d7, d0
 8001d46:	ee17 5a90 	vmov	r5, s15
 8001d4a:	4b97      	ldr	r3, [pc, #604]	; (8001fa8 <__ieee754_rem_pio2+0x268>)
 8001d4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8001d50:	429e      	cmp	r6, r3
 8001d52:	b088      	sub	sp, #32
 8001d54:	4604      	mov	r4, r0
 8001d56:	dc07      	bgt.n	8001d68 <__ieee754_rem_pio2+0x28>
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	ed84 0b00 	vstr	d0, [r4]
 8001d60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8001d64:	2000      	movs	r0, #0
 8001d66:	e01b      	b.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001d68:	4b90      	ldr	r3, [pc, #576]	; (8001fac <__ieee754_rem_pio2+0x26c>)
 8001d6a:	429e      	cmp	r6, r3
 8001d6c:	dc3b      	bgt.n	8001de6 <__ieee754_rem_pio2+0xa6>
 8001d6e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8001d72:	2d00      	cmp	r5, #0
 8001d74:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001f68 <__ieee754_rem_pio2+0x228>
 8001d78:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8001d7c:	dd19      	ble.n	8001db2 <__ieee754_rem_pio2+0x72>
 8001d7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8001d82:	429e      	cmp	r6, r3
 8001d84:	d00e      	beq.n	8001da4 <__ieee754_rem_pio2+0x64>
 8001d86:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001f70 <__ieee754_rem_pio2+0x230>
 8001d8a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001d8e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001d92:	ed84 5b00 	vstr	d5, [r4]
 8001d96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d9a:	ed84 7b02 	vstr	d7, [r4, #8]
 8001d9e:	2001      	movs	r0, #1
 8001da0:	b008      	add	sp, #32
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
 8001da4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001f78 <__ieee754_rem_pio2+0x238>
 8001da8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dac:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001f80 <__ieee754_rem_pio2+0x240>
 8001db0:	e7eb      	b.n	8001d8a <__ieee754_rem_pio2+0x4a>
 8001db2:	429e      	cmp	r6, r3
 8001db4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8001db8:	d00e      	beq.n	8001dd8 <__ieee754_rem_pio2+0x98>
 8001dba:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8001f70 <__ieee754_rem_pio2+0x230>
 8001dbe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001dc2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001dc6:	ed84 5b00 	vstr	d5, [r4]
 8001dca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd2:	ed84 7b02 	vstr	d7, [r4, #8]
 8001dd6:	e7e3      	b.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001dd8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001f78 <__ieee754_rem_pio2+0x238>
 8001ddc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001de0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001f80 <__ieee754_rem_pio2+0x240>
 8001de4:	e7eb      	b.n	8001dbe <__ieee754_rem_pio2+0x7e>
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <__ieee754_rem_pio2+0x270>)
 8001de8:	429e      	cmp	r6, r3
 8001dea:	dc6e      	bgt.n	8001eca <__ieee754_rem_pio2+0x18a>
 8001dec:	f000 fc2c 	bl	8002648 <fabs>
 8001df0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8001df4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001f88 <__ieee754_rem_pio2+0x248>
 8001df8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8001dfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001e00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001e04:	ee17 0a90 	vmov	r0, s15
 8001e08:	eeb1 4b45 	vneg.f64	d4, d5
 8001e0c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8001f68 <__ieee754_rem_pio2+0x228>
 8001e10:	eea5 0b47 	vfms.f64	d0, d5, d7
 8001e14:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8001f70 <__ieee754_rem_pio2+0x230>
 8001e18:	281f      	cmp	r0, #31
 8001e1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e1e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8001e22:	dc08      	bgt.n	8001e36 <__ieee754_rem_pio2+0xf6>
 8001e24:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <__ieee754_rem_pio2+0x274>)
 8001e26:	1e42      	subs	r2, r0, #1
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	42b3      	cmp	r3, r6
 8001e2e:	d002      	beq.n	8001e36 <__ieee754_rem_pio2+0xf6>
 8001e30:	ed84 6b00 	vstr	d6, [r4]
 8001e34:	e024      	b.n	8001e80 <__ieee754_rem_pio2+0x140>
 8001e36:	ee16 3a90 	vmov	r3, s13
 8001e3a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8001e3e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	ea4f 5226 	mov.w	r2, r6, asr #20
 8001e48:	ddf2      	ble.n	8001e30 <__ieee754_rem_pio2+0xf0>
 8001e4a:	eeb0 6b40 	vmov.f64	d6, d0
 8001e4e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8001f78 <__ieee754_rem_pio2+0x238>
 8001e52:	eea4 6b03 	vfma.f64	d6, d4, d3
 8001e56:	ee30 7b46 	vsub.f64	d7, d0, d6
 8001e5a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8001e5e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8001f80 <__ieee754_rem_pio2+0x240>
 8001e62:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8001e66:	ee36 3b47 	vsub.f64	d3, d6, d7
 8001e6a:	ee13 3a90 	vmov	r3, s7
 8001e6e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b31      	cmp	r3, #49	; 0x31
 8001e76:	dc17      	bgt.n	8001ea8 <__ieee754_rem_pio2+0x168>
 8001e78:	eeb0 0b46 	vmov.f64	d0, d6
 8001e7c:	ed84 3b00 	vstr	d3, [r4]
 8001e80:	ed94 6b00 	vldr	d6, [r4]
 8001e84:	2d00      	cmp	r5, #0
 8001e86:	ee30 0b46 	vsub.f64	d0, d0, d6
 8001e8a:	ee30 7b47 	vsub.f64	d7, d0, d7
 8001e8e:	ed84 7b02 	vstr	d7, [r4, #8]
 8001e92:	da85      	bge.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001e94:	eeb1 6b46 	vneg.f64	d6, d6
 8001e98:	ed84 6b00 	vstr	d6, [r4]
 8001e9c:	eeb1 7b47 	vneg.f64	d7, d7
 8001ea0:	4240      	negs	r0, r0
 8001ea2:	ed84 7b02 	vstr	d7, [r4, #8]
 8001ea6:	e77b      	b.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001ea8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8001f90 <__ieee754_rem_pio2+0x250>
 8001eac:	eeb0 0b46 	vmov.f64	d0, d6
 8001eb0:	eea4 0b03 	vfma.f64	d0, d4, d3
 8001eb4:	ee36 7b40 	vsub.f64	d7, d6, d0
 8001eb8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001f98 <__ieee754_rem_pio2+0x258>
 8001ebc:	eea4 7b03 	vfma.f64	d7, d4, d3
 8001ec0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8001ec4:	ee30 6b47 	vsub.f64	d6, d0, d7
 8001ec8:	e7b2      	b.n	8001e30 <__ieee754_rem_pio2+0xf0>
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <__ieee754_rem_pio2+0x278>)
 8001ecc:	429e      	cmp	r6, r3
 8001ece:	dd06      	ble.n	8001ede <__ieee754_rem_pio2+0x19e>
 8001ed0:	ee30 7b40 	vsub.f64	d7, d0, d0
 8001ed4:	ed80 7b02 	vstr	d7, [r0, #8]
 8001ed8:	ed80 7b00 	vstr	d7, [r0]
 8001edc:	e742      	b.n	8001d64 <__ieee754_rem_pio2+0x24>
 8001ede:	1532      	asrs	r2, r6, #20
 8001ee0:	ee10 0a10 	vmov	r0, s0
 8001ee4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8001ee8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8001eec:	ec41 0b17 	vmov	d7, r0, r1
 8001ef0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8001ef4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001fa0 <__ieee754_rem_pio2+0x260>
 8001ef8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8001efc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f00:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001f04:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001f08:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8001f0c:	a902      	add	r1, sp, #8
 8001f0e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8001f12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f16:	ed8d 6b04 	vstr	d6, [sp, #16]
 8001f1a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001f1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f22:	2603      	movs	r6, #3
 8001f24:	4608      	mov	r0, r1
 8001f26:	ed91 7b04 	vldr	d7, [r1, #16]
 8001f2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	4633      	mov	r3, r6
 8001f34:	f1a1 0108 	sub.w	r1, r1, #8
 8001f38:	f106 36ff 	add.w	r6, r6, #4294967295
 8001f3c:	d0f3      	beq.n	8001f26 <__ieee754_rem_pio2+0x1e6>
 8001f3e:	491f      	ldr	r1, [pc, #124]	; (8001fbc <__ieee754_rem_pio2+0x27c>)
 8001f40:	9101      	str	r1, [sp, #4]
 8001f42:	2102      	movs	r1, #2
 8001f44:	9100      	str	r1, [sp, #0]
 8001f46:	4621      	mov	r1, r4
 8001f48:	f000 f8a6 	bl	8002098 <__kernel_rem_pio2>
 8001f4c:	2d00      	cmp	r5, #0
 8001f4e:	f6bf af27 	bge.w	8001da0 <__ieee754_rem_pio2+0x60>
 8001f52:	ed94 7b00 	vldr	d7, [r4]
 8001f56:	eeb1 7b47 	vneg.f64	d7, d7
 8001f5a:	ed84 7b00 	vstr	d7, [r4]
 8001f5e:	ed94 7b02 	vldr	d7, [r4, #8]
 8001f62:	e79b      	b.n	8001e9c <__ieee754_rem_pio2+0x15c>
 8001f64:	f3af 8000 	nop.w
 8001f68:	54400000 	.word	0x54400000
 8001f6c:	3ff921fb 	.word	0x3ff921fb
 8001f70:	1a626331 	.word	0x1a626331
 8001f74:	3dd0b461 	.word	0x3dd0b461
 8001f78:	1a600000 	.word	0x1a600000
 8001f7c:	3dd0b461 	.word	0x3dd0b461
 8001f80:	2e037073 	.word	0x2e037073
 8001f84:	3ba3198a 	.word	0x3ba3198a
 8001f88:	6dc9c883 	.word	0x6dc9c883
 8001f8c:	3fe45f30 	.word	0x3fe45f30
 8001f90:	2e000000 	.word	0x2e000000
 8001f94:	3ba3198a 	.word	0x3ba3198a
 8001f98:	252049c1 	.word	0x252049c1
 8001f9c:	397b839a 	.word	0x397b839a
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	41700000 	.word	0x41700000
 8001fa8:	3fe921fb 	.word	0x3fe921fb
 8001fac:	4002d97b 	.word	0x4002d97b
 8001fb0:	413921fb 	.word	0x413921fb
 8001fb4:	08002898 	.word	0x08002898
 8001fb8:	7fefffff 	.word	0x7fefffff
 8001fbc:	08002918 	.word	0x08002918

08001fc0 <__kernel_cos>:
 8001fc0:	ee10 1a90 	vmov	r1, s1
 8001fc4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001fc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001fcc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8001fd0:	da05      	bge.n	8001fde <__kernel_cos+0x1e>
 8001fd2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8001fd6:	ee17 3a90 	vmov	r3, s15
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03d      	beq.n	800205a <__kernel_cos+0x9a>
 8001fde:	ee20 3b00 	vmul.f64	d3, d0, d0
 8001fe2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8002060 <__kernel_cos+0xa0>
 8001fe6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8002068 <__kernel_cos+0xa8>
 8001fea:	eea3 6b07 	vfma.f64	d6, d3, d7
 8001fee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8002070 <__kernel_cos+0xb0>
 8001ff2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8001ff6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8002078 <__kernel_cos+0xb8>
 8001ffa:	eea7 6b03 	vfma.f64	d6, d7, d3
 8001ffe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8002080 <__kernel_cos+0xc0>
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <__kernel_cos+0xd0>)
 8002004:	eea6 7b03 	vfma.f64	d7, d6, d3
 8002008:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002088 <__kernel_cos+0xc8>
 800200c:	4299      	cmp	r1, r3
 800200e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8002012:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8002016:	ee26 5b03 	vmul.f64	d5, d6, d3
 800201a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800201e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8002022:	eea3 6b05 	vfma.f64	d6, d3, d5
 8002026:	dc04      	bgt.n	8002032 <__kernel_cos+0x72>
 8002028:	ee37 6b46 	vsub.f64	d6, d7, d6
 800202c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8002030:	4770      	bx	lr
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <__kernel_cos+0xd4>)
 8002034:	4299      	cmp	r1, r3
 8002036:	dc0d      	bgt.n	8002054 <__kernel_cos+0x94>
 8002038:	2200      	movs	r2, #0
 800203a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800203e:	ec43 2b15 	vmov	d5, r2, r3
 8002042:	ee34 0b45 	vsub.f64	d0, d4, d5
 8002046:	ee37 7b45 	vsub.f64	d7, d7, d5
 800204a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800204e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8002052:	4770      	bx	lr
 8002054:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8002058:	e7f3      	b.n	8002042 <__kernel_cos+0x82>
 800205a:	eeb0 0b44 	vmov.f64	d0, d4
 800205e:	4770      	bx	lr
 8002060:	be8838d4 	.word	0xbe8838d4
 8002064:	bda8fae9 	.word	0xbda8fae9
 8002068:	bdb4b1c4 	.word	0xbdb4b1c4
 800206c:	3e21ee9e 	.word	0x3e21ee9e
 8002070:	809c52ad 	.word	0x809c52ad
 8002074:	be927e4f 	.word	0xbe927e4f
 8002078:	19cb1590 	.word	0x19cb1590
 800207c:	3efa01a0 	.word	0x3efa01a0
 8002080:	16c15177 	.word	0x16c15177
 8002084:	bf56c16c 	.word	0xbf56c16c
 8002088:	5555554c 	.word	0x5555554c
 800208c:	3fa55555 	.word	0x3fa55555
 8002090:	3fd33332 	.word	0x3fd33332
 8002094:	3fe90000 	.word	0x3fe90000

08002098 <__kernel_rem_pio2>:
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800209c:	ed2d 8b06 	vpush	{d8-d10}
 80020a0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80020a4:	469b      	mov	fp, r3
 80020a6:	460f      	mov	r7, r1
 80020a8:	4bcf      	ldr	r3, [pc, #828]	; (80023e8 <__kernel_rem_pio2+0x350>)
 80020aa:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80020ac:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80020b0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80020b4:	9000      	str	r0, [sp, #0]
 80020b6:	f112 0f14 	cmn.w	r2, #20
 80020ba:	bfa8      	it	ge
 80020bc:	2318      	movge	r3, #24
 80020be:	f10b 31ff 	add.w	r1, fp, #4294967295
 80020c2:	bfb8      	it	lt
 80020c4:	2300      	movlt	r3, #0
 80020c6:	f06f 0417 	mvn.w	r4, #23
 80020ca:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80023d0 <__kernel_rem_pio2+0x338>
 80020ce:	bfa4      	itt	ge
 80020d0:	f1a2 0a03 	subge.w	sl, r2, #3
 80020d4:	fb9a f3f3 	sdivge	r3, sl, r3
 80020d8:	fb03 4404 	mla	r4, r3, r4, r4
 80020dc:	1a5d      	subs	r5, r3, r1
 80020de:	4414      	add	r4, r2
 80020e0:	eb09 0601 	add.w	r6, r9, r1
 80020e4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80020e8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80020ec:	2200      	movs	r2, #0
 80020ee:	42b2      	cmp	r2, r6
 80020f0:	dd12      	ble.n	8002118 <__kernel_rem_pio2+0x80>
 80020f2:	aa18      	add	r2, sp, #96	; 0x60
 80020f4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80020f8:	460e      	mov	r6, r1
 80020fa:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80020fe:	f1cb 0a01 	rsb	sl, fp, #1
 8002102:	eb0a 0006 	add.w	r0, sl, r6
 8002106:	4581      	cmp	r9, r0
 8002108:	db25      	blt.n	8002156 <__kernel_rem_pio2+0xbe>
 800210a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80023d0 <__kernel_rem_pio2+0x338>
 800210e:	f8dd e000 	ldr.w	lr, [sp]
 8002112:	4615      	mov	r5, r2
 8002114:	2000      	movs	r0, #0
 8002116:	e015      	b.n	8002144 <__kernel_rem_pio2+0xac>
 8002118:	42d5      	cmn	r5, r2
 800211a:	d409      	bmi.n	8002130 <__kernel_rem_pio2+0x98>
 800211c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8002120:	ee07 0a90 	vmov	s15, r0
 8002124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002128:	eca8 7b02 	vstmia	r8!, {d7}
 800212c:	3201      	adds	r2, #1
 800212e:	e7de      	b.n	80020ee <__kernel_rem_pio2+0x56>
 8002130:	eeb0 7b46 	vmov.f64	d7, d6
 8002134:	e7f8      	b.n	8002128 <__kernel_rem_pio2+0x90>
 8002136:	ecbe 5b02 	vldmia	lr!, {d5}
 800213a:	ed95 6b00 	vldr	d6, [r5]
 800213e:	3001      	adds	r0, #1
 8002140:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002144:	4288      	cmp	r0, r1
 8002146:	f1a5 0508 	sub.w	r5, r5, #8
 800214a:	ddf4      	ble.n	8002136 <__kernel_rem_pio2+0x9e>
 800214c:	eca8 7b02 	vstmia	r8!, {d7}
 8002150:	3208      	adds	r2, #8
 8002152:	3601      	adds	r6, #1
 8002154:	e7d5      	b.n	8002102 <__kernel_rem_pio2+0x6a>
 8002156:	aa04      	add	r2, sp, #16
 8002158:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80023d8 <__kernel_rem_pio2+0x340>
 800215c:	ed9f aba0 	vldr	d10, [pc, #640]	; 80023e0 <__kernel_rem_pio2+0x348>
 8002160:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8002164:	9201      	str	r2, [sp, #4]
 8002166:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800216a:	464e      	mov	r6, r9
 800216c:	ab90      	add	r3, sp, #576	; 0x240
 800216e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002172:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8002176:	ab04      	add	r3, sp, #16
 8002178:	4618      	mov	r0, r3
 800217a:	4632      	mov	r2, r6
 800217c:	2a00      	cmp	r2, #0
 800217e:	dc4e      	bgt.n	800221e <__kernel_rem_pio2+0x186>
 8002180:	4620      	mov	r0, r4
 8002182:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8002186:	f000 fadf 	bl	8002748 <scalbn>
 800218a:	eeb0 8b40 	vmov.f64	d8, d0
 800218e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8002192:	ee28 0b00 	vmul.f64	d0, d8, d0
 8002196:	f000 fa63 	bl	8002660 <floor>
 800219a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800219e:	eea0 8b47 	vfms.f64	d8, d0, d7
 80021a2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80021a6:	2c00      	cmp	r4, #0
 80021a8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80021ac:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80021b0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80021b4:	ee17 8a90 	vmov	r8, s15
 80021b8:	dd46      	ble.n	8002248 <__kernel_rem_pio2+0x1b0>
 80021ba:	1e70      	subs	r0, r6, #1
 80021bc:	aa04      	add	r2, sp, #16
 80021be:	f1c4 0c18 	rsb	ip, r4, #24
 80021c2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80021c6:	fa45 f20c 	asr.w	r2, r5, ip
 80021ca:	4490      	add	r8, r2
 80021cc:	fa02 f20c 	lsl.w	r2, r2, ip
 80021d0:	1aad      	subs	r5, r5, r2
 80021d2:	aa04      	add	r2, sp, #16
 80021d4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80021d8:	f1c4 0217 	rsb	r2, r4, #23
 80021dc:	4115      	asrs	r5, r2
 80021de:	2d00      	cmp	r5, #0
 80021e0:	dd41      	ble.n	8002266 <__kernel_rem_pio2+0x1ce>
 80021e2:	f04f 0c00 	mov.w	ip, #0
 80021e6:	f108 0801 	add.w	r8, r8, #1
 80021ea:	4660      	mov	r0, ip
 80021ec:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80021f0:	4566      	cmp	r6, ip
 80021f2:	dc69      	bgt.n	80022c8 <__kernel_rem_pio2+0x230>
 80021f4:	2c00      	cmp	r4, #0
 80021f6:	dd03      	ble.n	8002200 <__kernel_rem_pio2+0x168>
 80021f8:	2c01      	cmp	r4, #1
 80021fa:	d076      	beq.n	80022ea <__kernel_rem_pio2+0x252>
 80021fc:	2c02      	cmp	r4, #2
 80021fe:	d07f      	beq.n	8002300 <__kernel_rem_pio2+0x268>
 8002200:	2d02      	cmp	r5, #2
 8002202:	d130      	bne.n	8002266 <__kernel_rem_pio2+0x1ce>
 8002204:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8002208:	ee30 8b48 	vsub.f64	d8, d0, d8
 800220c:	b358      	cbz	r0, 8002266 <__kernel_rem_pio2+0x1ce>
 800220e:	4620      	mov	r0, r4
 8002210:	9102      	str	r1, [sp, #8]
 8002212:	f000 fa99 	bl	8002748 <scalbn>
 8002216:	9902      	ldr	r1, [sp, #8]
 8002218:	ee38 8b40 	vsub.f64	d8, d8, d0
 800221c:	e023      	b.n	8002266 <__kernel_rem_pio2+0x1ce>
 800221e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8002222:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002226:	3a01      	subs	r2, #1
 8002228:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800222c:	ad68      	add	r5, sp, #416	; 0x1a0
 800222e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8002232:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8002236:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800223a:	eca0 0a01 	vstmia	r0!, {s0}
 800223e:	ed95 0b00 	vldr	d0, [r5]
 8002242:	ee37 0b00 	vadd.f64	d0, d7, d0
 8002246:	e799      	b.n	800217c <__kernel_rem_pio2+0xe4>
 8002248:	d105      	bne.n	8002256 <__kernel_rem_pio2+0x1be>
 800224a:	1e72      	subs	r2, r6, #1
 800224c:	a804      	add	r0, sp, #16
 800224e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8002252:	15ed      	asrs	r5, r5, #23
 8002254:	e7c3      	b.n	80021de <__kernel_rem_pio2+0x146>
 8002256:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800225a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002262:	da2f      	bge.n	80022c4 <__kernel_rem_pio2+0x22c>
 8002264:	2500      	movs	r5, #0
 8002266:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	f040 8087 	bne.w	8002380 <__kernel_rem_pio2+0x2e8>
 8002272:	1e73      	subs	r3, r6, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f04f 0c00 	mov.w	ip, #0
 800227a:	4548      	cmp	r0, r9
 800227c:	da47      	bge.n	800230e <__kernel_rem_pio2+0x276>
 800227e:	f1bc 0f00 	cmp.w	ip, #0
 8002282:	d070      	beq.n	8002366 <__kernel_rem_pio2+0x2ce>
 8002284:	aa04      	add	r2, sp, #16
 8002286:	3c18      	subs	r4, #24
 8002288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800228c:	2a00      	cmp	r2, #0
 800228e:	d075      	beq.n	800237c <__kernel_rem_pio2+0x2e4>
 8002290:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8002294:	4620      	mov	r0, r4
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	f000 fa56 	bl	8002748 <scalbn>
 800229c:	9b00      	ldr	r3, [sp, #0]
 800229e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80023d8 <__kernel_rem_pio2+0x340>
 80022a2:	461a      	mov	r2, r3
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	f280 80ac 	bge.w	8002402 <__kernel_rem_pio2+0x36a>
 80022aa:	4619      	mov	r1, r3
 80022ac:	2000      	movs	r0, #0
 80022ae:	2900      	cmp	r1, #0
 80022b0:	f2c0 80cd 	blt.w	800244e <__kernel_rem_pio2+0x3b6>
 80022b4:	aa68      	add	r2, sp, #416	; 0x1a0
 80022b6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80022ba:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80023d0 <__kernel_rem_pio2+0x338>
 80022be:	4e4b      	ldr	r6, [pc, #300]	; (80023ec <__kernel_rem_pio2+0x354>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	e0b8      	b.n	8002436 <__kernel_rem_pio2+0x39e>
 80022c4:	2502      	movs	r5, #2
 80022c6:	e78c      	b.n	80021e2 <__kernel_rem_pio2+0x14a>
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	b948      	cbnz	r0, 80022e0 <__kernel_rem_pio2+0x248>
 80022cc:	b11a      	cbz	r2, 80022d6 <__kernel_rem_pio2+0x23e>
 80022ce:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f10c 0c01 	add.w	ip, ip, #1
 80022da:	3304      	adds	r3, #4
 80022dc:	4610      	mov	r0, r2
 80022de:	e787      	b.n	80021f0 <__kernel_rem_pio2+0x158>
 80022e0:	ebae 0202 	sub.w	r2, lr, r2
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4602      	mov	r2, r0
 80022e8:	e7f5      	b.n	80022d6 <__kernel_rem_pio2+0x23e>
 80022ea:	1e72      	subs	r2, r6, #1
 80022ec:	ab04      	add	r3, sp, #16
 80022ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80022f6:	f10d 0c10 	add.w	ip, sp, #16
 80022fa:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80022fe:	e77f      	b.n	8002200 <__kernel_rem_pio2+0x168>
 8002300:	1e72      	subs	r2, r6, #1
 8002302:	ab04      	add	r3, sp, #16
 8002304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002308:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800230c:	e7f3      	b.n	80022f6 <__kernel_rem_pio2+0x25e>
 800230e:	aa04      	add	r2, sp, #16
 8002310:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8002314:	3801      	subs	r0, #1
 8002316:	ea4c 0c02 	orr.w	ip, ip, r2
 800231a:	e7ae      	b.n	800227a <__kernel_rem_pio2+0x1e2>
 800231c:	3001      	adds	r0, #1
 800231e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002322:	2a00      	cmp	r2, #0
 8002324:	d0fa      	beq.n	800231c <__kernel_rem_pio2+0x284>
 8002326:	eb06 020b 	add.w	r2, r6, fp
 800232a:	ad18      	add	r5, sp, #96	; 0x60
 800232c:	1c73      	adds	r3, r6, #1
 800232e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002332:	4406      	add	r6, r0
 8002334:	429e      	cmp	r6, r3
 8002336:	f6ff af19 	blt.w	800216c <__kernel_rem_pio2+0xd4>
 800233a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800233e:	9d00      	ldr	r5, [sp, #0]
 8002340:	ee07 0a90 	vmov	s15, r0
 8002344:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002348:	2000      	movs	r0, #0
 800234a:	eca2 7b02 	vstmia	r2!, {d7}
 800234e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80023d0 <__kernel_rem_pio2+0x338>
 8002352:	4694      	mov	ip, r2
 8002354:	4288      	cmp	r0, r1
 8002356:	dd09      	ble.n	800236c <__kernel_rem_pio2+0x2d4>
 8002358:	a868      	add	r0, sp, #416	; 0x1a0
 800235a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800235e:	ed80 7b00 	vstr	d7, [r0]
 8002362:	3301      	adds	r3, #1
 8002364:	e7e6      	b.n	8002334 <__kernel_rem_pio2+0x29c>
 8002366:	9b01      	ldr	r3, [sp, #4]
 8002368:	2001      	movs	r0, #1
 800236a:	e7d8      	b.n	800231e <__kernel_rem_pio2+0x286>
 800236c:	ecb5 5b02 	vldmia	r5!, {d5}
 8002370:	ed3c 6b02 	vldmdb	ip!, {d6}
 8002374:	3001      	adds	r0, #1
 8002376:	eea5 7b06 	vfma.f64	d7, d5, d6
 800237a:	e7eb      	b.n	8002354 <__kernel_rem_pio2+0x2bc>
 800237c:	3b01      	subs	r3, #1
 800237e:	e781      	b.n	8002284 <__kernel_rem_pio2+0x1ec>
 8002380:	4260      	negs	r0, r4
 8002382:	eeb0 0b48 	vmov.f64	d0, d8
 8002386:	f000 f9df 	bl	8002748 <scalbn>
 800238a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80023e0 <__kernel_rem_pio2+0x348>
 800238e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	db2b      	blt.n	80023f0 <__kernel_rem_pio2+0x358>
 8002398:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80023d8 <__kernel_rem_pio2+0x340>
 800239c:	ee20 7b07 	vmul.f64	d7, d0, d7
 80023a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80023a4:	aa04      	add	r2, sp, #16
 80023a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80023aa:	eea5 0b46 	vfms.f64	d0, d5, d6
 80023ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80023b2:	a904      	add	r1, sp, #16
 80023b4:	ee10 3a10 	vmov	r3, s0
 80023b8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80023bc:	ee17 2a10 	vmov	r2, s14
 80023c0:	1c73      	adds	r3, r6, #1
 80023c2:	3418      	adds	r4, #24
 80023c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80023c8:	e762      	b.n	8002290 <__kernel_rem_pio2+0x1f8>
 80023ca:	bf00      	nop
 80023cc:	f3af 8000 	nop.w
	...
 80023dc:	3e700000 	.word	0x3e700000
 80023e0:	00000000 	.word	0x00000000
 80023e4:	41700000 	.word	0x41700000
 80023e8:	08002a60 	.word	0x08002a60
 80023ec:	08002a20 	.word	0x08002a20
 80023f0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80023f4:	aa04      	add	r2, sp, #16
 80023f6:	ee10 3a10 	vmov	r3, s0
 80023fa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80023fe:	4633      	mov	r3, r6
 8002400:	e746      	b.n	8002290 <__kernel_rem_pio2+0x1f8>
 8002402:	a804      	add	r0, sp, #16
 8002404:	a968      	add	r1, sp, #416	; 0x1a0
 8002406:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800240a:	9000      	str	r0, [sp, #0]
 800240c:	ee07 0a90 	vmov	s15, r0
 8002410:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002414:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002418:	3a01      	subs	r2, #1
 800241a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800241e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8002422:	ed81 7b00 	vstr	d7, [r1]
 8002426:	e73d      	b.n	80022a4 <__kernel_rem_pio2+0x20c>
 8002428:	ecb6 5b02 	vldmia	r6!, {d5}
 800242c:	ecb4 6b02 	vldmia	r4!, {d6}
 8002430:	3201      	adds	r2, #1
 8002432:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002436:	454a      	cmp	r2, r9
 8002438:	dc01      	bgt.n	800243e <__kernel_rem_pio2+0x3a6>
 800243a:	4290      	cmp	r0, r2
 800243c:	daf4      	bge.n	8002428 <__kernel_rem_pio2+0x390>
 800243e:	aa40      	add	r2, sp, #256	; 0x100
 8002440:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002444:	ed82 7b00 	vstr	d7, [r2]
 8002448:	3901      	subs	r1, #1
 800244a:	3001      	adds	r0, #1
 800244c:	e72f      	b.n	80022ae <__kernel_rem_pio2+0x216>
 800244e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8002450:	2a02      	cmp	r2, #2
 8002452:	dc0a      	bgt.n	800246a <__kernel_rem_pio2+0x3d2>
 8002454:	2a00      	cmp	r2, #0
 8002456:	dc5a      	bgt.n	800250e <__kernel_rem_pio2+0x476>
 8002458:	d039      	beq.n	80024ce <__kernel_rem_pio2+0x436>
 800245a:	f008 0007 	and.w	r0, r8, #7
 800245e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8002462:	ecbd 8b06 	vpop	{d8-d10}
 8002466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800246a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800246c:	2a03      	cmp	r2, #3
 800246e:	d1f4      	bne.n	800245a <__kernel_rem_pio2+0x3c2>
 8002470:	aa40      	add	r2, sp, #256	; 0x100
 8002472:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	2800      	cmp	r0, #0
 800247c:	f1a1 0108 	sub.w	r1, r1, #8
 8002480:	dc52      	bgt.n	8002528 <__kernel_rem_pio2+0x490>
 8002482:	4619      	mov	r1, r3
 8002484:	2901      	cmp	r1, #1
 8002486:	f1a2 0208 	sub.w	r2, r2, #8
 800248a:	dc5d      	bgt.n	8002548 <__kernel_rem_pio2+0x4b0>
 800248c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8002590 <__kernel_rem_pio2+0x4f8>
 8002490:	2b01      	cmp	r3, #1
 8002492:	dc69      	bgt.n	8002568 <__kernel_rem_pio2+0x4d0>
 8002494:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8002498:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800249c:	2d00      	cmp	r5, #0
 800249e:	d16c      	bne.n	800257a <__kernel_rem_pio2+0x4e2>
 80024a0:	ed87 5b00 	vstr	d5, [r7]
 80024a4:	ed87 6b02 	vstr	d6, [r7, #8]
 80024a8:	ed87 7b04 	vstr	d7, [r7, #16]
 80024ac:	e7d5      	b.n	800245a <__kernel_rem_pio2+0x3c2>
 80024ae:	aa40      	add	r2, sp, #256	; 0x100
 80024b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80024b4:	ed92 6b00 	vldr	d6, [r2]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024be:	2b00      	cmp	r3, #0
 80024c0:	daf5      	bge.n	80024ae <__kernel_rem_pio2+0x416>
 80024c2:	b10d      	cbz	r5, 80024c8 <__kernel_rem_pio2+0x430>
 80024c4:	eeb1 7b47 	vneg.f64	d7, d7
 80024c8:	ed87 7b00 	vstr	d7, [r7]
 80024cc:	e7c5      	b.n	800245a <__kernel_rem_pio2+0x3c2>
 80024ce:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8002590 <__kernel_rem_pio2+0x4f8>
 80024d2:	e7f4      	b.n	80024be <__kernel_rem_pio2+0x426>
 80024d4:	a940      	add	r1, sp, #256	; 0x100
 80024d6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80024da:	ed91 7b00 	vldr	d7, [r1]
 80024de:	3a01      	subs	r2, #1
 80024e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80024e4:	2a00      	cmp	r2, #0
 80024e6:	daf5      	bge.n	80024d4 <__kernel_rem_pio2+0x43c>
 80024e8:	b1ad      	cbz	r5, 8002516 <__kernel_rem_pio2+0x47e>
 80024ea:	eeb1 7b46 	vneg.f64	d7, d6
 80024ee:	ed87 7b00 	vstr	d7, [r7]
 80024f2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80024f6:	a942      	add	r1, sp, #264	; 0x108
 80024f8:	2201      	movs	r2, #1
 80024fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024fe:	4293      	cmp	r3, r2
 8002500:	da0c      	bge.n	800251c <__kernel_rem_pio2+0x484>
 8002502:	b10d      	cbz	r5, 8002508 <__kernel_rem_pio2+0x470>
 8002504:	eeb1 7b47 	vneg.f64	d7, d7
 8002508:	ed87 7b02 	vstr	d7, [r7, #8]
 800250c:	e7a5      	b.n	800245a <__kernel_rem_pio2+0x3c2>
 800250e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8002590 <__kernel_rem_pio2+0x4f8>
 8002512:	461a      	mov	r2, r3
 8002514:	e7e6      	b.n	80024e4 <__kernel_rem_pio2+0x44c>
 8002516:	eeb0 7b46 	vmov.f64	d7, d6
 800251a:	e7e8      	b.n	80024ee <__kernel_rem_pio2+0x456>
 800251c:	ecb1 6b02 	vldmia	r1!, {d6}
 8002520:	3201      	adds	r2, #1
 8002522:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002526:	e7ea      	b.n	80024fe <__kernel_rem_pio2+0x466>
 8002528:	ed91 7b00 	vldr	d7, [r1]
 800252c:	ed91 5b02 	vldr	d5, [r1, #8]
 8002530:	3801      	subs	r0, #1
 8002532:	ee37 6b05 	vadd.f64	d6, d7, d5
 8002536:	ee37 7b46 	vsub.f64	d7, d7, d6
 800253a:	ed81 6b00 	vstr	d6, [r1]
 800253e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002542:	ed81 7b02 	vstr	d7, [r1, #8]
 8002546:	e798      	b.n	800247a <__kernel_rem_pio2+0x3e2>
 8002548:	ed92 7b00 	vldr	d7, [r2]
 800254c:	ed92 5b02 	vldr	d5, [r2, #8]
 8002550:	3901      	subs	r1, #1
 8002552:	ee37 6b05 	vadd.f64	d6, d7, d5
 8002556:	ee37 7b46 	vsub.f64	d7, d7, d6
 800255a:	ed82 6b00 	vstr	d6, [r2]
 800255e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002562:	ed82 7b02 	vstr	d7, [r2, #8]
 8002566:	e78d      	b.n	8002484 <__kernel_rem_pio2+0x3ec>
 8002568:	aa40      	add	r2, sp, #256	; 0x100
 800256a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800256e:	ed92 6b00 	vldr	d6, [r2]
 8002572:	3b01      	subs	r3, #1
 8002574:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002578:	e78a      	b.n	8002490 <__kernel_rem_pio2+0x3f8>
 800257a:	eeb1 5b45 	vneg.f64	d5, d5
 800257e:	eeb1 6b46 	vneg.f64	d6, d6
 8002582:	ed87 5b00 	vstr	d5, [r7]
 8002586:	eeb1 7b47 	vneg.f64	d7, d7
 800258a:	ed87 6b02 	vstr	d6, [r7, #8]
 800258e:	e78b      	b.n	80024a8 <__kernel_rem_pio2+0x410>
	...

08002598 <__kernel_sin>:
 8002598:	ee10 3a90 	vmov	r3, s1
 800259c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80025a4:	da04      	bge.n	80025b0 <__kernel_sin+0x18>
 80025a6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80025aa:	ee17 3a90 	vmov	r3, s15
 80025ae:	b35b      	cbz	r3, 8002608 <__kernel_sin+0x70>
 80025b0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80025b4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80025b8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8002610 <__kernel_sin+0x78>
 80025bc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8002618 <__kernel_sin+0x80>
 80025c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80025c4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8002620 <__kernel_sin+0x88>
 80025c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80025cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8002628 <__kernel_sin+0x90>
 80025d0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80025d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8002630 <__kernel_sin+0x98>
 80025d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80025dc:	b930      	cbnz	r0, 80025ec <__kernel_sin+0x54>
 80025de:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8002638 <__kernel_sin+0xa0>
 80025e2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80025e6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80025ea:	4770      	bx	lr
 80025ec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80025f0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80025f4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80025f8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80025fc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002640 <__kernel_sin+0xa8>
 8002600:	eea5 1b07 	vfma.f64	d1, d5, d7
 8002604:	ee30 0b41 	vsub.f64	d0, d0, d1
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	5acfd57c 	.word	0x5acfd57c
 8002614:	3de5d93a 	.word	0x3de5d93a
 8002618:	8a2b9ceb 	.word	0x8a2b9ceb
 800261c:	be5ae5e6 	.word	0xbe5ae5e6
 8002620:	57b1fe7d 	.word	0x57b1fe7d
 8002624:	3ec71de3 	.word	0x3ec71de3
 8002628:	19c161d5 	.word	0x19c161d5
 800262c:	bf2a01a0 	.word	0xbf2a01a0
 8002630:	1110f8a6 	.word	0x1110f8a6
 8002634:	3f811111 	.word	0x3f811111
 8002638:	55555549 	.word	0x55555549
 800263c:	bfc55555 	.word	0xbfc55555
 8002640:	55555549 	.word	0x55555549
 8002644:	3fc55555 	.word	0x3fc55555

08002648 <fabs>:
 8002648:	ec51 0b10 	vmov	r0, r1, d0
 800264c:	ee10 2a10 	vmov	r2, s0
 8002650:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002654:	ec43 2b10 	vmov	d0, r2, r3
 8002658:	4770      	bx	lr
 800265a:	0000      	movs	r0, r0
 800265c:	0000      	movs	r0, r0
	...

08002660 <floor>:
 8002660:	ee10 1a90 	vmov	r1, s1
 8002664:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002668:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800266c:	2b13      	cmp	r3, #19
 800266e:	b530      	push	{r4, r5, lr}
 8002670:	ee10 0a10 	vmov	r0, s0
 8002674:	ee10 5a10 	vmov	r5, s0
 8002678:	dc31      	bgt.n	80026de <floor+0x7e>
 800267a:	2b00      	cmp	r3, #0
 800267c:	da15      	bge.n	80026aa <floor+0x4a>
 800267e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8002738 <floor+0xd8>
 8002682:	ee30 0b07 	vadd.f64	d0, d0, d7
 8002686:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	dd07      	ble.n	80026a0 <floor+0x40>
 8002690:	2900      	cmp	r1, #0
 8002692:	da4e      	bge.n	8002732 <floor+0xd2>
 8002694:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002698:	4318      	orrs	r0, r3
 800269a:	d001      	beq.n	80026a0 <floor+0x40>
 800269c:	4928      	ldr	r1, [pc, #160]	; (8002740 <floor+0xe0>)
 800269e:	2000      	movs	r0, #0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4602      	mov	r2, r0
 80026a4:	ec43 2b10 	vmov	d0, r2, r3
 80026a8:	e020      	b.n	80026ec <floor+0x8c>
 80026aa:	4a26      	ldr	r2, [pc, #152]	; (8002744 <floor+0xe4>)
 80026ac:	411a      	asrs	r2, r3
 80026ae:	ea01 0402 	and.w	r4, r1, r2
 80026b2:	4304      	orrs	r4, r0
 80026b4:	d01a      	beq.n	80026ec <floor+0x8c>
 80026b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8002738 <floor+0xd8>
 80026ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80026be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	ddeb      	ble.n	80026a0 <floor+0x40>
 80026c8:	2900      	cmp	r1, #0
 80026ca:	bfbe      	ittt	lt
 80026cc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80026d0:	fa40 f303 	asrlt.w	r3, r0, r3
 80026d4:	18c9      	addlt	r1, r1, r3
 80026d6:	ea21 0102 	bic.w	r1, r1, r2
 80026da:	2000      	movs	r0, #0
 80026dc:	e7e0      	b.n	80026a0 <floor+0x40>
 80026de:	2b33      	cmp	r3, #51	; 0x33
 80026e0:	dd05      	ble.n	80026ee <floor+0x8e>
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d101      	bne.n	80026ec <floor+0x8c>
 80026e8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80026ec:	bd30      	pop	{r4, r5, pc}
 80026ee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80026f2:	f04f 32ff 	mov.w	r2, #4294967295
 80026f6:	40e2      	lsrs	r2, r4
 80026f8:	4202      	tst	r2, r0
 80026fa:	d0f7      	beq.n	80026ec <floor+0x8c>
 80026fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002738 <floor+0xd8>
 8002700:	ee30 0b07 	vadd.f64	d0, d0, d7
 8002704:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	ddc8      	ble.n	80026a0 <floor+0x40>
 800270e:	2900      	cmp	r1, #0
 8002710:	da02      	bge.n	8002718 <floor+0xb8>
 8002712:	2b14      	cmp	r3, #20
 8002714:	d103      	bne.n	800271e <floor+0xbe>
 8002716:	3101      	adds	r1, #1
 8002718:	ea20 0002 	bic.w	r0, r0, r2
 800271c:	e7c0      	b.n	80026a0 <floor+0x40>
 800271e:	2401      	movs	r4, #1
 8002720:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002724:	fa04 f303 	lsl.w	r3, r4, r3
 8002728:	4418      	add	r0, r3
 800272a:	42a8      	cmp	r0, r5
 800272c:	bf38      	it	cc
 800272e:	1909      	addcc	r1, r1, r4
 8002730:	e7f2      	b.n	8002718 <floor+0xb8>
 8002732:	2000      	movs	r0, #0
 8002734:	4601      	mov	r1, r0
 8002736:	e7b3      	b.n	80026a0 <floor+0x40>
 8002738:	8800759c 	.word	0x8800759c
 800273c:	7e37e43c 	.word	0x7e37e43c
 8002740:	bff00000 	.word	0xbff00000
 8002744:	000fffff 	.word	0x000fffff

08002748 <scalbn>:
 8002748:	b082      	sub	sp, #8
 800274a:	ed8d 0b00 	vstr	d0, [sp]
 800274e:	9b01      	ldr	r3, [sp, #4]
 8002750:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002754:	b9a2      	cbnz	r2, 8002780 <scalbn+0x38>
 8002756:	9a00      	ldr	r2, [sp, #0]
 8002758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800275c:	4313      	orrs	r3, r2
 800275e:	d03a      	beq.n	80027d6 <scalbn+0x8e>
 8002760:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8002838 <scalbn+0xf0>
 8002764:	4b40      	ldr	r3, [pc, #256]	; (8002868 <scalbn+0x120>)
 8002766:	ee20 7b07 	vmul.f64	d7, d0, d7
 800276a:	4298      	cmp	r0, r3
 800276c:	ed8d 7b00 	vstr	d7, [sp]
 8002770:	da11      	bge.n	8002796 <scalbn+0x4e>
 8002772:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8002840 <scalbn+0xf8>
 8002776:	ed9d 6b00 	vldr	d6, [sp]
 800277a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800277e:	e007      	b.n	8002790 <scalbn+0x48>
 8002780:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002784:	428a      	cmp	r2, r1
 8002786:	d10a      	bne.n	800279e <scalbn+0x56>
 8002788:	ed9d 7b00 	vldr	d7, [sp]
 800278c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002790:	ed8d 7b00 	vstr	d7, [sp]
 8002794:	e01f      	b.n	80027d6 <scalbn+0x8e>
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800279c:	3a36      	subs	r2, #54	; 0x36
 800279e:	4402      	add	r2, r0
 80027a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80027a4:	428a      	cmp	r2, r1
 80027a6:	dd0a      	ble.n	80027be <scalbn+0x76>
 80027a8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8002848 <scalbn+0x100>
 80027ac:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8002850 <scalbn+0x108>
 80027b0:	eeb0 6b47 	vmov.f64	d6, d7
 80027b4:	9b01      	ldr	r3, [sp, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80027bc:	e7dd      	b.n	800277a <scalbn+0x32>
 80027be:	2a00      	cmp	r2, #0
 80027c0:	dd0d      	ble.n	80027de <scalbn+0x96>
 80027c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80027ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80027ce:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80027d2:	e9cd 0100 	strd	r0, r1, [sp]
 80027d6:	ed9d 0b00 	vldr	d0, [sp]
 80027da:	b002      	add	sp, #8
 80027dc:	4770      	bx	lr
 80027de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80027e2:	da18      	bge.n	8002816 <scalbn+0xce>
 80027e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80027e8:	4298      	cmp	r0, r3
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027f0:	dd09      	ble.n	8002806 <scalbn+0xbe>
 80027f2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8002848 <scalbn+0x100>
 80027f6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8002850 <scalbn+0x108>
 80027fa:	eeb0 6b47 	vmov.f64	d6, d7
 80027fe:	2b00      	cmp	r3, #0
 8002800:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8002804:	e7b9      	b.n	800277a <scalbn+0x32>
 8002806:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002840 <scalbn+0xf8>
 800280a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002858 <scalbn+0x110>
 800280e:	eeb0 6b47 	vmov.f64	d6, d7
 8002812:	2b00      	cmp	r3, #0
 8002814:	e7f4      	b.n	8002800 <scalbn+0xb8>
 8002816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800281a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800281e:	3236      	adds	r2, #54	; 0x36
 8002820:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002824:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8002828:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002860 <scalbn+0x118>
 800282c:	ec41 0b17 	vmov	d7, r0, r1
 8002830:	e7a3      	b.n	800277a <scalbn+0x32>
 8002832:	bf00      	nop
 8002834:	f3af 8000 	nop.w
 8002838:	00000000 	.word	0x00000000
 800283c:	43500000 	.word	0x43500000
 8002840:	c2f8f359 	.word	0xc2f8f359
 8002844:	01a56e1f 	.word	0x01a56e1f
 8002848:	8800759c 	.word	0x8800759c
 800284c:	7e37e43c 	.word	0x7e37e43c
 8002850:	8800759c 	.word	0x8800759c
 8002854:	fe37e43c 	.word	0xfe37e43c
 8002858:	c2f8f359 	.word	0xc2f8f359
 800285c:	81a56e1f 	.word	0x81a56e1f
 8002860:	00000000 	.word	0x00000000
 8002864:	3c900000 	.word	0x3c900000
 8002868:	ffff3cb0 	.word	0xffff3cb0

0800286c <_init>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr

08002878 <_fini>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr
