
Line_Dection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007564  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007800  08007800  00017800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00004e50  24000000  08007a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ed54  24004e50  0800c870  00024e50  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24013ba4  0800c870  00033ba4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00024e50  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021446  00000000  00000000  00024e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031bc  00000000  00000000  000462c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001080  00000000  00000000  00049480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f98  00000000  00000000  0004a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003860  00000000  00000000  0004b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000173d2  00000000  00000000  0004ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001632a7  00000000  00000000  000660ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c9371  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000047bc  00000000  00000000  001c93c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24004e50 	.word	0x24004e50
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080077e4 	.word	0x080077e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24004e54 	.word	0x24004e54
 80002d4:	080077e4 	.word	0x080077e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <Create_LineMatrix>:
		 { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0 } ,


};

void Create_LineMatrix(){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
	for(int i= 0; i< height; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e015      	b.n	8000608 <Create_LineMatrix+0x38>
		for(int j= 0; j< width; j++){
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	e00c      	b.n	80005fc <Create_LineMatrix+0x2c>
			Line_Matrix[i][j] = 0;
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <Create_LineMatrix+0x4c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2264      	movs	r2, #100	; 0x64
 80005e8:	fb02 f203 	mul.w	r2, r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	2200      	movs	r2, #0
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j= 0; j< width; j++){
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2b63      	cmp	r3, #99	; 0x63
 8000600:	ddef      	ble.n	80005e2 <Create_LineMatrix+0x12>
	for(int i= 0; i< height; i++){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3301      	adds	r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b31      	cmp	r3, #49	; 0x31
 800060c:	dde6      	ble.n	80005dc <Create_LineMatrix+0xc>
		}
	}
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	24004f00 	.word	0x24004f00

08000620 <Create_VoteTable>:

void Create_VoteTable(){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
	for(int i= 0; i< a; i++){
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e017      	b.n	800065c <Create_VoteTable+0x3c>
		for(int j= 0; j< 2*r+ 1; j++){
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	e00e      	b.n	8000650 <Create_VoteTable+0x30>
			Vote_Matrix[i][j] = 0;
 8000632:	490f      	ldr	r1, [pc, #60]	; (8000670 <Create_VoteTable+0x50>)
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4613      	mov	r3, r2
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	011a      	lsls	r2, r3, #4
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	2200      	movs	r2, #0
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j= 0; j< 2*r+ 1; j++){
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2be0      	cmp	r3, #224	; 0xe0
 8000654:	dded      	ble.n	8000632 <Create_VoteTable+0x12>
	for(int i= 0; i< a; i++){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3301      	adds	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b2c      	cmp	r3, #44	; 0x2c
 8000660:	dde4      	ble.n	800062c <Create_VoteTable+0xc>
		}
	}
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	24009d20 	.word	0x24009d20
 8000674:	00000000 	.word	0x00000000

08000678 <HoughTransform>:
int timer_flag = 0;

void HoughTransform( ){
 8000678:	b580      	push	{r7, lr}
 800067a:	ed2d 8b04 	vpush	{d8-d9}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
	timer_flag = 1;
 8000682:	4b55      	ldr	r3, [pc, #340]	; (80007d8 <HoughTransform+0x160>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
	UART_Time();
 8000688:	f000 f9be 	bl	8000a08 <UART_Time>
    for(int x = 0 ; x < width ; x++ ){
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	e089      	b.n	80007a6 <HoughTransform+0x12e>
        for(int y = 0 ; y < height ; y++){
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	e07f      	b.n	8000798 <HoughTransform+0x120>
            if( Image_Matrix[y][x] == 1){
 8000698:	4950      	ldr	r1, [pc, #320]	; (80007dc <HoughTransform+0x164>)
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	2264      	movs	r2, #100	; 0x64
 800069e:	fb02 f203 	mul.w	r2, r2, r3
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	4413      	add	r3, r2
 80006a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d171      	bne.n	8000792 <HoughTransform+0x11a>
                for(int i = 0; i < 180 ; i+=4){
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e06b      	b.n	800078c <HoughTransform+0x114>
                    // theta
                    float Angle = i*pi/180;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	ee07 3a90 	vmov	s15, r3
 80006ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006be:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80007c8 <HoughTransform+0x150>
 80006c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c6:	ed9f 5b42 	vldr	d5, [pc, #264]	; 80007d0 <HoughTransform+0x158>
 80006ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006d2:	edc7 7a04 	vstr	s15, [r7, #16]
                    // p
                    float Distance = ((float) x)*cos(Angle) + ((float) y)*sin(Angle);
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80006e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80006e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ec:	eeb0 0b47 	vmov.f64	d0, d7
 80006f0:	f006 fa0e 	bl	8006b10 <cos>
 80006f4:	eeb0 7b40 	vmov.f64	d7, d0
 80006f8:	ee28 8b07 	vmul.f64	d8, d8, d7
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	ee07 3a90 	vmov	s15, r3
 8000702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000706:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800070a:	edd7 7a04 	vldr	s15, [r7, #16]
 800070e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000712:	eeb0 0b47 	vmov.f64	d0, d7
 8000716:	f006 fa43 	bl	8006ba0 <sin>
 800071a:	eeb0 7b40 	vmov.f64	d7, d0
 800071e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000722:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000726:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800072a:	edc7 7a03 	vstr	s15, [r7, #12]
                    // round
                    int column = ceilf(Distance)+ r ;
 800072e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000732:	f006 fa7d 	bl	8006c30 <ceilf>
 8000736:	eef0 7a40 	vmov.f32	s15, s0
 800073a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80007e0 <HoughTransform+0x168>
 800073e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000746:	ee17 3a90 	vmov	r3, s15
 800074a:	60bb      	str	r3, [r7, #8]
                    int row = i/4;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	2b00      	cmp	r3, #0
 8000750:	da00      	bge.n	8000754 <HoughTransform+0xdc>
 8000752:	3303      	adds	r3, #3
 8000754:	109b      	asrs	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
                    Vote_Matrix[row][column]++;
 8000758:	4922      	ldr	r1, [pc, #136]	; (80007e4 <HoughTransform+0x16c>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	4613      	mov	r3, r2
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	011a      	lsls	r2, r3, #4
 8000764:	1ad2      	subs	r2, r2, r3
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4413      	add	r3, r2
 800076a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800076e:	1c59      	adds	r1, r3, #1
 8000770:	481c      	ldr	r0, [pc, #112]	; (80007e4 <HoughTransform+0x16c>)
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	011a      	lsls	r2, r3, #4
 800077c:	1ad2      	subs	r2, r2, r3
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                for(int i = 0; i < 180 ; i+=4){
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3304      	adds	r3, #4
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2bb3      	cmp	r3, #179	; 0xb3
 8000790:	dd90      	ble.n	80006b4 <HoughTransform+0x3c>
        for(int y = 0 ; y < height ; y++){
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	3301      	adds	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	2b31      	cmp	r3, #49	; 0x31
 800079c:	f77f af7c 	ble.w	8000698 <HoughTransform+0x20>
    for(int x = 0 ; x < width ; x++ ){
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	3301      	adds	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	2b63      	cmp	r3, #99	; 0x63
 80007aa:	f77f af72 	ble.w	8000692 <HoughTransform+0x1a>
                }
            }
        }
    }
    timer_flag= 2;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HoughTransform+0x160>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	601a      	str	r2, [r3, #0]
	UART_Time();
 80007b4:	f000 f928 	bl	8000a08 <UART_Time>
}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	ecbd 8b04 	vpop	{d8-d9}
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	f3af 8000 	nop.w
 80007c8:	54442eea 	.word	0x54442eea
 80007cc:	400921fb 	.word	0x400921fb
 80007d0:	00000000 	.word	0x00000000
 80007d4:	40668000 	.word	0x40668000
 80007d8:	24004e6c 	.word	0x24004e6c
 80007dc:	24000000 	.word	0x24000000
 80007e0:	42e00000 	.word	0x42e00000
 80007e4:	24009d20 	.word	0x24009d20

080007e8 <Get_ImageLine>:

void Get_ImageLine(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	ed2d 8b04 	vpush	{d8-d9}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
	timer_flag = 3;
 80007f2:	4b55      	ldr	r3, [pc, #340]	; (8000948 <Get_ImageLine+0x160>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	601a      	str	r2, [r3, #0]
	UART_Time();
 80007f8:	f000 f906 	bl	8000a08 <UART_Time>
    for(int x = 0 ; x < width ; x++ ){
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	e089      	b.n	8000916 <Get_ImageLine+0x12e>
        for(int y = 0 ; y < height ; y++){
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	e07f      	b.n	8000908 <Get_ImageLine+0x120>
            if( Image_Matrix[y][x] == 1){
 8000808:	4950      	ldr	r1, [pc, #320]	; (800094c <Get_ImageLine+0x164>)
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	2264      	movs	r2, #100	; 0x64
 800080e:	fb02 f203 	mul.w	r2, r2, r3
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	4413      	add	r3, r2
 8000816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d171      	bne.n	8000902 <Get_ImageLine+0x11a>
                for(int i = 0; i < 180 ; i+=4){
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e06b      	b.n	80008fc <Get_ImageLine+0x114>
                    // theta
                    float angle = i*pi/180;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800082e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8000938 <Get_ImageLine+0x150>
 8000832:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000836:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8000940 <Get_ImageLine+0x158>
 800083a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800083e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000842:	edc7 7a04 	vstr	s15, [r7, #16]
                    // p
                    float Distance = ((float) x)*cos(angle) + ((float) y)*sin(angle);
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	ee07 3a90 	vmov	s15, r3
 800084c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000850:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000854:	edd7 7a04 	vldr	s15, [r7, #16]
 8000858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085c:	eeb0 0b47 	vmov.f64	d0, d7
 8000860:	f006 f956 	bl	8006b10 <cos>
 8000864:	eeb0 7b40 	vmov.f64	d7, d0
 8000868:	ee28 8b07 	vmul.f64	d8, d8, d7
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	ee07 3a90 	vmov	s15, r3
 8000872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000876:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800087a:	edd7 7a04 	vldr	s15, [r7, #16]
 800087e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000882:	eeb0 0b47 	vmov.f64	d0, d7
 8000886:	f006 f98b 	bl	8006ba0 <sin>
 800088a:	eeb0 7b40 	vmov.f64	d7, d0
 800088e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000892:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089a:	edc7 7a03 	vstr	s15, [r7, #12]
                    // round
                    int column = ceilf(Distance)+ r ;
 800089e:	ed97 0a03 	vldr	s0, [r7, #12]
 80008a2:	f006 f9c5 	bl	8006c30 <ceilf>
 80008a6:	eef0 7a40 	vmov.f32	s15, s0
 80008aa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000950 <Get_ImageLine+0x168>
 80008ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b6:	ee17 3a90 	vmov	r3, s15
 80008ba:	60bb      	str	r3, [r7, #8]
                    int row = i/4;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da00      	bge.n	80008c4 <Get_ImageLine+0xdc>
 80008c2:	3303      	adds	r3, #3
 80008c4:	109b      	asrs	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
                    if(  Vote_Matrix[row][column] >= threshold){
 80008c8:	4922      	ldr	r1, [pc, #136]	; (8000954 <Get_ImageLine+0x16c>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4613      	mov	r3, r2
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	1a9b      	subs	r3, r3, r2
 80008d2:	011a      	lsls	r2, r3, #4
 80008d4:	1ad2      	subs	r2, r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	4413      	add	r3, r2
 80008da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008de:	2b0e      	cmp	r3, #14
 80008e0:	dd09      	ble.n	80008f6 <Get_ImageLine+0x10e>
                    	Line_Matrix[y][x] = 1;
 80008e2:	491d      	ldr	r1, [pc, #116]	; (8000958 <Get_ImageLine+0x170>)
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	2264      	movs	r2, #100	; 0x64
 80008e8:	fb02 f203 	mul.w	r2, r2, r3
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	4413      	add	r3, r2
 80008f0:	2201      	movs	r2, #1
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for(int i = 0; i < 180 ; i+=4){
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3304      	adds	r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2bb3      	cmp	r3, #179	; 0xb3
 8000900:	dd90      	ble.n	8000824 <Get_ImageLine+0x3c>
        for(int y = 0 ; y < height ; y++){
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	3301      	adds	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	2b31      	cmp	r3, #49	; 0x31
 800090c:	f77f af7c 	ble.w	8000808 <Get_ImageLine+0x20>
    for(int x = 0 ; x < width ; x++ ){
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	3301      	adds	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	2b63      	cmp	r3, #99	; 0x63
 800091a:	f77f af72 	ble.w	8000802 <Get_ImageLine+0x1a>
                    }
                }
            }
        }
    }
    timer_flag = 4;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <Get_ImageLine+0x160>)
 8000920:	2204      	movs	r2, #4
 8000922:	601a      	str	r2, [r3, #0]
    UART_Time();
 8000924:	f000 f870 	bl	8000a08 <UART_Time>
}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	ecbd 8b04 	vpop	{d8-d9}
 8000932:	bd80      	pop	{r7, pc}
 8000934:	f3af 8000 	nop.w
 8000938:	54442eea 	.word	0x54442eea
 800093c:	400921fb 	.word	0x400921fb
 8000940:	00000000 	.word	0x00000000
 8000944:	40668000 	.word	0x40668000
 8000948:	24004e6c 	.word	0x24004e6c
 800094c:	24000000 	.word	0x24000000
 8000950:	42e00000 	.word	0x42e00000
 8000954:	24009d20 	.word	0x24009d20
 8000958:	24004f00 	.word	0x24004f00

0800095c <UART_data>:
uint8_t timeEnd_H[]= "<";
uint8_t timeStart_GL[]= "%";
uint8_t timeEnd_GL[]= ">";
UART_HandleTypeDef huart2;

void UART_data(){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	HAL_UART_Transmit (& huart2 , Start ,sizeof(Start), 100);
 8000962:	2364      	movs	r3, #100	; 0x64
 8000964:	2202      	movs	r2, #2
 8000966:	4922      	ldr	r1, [pc, #136]	; (80009f0 <UART_data+0x94>)
 8000968:	4822      	ldr	r0, [pc, #136]	; (80009f4 <UART_data+0x98>)
 800096a:	f004 fb73 	bl	8005054 <HAL_UART_Transmit>
	HAL_Delay(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f000 fbec 	bl	800114c <HAL_Delay>
	for(int i= 0; i< 50;i++){
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	e029      	b.n	80009ce <UART_data+0x72>
		for(int j= 0; j< 100 ;j++){
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	e020      	b.n	80009c2 <UART_data+0x66>
			if(Line_Matrix[i][j] == 1){
 8000980:	491d      	ldr	r1, [pc, #116]	; (80009f8 <UART_data+0x9c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2264      	movs	r2, #100	; 0x64
 8000986:	fb02 f203 	mul.w	r2, r2, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	4413      	add	r3, r2
 800098e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d109      	bne.n	80009aa <UART_data+0x4e>
				HAL_UART_Transmit (& huart2 , Light_Point ,sizeof(Light_Point), 100);
 8000996:	2364      	movs	r3, #100	; 0x64
 8000998:	2203      	movs	r2, #3
 800099a:	4918      	ldr	r1, [pc, #96]	; (80009fc <UART_data+0xa0>)
 800099c:	4815      	ldr	r0, [pc, #84]	; (80009f4 <UART_data+0x98>)
 800099e:	f004 fb59 	bl	8005054 <HAL_UART_Transmit>
				HAL_Delay(1);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 fbd2 	bl	800114c <HAL_Delay>
 80009a8:	e008      	b.n	80009bc <UART_data+0x60>
				}
			else{
				HAL_UART_Transmit (& huart2 , Dark_Point ,sizeof(Dark_Point), 100);
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	2203      	movs	r2, #3
 80009ae:	4914      	ldr	r1, [pc, #80]	; (8000a00 <UART_data+0xa4>)
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <UART_data+0x98>)
 80009b2:	f004 fb4f 	bl	8005054 <HAL_UART_Transmit>
				HAL_Delay(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 fbc8 	bl	800114c <HAL_Delay>
		for(int j= 0; j< 100 ;j++){
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2b63      	cmp	r3, #99	; 0x63
 80009c6:	dddb      	ble.n	8000980 <UART_data+0x24>
	for(int i= 0; i< 50;i++){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b31      	cmp	r3, #49	; 0x31
 80009d2:	ddd2      	ble.n	800097a <UART_data+0x1e>
			}
			}
		}
	HAL_UART_Transmit (& huart2 , End ,sizeof(End), 100);
 80009d4:	2364      	movs	r3, #100	; 0x64
 80009d6:	2202      	movs	r2, #2
 80009d8:	490a      	ldr	r1, [pc, #40]	; (8000a04 <UART_data+0xa8>)
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <UART_data+0x98>)
 80009dc:	f004 fb3a 	bl	8005054 <HAL_UART_Transmit>
	HAL_Delay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 fbb3 	bl	800114c <HAL_Delay>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24004e28 	.word	0x24004e28
 80009f4:	24004e70 	.word	0x24004e70
 80009f8:	24004f00 	.word	0x24004f00
 80009fc:	24004e20 	.word	0x24004e20
 8000a00:	24004e24 	.word	0x24004e24
 8000a04:	24004e2c 	.word	0x24004e2c

08000a08 <UART_Time>:
void UART_Time(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	if(timer_flag == 1){
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <UART_Time+0x70>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d108      	bne.n	8000a26 <UART_Time+0x1e>
		HAL_UART_Transmit (& huart2 , timeStart_H ,sizeof(timeStart_H), 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	2202      	movs	r2, #2
 8000a18:	4918      	ldr	r1, [pc, #96]	; (8000a7c <UART_Time+0x74>)
 8000a1a:	4819      	ldr	r0, [pc, #100]	; (8000a80 <UART_Time+0x78>)
 8000a1c:	f004 fb1a 	bl	8005054 <HAL_UART_Transmit>
		HAL_Delay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fb93 	bl	800114c <HAL_Delay>
	}
	if(timer_flag ==2){
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <UART_Time+0x70>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d108      	bne.n	8000a40 <UART_Time+0x38>
		HAL_UART_Transmit (& huart2 , timeEnd_H ,sizeof(timeEnd_H), 100);
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	2202      	movs	r2, #2
 8000a32:	4914      	ldr	r1, [pc, #80]	; (8000a84 <UART_Time+0x7c>)
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <UART_Time+0x78>)
 8000a36:	f004 fb0d 	bl	8005054 <HAL_UART_Transmit>
		HAL_Delay(1);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fb86 	bl	800114c <HAL_Delay>
	}
	if(timer_flag ==3){
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <UART_Time+0x70>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d108      	bne.n	8000a5a <UART_Time+0x52>
		HAL_UART_Transmit (& huart2 , timeStart_GL ,sizeof(timeStart_GL), 100);
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	490e      	ldr	r1, [pc, #56]	; (8000a88 <UART_Time+0x80>)
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <UART_Time+0x78>)
 8000a50:	f004 fb00 	bl	8005054 <HAL_UART_Transmit>
		HAL_Delay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fb79 	bl	800114c <HAL_Delay>
	}
	if(timer_flag ==4){
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <UART_Time+0x70>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d108      	bne.n	8000a74 <UART_Time+0x6c>
		HAL_UART_Transmit (& huart2 , timeEnd_GL ,sizeof(timeEnd_GL), 100);
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	4909      	ldr	r1, [pc, #36]	; (8000a8c <UART_Time+0x84>)
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <UART_Time+0x78>)
 8000a6a:	f004 faf3 	bl	8005054 <HAL_UART_Transmit>
		HAL_Delay(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fb6c 	bl	800114c <HAL_Delay>
	}
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24004e6c 	.word	0x24004e6c
 8000a7c:	24004e30 	.word	0x24004e30
 8000a80:	24004e70 	.word	0x24004e70
 8000a84:	24004e34 	.word	0x24004e34
 8000a88:	24004e38 	.word	0x24004e38
 8000a8c:	24004e3c 	.word	0x24004e3c

08000a90 <main>:
  * @retval int
  */
int Vote_Matrix[a][2*r+1];
int Line_Matrix[height][width];
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f000 fac8 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a98:	f000 f816 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f000 f918 	bl	8000cd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aa0:	f000 f8ca 	bl	8000c38 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000aa4:	f000 f87a 	bl	8000b9c <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <main+0x34>)
 8000aaa:	f003 ff4d 	bl	8004948 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Create Matrix
  Create_VoteTable();
 8000aae:	f7ff fdb7 	bl	8000620 <Create_VoteTable>
  Create_LineMatrix();
 8000ab2:	f7ff fd8d 	bl	80005d0 <Create_LineMatrix>
  // Hough Space
  HoughTransform();
 8000ab6:	f7ff fddf 	bl	8000678 <HoughTransform>
  // Get Line output and save in Image_Matrix
  Get_ImageLine();
 8000aba:	f7ff fe95 	bl	80007e8 <Get_ImageLine>
  // UART Line
  UART_data();
 8000abe:	f7ff ff4d 	bl	800095c <UART_data>
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <main+0x32>
 8000ac4:	24013b54 	.word	0x24013b54

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09c      	sub	sp, #112	; 0x70
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	224c      	movs	r2, #76	; 0x4c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 f812 	bl	8006b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f006 f80c 	bl	8006b00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f001 fb81 	bl	80021f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af8:	f023 0301 	bic.w	r3, r3, #1
 8000afc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SystemClock_Config+0xcc>)
 8000b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b10:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b24:	bf00      	nop
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b32:	d1f8      	bne.n	8000b26 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fb8b 	bl	8002264 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b54:	f000 f8d6 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	233f      	movs	r3, #63	; 0x3f
 8000b5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 ff9d 	bl	8002abc <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b88:	f000 f8bc 	bl	8000d04 <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3770      	adds	r7, #112	; 0x70
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58000400 	.word	0x58000400
 8000b98:	58024800 	.word	0x58024800

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000bc4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000bd2:	2263      	movs	r2, #99	; 0x63
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be2:	4814      	ldr	r0, [pc, #80]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000be4:	f003 fe58 	bl	8004898 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bee:	f000 f889 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000c00:	f003 ff1a 	bl	8004a38 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c0a:	f000 f87b 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_TIM2_Init+0x98>)
 8000c1c:	f004 f93c 	bl	8004e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c26:	f000 f86d 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	24013b54 	.word	0x24013b54

08000c38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <MX_USART2_UART_Init+0x94>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c82:	f004 f997 	bl	8004fb4 <HAL_UART_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f000 f83a 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000c94:	f005 fe46 	bl	8006924 <HAL_UARTEx_SetTxFifoThreshold>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c9e:	f000 f831 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000ca6:	f005 fe7b 	bl	80069a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb0:	f000 f828 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_USART2_UART_Init+0x90>)
 8000cb6:	f005 fdfc 	bl	80068b2 <HAL_UARTEx_DisableFifoMode>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 f820 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24004e70 	.word	0x24004e70
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_GPIO_Init+0x30>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <MX_GPIO_Init+0x30>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_GPIO_Init+0x30>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	58024400 	.word	0x58024400

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_MspInit+0x30>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d1c:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x30>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	58024400 	.word	0x58024400

08000d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d54:	d10e      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_TIM_Base_MspInit+0x3c>)
 8000d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d5c:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_TIM_Base_MspInit+0x3c>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_TIM_Base_MspInit+0x3c>)
 8000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	58024400 	.word	0x58024400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0b8      	sub	sp, #224	; 0xe0
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	22bc      	movs	r2, #188	; 0xbc
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f005 feab 	bl	8006b00 <memset>
  if(huart->Instance==USART2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <HAL_UART_MspInit+0xcc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d149      	bne.n	8000e48 <HAL_UART_MspInit+0xc4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fa06 	bl	80031d4 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dce:	f7ff ff99 	bl	8000d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_UART_MspInit+0xd0>)
 8000dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_UART_MspInit+0xd0>)
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_UART_MspInit+0xd0>)
 8000de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0xd0>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_UART_MspInit+0xd0>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_UART_MspInit+0xd0>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e30:	4619      	mov	r1, r3
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <HAL_UART_MspInit+0xd4>)
 8000e34:	f001 f82c 	bl	8001e90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2026      	movs	r0, #38	; 0x26
 8000e3e:	f000 fa90 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e42:	2026      	movs	r0, #38	; 0x26
 8000e44:	f000 faa7 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	37e0      	adds	r7, #224	; 0xe0
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40004400 	.word	0x40004400
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58020000 	.word	0x58020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f930 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <USART2_IRQHandler+0x10>)
 8000eb6:	f004 f963 	bl	8005180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	24004e70 	.word	0x24004e70

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <SystemInit+0xe4>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a36      	ldr	r2, [pc, #216]	; (8000fa8 <SystemInit+0xe4>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ed8:	4b34      	ldr	r3, [pc, #208]	; (8000fac <SystemInit+0xe8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 030f 	and.w	r3, r3, #15
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d807      	bhi.n	8000ef4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <SystemInit+0xe8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 030f 	bic.w	r3, r3, #15
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <SystemInit+0xe8>)
 8000eee:	f043 0307 	orr.w	r3, r3, #7
 8000ef2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <SystemInit+0xec>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <SystemInit+0xec>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <SystemInit+0xec>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <SystemInit+0xec>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4929      	ldr	r1, [pc, #164]	; (8000fb0 <SystemInit+0xec>)
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <SystemInit+0xf0>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <SystemInit+0xe8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <SystemInit+0xe8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 030f 	bic.w	r3, r3, #15
 8000f26:	4a21      	ldr	r2, [pc, #132]	; (8000fac <SystemInit+0xe8>)
 8000f28:	f043 0307 	orr.w	r3, r3, #7
 8000f2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <SystemInit+0xec>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <SystemInit+0xec>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <SystemInit+0xec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <SystemInit+0xec>)
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <SystemInit+0xf4>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <SystemInit+0xec>)
 8000f48:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <SystemInit+0xf8>)
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <SystemInit+0xec>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <SystemInit+0xfc>)
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <SystemInit+0xec>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <SystemInit+0xec>)
 8000f5a:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <SystemInit+0xfc>)
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <SystemInit+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <SystemInit+0xec>)
 8000f66:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <SystemInit+0xfc>)
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <SystemInit+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <SystemInit+0xec>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <SystemInit+0xec>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <SystemInit+0xec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <SystemInit+0x100>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <SystemInit+0x104>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f8e:	d202      	bcs.n	8000f96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <SystemInit+0x108>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <SystemInit+0x10c>)
 8000f98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f9c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	52002000 	.word	0x52002000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fb8:	02020200 	.word	0x02020200
 8000fbc:	01ff0000 	.word	0x01ff0000
 8000fc0:	01010280 	.word	0x01010280
 8000fc4:	5c001000 	.word	0x5c001000
 8000fc8:	ffff0000 	.word	0xffff0000
 8000fcc:	51008108 	.word	0x51008108
 8000fd0:	52004000 	.word	0x52004000

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd8:	f7ff ff74 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f005 fd59 	bl	8006ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fd43 	bl	8000a90 <main>
  bx  lr
 800100a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001010:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001014:	24004e50 	.word	0x24004e50
  ldr r2, =_sidata
 8001018:	08007a20 	.word	0x08007a20
  ldr r2, =_sbss
 800101c:	24004e50 	.word	0x24004e50
  ldr r4, =_ebss
 8001020:	24013ba4 	.word	0x24013ba4

08001024 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC3_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102e:	2003      	movs	r0, #3
 8001030:	f000 f98c 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001034:	f001 fef8 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8001038:	4602      	mov	r2, r0
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_Init+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4913      	ldr	r1, [pc, #76]	; (8001094 <HAL_Init+0x6c>)
 8001046:	5ccb      	ldrb	r3, [r1, r3]
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_Init+0x68>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_Init+0x6c>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_Init+0x70>)
 800106a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_Init+0x74>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001072:	200f      	movs	r0, #15
 8001074:	f000 f814 	bl	80010a0 <HAL_InitTick>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e002      	b.n	8001088 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001082:	f7ff fe45 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024400 	.word	0x58024400
 8001094:	08007800 	.word	0x08007800
 8001098:	24004e44 	.word	0x24004e44
 800109c:	24004e40 	.word	0x24004e40

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_InitTick+0x60>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e021      	b.n	80010f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_InitTick+0x64>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f971 	bl	80013b2 <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f93b 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x68>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	24004e4c 	.word	0x24004e4c
 8001104:	24004e40 	.word	0x24004e40
 8001108:	24004e48 	.word	0x24004e48

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	24004e4c 	.word	0x24004e4c
 8001130:	24013ba0 	.word	0x24013ba0

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	24013ba0 	.word	0x24013ba0

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	24004e4c 	.word	0x24004e4c

08001194 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetREVID+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	5c001000 	.word	0x5c001000

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	05fa0000 	.word	0x05fa0000

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff40 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff33 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa4 	bl	8001308 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff feae 	bl	8001134 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e2dc      	b.n	800199e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e2cd      	b.n	800199e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a76      	ldr	r2, [pc, #472]	; (80015e0 <HAL_DMA_Abort+0x214>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d04a      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a74      	ldr	r2, [pc, #464]	; (80015e4 <HAL_DMA_Abort+0x218>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d045      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <HAL_DMA_Abort+0x21c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d040      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a71      	ldr	r2, [pc, #452]	; (80015ec <HAL_DMA_Abort+0x220>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d03b      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a70      	ldr	r2, [pc, #448]	; (80015f0 <HAL_DMA_Abort+0x224>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d036      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a6e      	ldr	r2, [pc, #440]	; (80015f4 <HAL_DMA_Abort+0x228>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d031      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6d      	ldr	r2, [pc, #436]	; (80015f8 <HAL_DMA_Abort+0x22c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d02c      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a6b      	ldr	r2, [pc, #428]	; (80015fc <HAL_DMA_Abort+0x230>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d027      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a6a      	ldr	r2, [pc, #424]	; (8001600 <HAL_DMA_Abort+0x234>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d022      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a68      	ldr	r2, [pc, #416]	; (8001604 <HAL_DMA_Abort+0x238>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01d      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a67      	ldr	r2, [pc, #412]	; (8001608 <HAL_DMA_Abort+0x23c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d018      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a65      	ldr	r2, [pc, #404]	; (800160c <HAL_DMA_Abort+0x240>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a64      	ldr	r2, [pc, #400]	; (8001610 <HAL_DMA_Abort+0x244>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00e      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a62      	ldr	r2, [pc, #392]	; (8001614 <HAL_DMA_Abort+0x248>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d009      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a61      	ldr	r2, [pc, #388]	; (8001618 <HAL_DMA_Abort+0x24c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d004      	beq.n	80014a2 <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a5f      	ldr	r2, [pc, #380]	; (800161c <HAL_DMA_Abort+0x250>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_DMA_Abort+0xda>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_DMA_Abort+0xdc>
 80014a6:	2300      	movs	r3, #0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 021e 	bic.w	r2, r2, #30
 80014ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e00a      	b.n	80014ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 020e 	bic.w	r2, r2, #14
 80014e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a3c      	ldr	r2, [pc, #240]	; (80015e0 <HAL_DMA_Abort+0x214>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d072      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <HAL_DMA_Abort+0x218>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d06d      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a39      	ldr	r2, [pc, #228]	; (80015e8 <HAL_DMA_Abort+0x21c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d068      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a37      	ldr	r2, [pc, #220]	; (80015ec <HAL_DMA_Abort+0x220>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d063      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a36      	ldr	r2, [pc, #216]	; (80015f0 <HAL_DMA_Abort+0x224>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d05e      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a34      	ldr	r2, [pc, #208]	; (80015f4 <HAL_DMA_Abort+0x228>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d059      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <HAL_DMA_Abort+0x22c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d054      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a31      	ldr	r2, [pc, #196]	; (80015fc <HAL_DMA_Abort+0x230>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d04f      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_DMA_Abort+0x234>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d04a      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <HAL_DMA_Abort+0x238>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d045      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2d      	ldr	r2, [pc, #180]	; (8001608 <HAL_DMA_Abort+0x23c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d040      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a2b      	ldr	r2, [pc, #172]	; (800160c <HAL_DMA_Abort+0x240>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d03b      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <HAL_DMA_Abort+0x244>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d036      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_DMA_Abort+0x248>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d031      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <HAL_DMA_Abort+0x24c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d02c      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_DMA_Abort+0x250>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d027      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a24      	ldr	r2, [pc, #144]	; (8001620 <HAL_DMA_Abort+0x254>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a22      	ldr	r2, [pc, #136]	; (8001624 <HAL_DMA_Abort+0x258>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01d      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a21      	ldr	r2, [pc, #132]	; (8001628 <HAL_DMA_Abort+0x25c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d018      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1f      	ldr	r2, [pc, #124]	; (800162c <HAL_DMA_Abort+0x260>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_DMA_Abort+0x264>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00e      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <HAL_DMA_Abort+0x268>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d009      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_DMA_Abort+0x26c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d004      	beq.n	80015da <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_DMA_Abort+0x270>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d132      	bne.n	8001640 <HAL_DMA_Abort+0x274>
 80015da:	2301      	movs	r3, #1
 80015dc:	e031      	b.n	8001642 <HAL_DMA_Abort+0x276>
 80015de:	bf00      	nop
 80015e0:	40020010 	.word	0x40020010
 80015e4:	40020028 	.word	0x40020028
 80015e8:	40020040 	.word	0x40020040
 80015ec:	40020058 	.word	0x40020058
 80015f0:	40020070 	.word	0x40020070
 80015f4:	40020088 	.word	0x40020088
 80015f8:	400200a0 	.word	0x400200a0
 80015fc:	400200b8 	.word	0x400200b8
 8001600:	40020410 	.word	0x40020410
 8001604:	40020428 	.word	0x40020428
 8001608:	40020440 	.word	0x40020440
 800160c:	40020458 	.word	0x40020458
 8001610:	40020470 	.word	0x40020470
 8001614:	40020488 	.word	0x40020488
 8001618:	400204a0 	.word	0x400204a0
 800161c:	400204b8 	.word	0x400204b8
 8001620:	58025408 	.word	0x58025408
 8001624:	5802541c 	.word	0x5802541c
 8001628:	58025430 	.word	0x58025430
 800162c:	58025444 	.word	0x58025444
 8001630:	58025458 	.word	0x58025458
 8001634:	5802546c 	.word	0x5802546c
 8001638:	58025480 	.word	0x58025480
 800163c:	58025494 	.word	0x58025494
 8001640:	2300      	movs	r3, #0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001654:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6d      	ldr	r2, [pc, #436]	; (8001810 <HAL_DMA_Abort+0x444>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d04a      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a6b      	ldr	r2, [pc, #428]	; (8001814 <HAL_DMA_Abort+0x448>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d045      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <HAL_DMA_Abort+0x44c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d040      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a68      	ldr	r2, [pc, #416]	; (800181c <HAL_DMA_Abort+0x450>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d03b      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a67      	ldr	r2, [pc, #412]	; (8001820 <HAL_DMA_Abort+0x454>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d036      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a65      	ldr	r2, [pc, #404]	; (8001824 <HAL_DMA_Abort+0x458>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d031      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a64      	ldr	r2, [pc, #400]	; (8001828 <HAL_DMA_Abort+0x45c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d02c      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a62      	ldr	r2, [pc, #392]	; (800182c <HAL_DMA_Abort+0x460>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d027      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a61      	ldr	r2, [pc, #388]	; (8001830 <HAL_DMA_Abort+0x464>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d022      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5f      	ldr	r2, [pc, #380]	; (8001834 <HAL_DMA_Abort+0x468>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01d      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a5e      	ldr	r2, [pc, #376]	; (8001838 <HAL_DMA_Abort+0x46c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d018      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_DMA_Abort+0x470>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <HAL_DMA_Abort+0x474>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00e      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a59      	ldr	r2, [pc, #356]	; (8001844 <HAL_DMA_Abort+0x478>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d009      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_DMA_Abort+0x47c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d004      	beq.n	80016f6 <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a56      	ldr	r2, [pc, #344]	; (800184c <HAL_DMA_Abort+0x480>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d108      	bne.n	8001708 <HAL_DMA_Abort+0x33c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e007      	b.n	8001718 <HAL_DMA_Abort+0x34c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001718:	e013      	b.n	8001742 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800171a:	f7ff fd0b 	bl	8001134 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b05      	cmp	r3, #5
 8001726:	d90c      	bls.n	8001742 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2220      	movs	r2, #32
 800172c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2203      	movs	r2, #3
 8001732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e12d      	b.n	800199e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1e5      	bne.n	800171a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a2f      	ldr	r2, [pc, #188]	; (8001810 <HAL_DMA_Abort+0x444>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04a      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <HAL_DMA_Abort+0x448>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d045      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2c      	ldr	r2, [pc, #176]	; (8001818 <HAL_DMA_Abort+0x44c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d040      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2a      	ldr	r2, [pc, #168]	; (800181c <HAL_DMA_Abort+0x450>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d03b      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a29      	ldr	r2, [pc, #164]	; (8001820 <HAL_DMA_Abort+0x454>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d036      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <HAL_DMA_Abort+0x458>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d031      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a26      	ldr	r2, [pc, #152]	; (8001828 <HAL_DMA_Abort+0x45c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d02c      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a24      	ldr	r2, [pc, #144]	; (800182c <HAL_DMA_Abort+0x460>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d027      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <HAL_DMA_Abort+0x464>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d022      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <HAL_DMA_Abort+0x468>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01d      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_DMA_Abort+0x46c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d018      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_DMA_Abort+0x470>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_DMA_Abort+0x474>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00e      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_DMA_Abort+0x478>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d009      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1a      	ldr	r2, [pc, #104]	; (8001848 <HAL_DMA_Abort+0x47c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_DMA_Abort+0x480>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA_Abort+0x426>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_DMA_Abort+0x428>
 80017f2:	2300      	movs	r3, #0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d02b      	beq.n	8001850 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	223f      	movs	r2, #63	; 0x3f
 8001808:	409a      	lsls	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	e02a      	b.n	8001866 <HAL_DMA_Abort+0x49a>
 8001810:	40020010 	.word	0x40020010
 8001814:	40020028 	.word	0x40020028
 8001818:	40020040 	.word	0x40020040
 800181c:	40020058 	.word	0x40020058
 8001820:	40020070 	.word	0x40020070
 8001824:	40020088 	.word	0x40020088
 8001828:	400200a0 	.word	0x400200a0
 800182c:	400200b8 	.word	0x400200b8
 8001830:	40020410 	.word	0x40020410
 8001834:	40020428 	.word	0x40020428
 8001838:	40020440 	.word	0x40020440
 800183c:	40020458 	.word	0x40020458
 8001840:	40020470 	.word	0x40020470
 8001844:	40020488 	.word	0x40020488
 8001848:	400204a0 	.word	0x400204a0
 800184c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2201      	movs	r2, #1
 8001860:	409a      	lsls	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a4f      	ldr	r2, [pc, #316]	; (80019a8 <HAL_DMA_Abort+0x5dc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d072      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a4d      	ldr	r2, [pc, #308]	; (80019ac <HAL_DMA_Abort+0x5e0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d06d      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <HAL_DMA_Abort+0x5e4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d068      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a4a      	ldr	r2, [pc, #296]	; (80019b4 <HAL_DMA_Abort+0x5e8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d063      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <HAL_DMA_Abort+0x5ec>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d05e      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_DMA_Abort+0x5f0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d059      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <HAL_DMA_Abort+0x5f4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d054      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a44      	ldr	r2, [pc, #272]	; (80019c4 <HAL_DMA_Abort+0x5f8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d04f      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <HAL_DMA_Abort+0x5fc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04a      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a41      	ldr	r2, [pc, #260]	; (80019cc <HAL_DMA_Abort+0x600>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d045      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a40      	ldr	r2, [pc, #256]	; (80019d0 <HAL_DMA_Abort+0x604>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d040      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a3e      	ldr	r2, [pc, #248]	; (80019d4 <HAL_DMA_Abort+0x608>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d03b      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <HAL_DMA_Abort+0x60c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d036      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <HAL_DMA_Abort+0x610>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <HAL_DMA_Abort+0x614>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d02c      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <HAL_DMA_Abort+0x618>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d027      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_DMA_Abort+0x61c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a35      	ldr	r2, [pc, #212]	; (80019ec <HAL_DMA_Abort+0x620>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01d      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_DMA_Abort+0x624>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d018      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <HAL_DMA_Abort+0x628>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a31      	ldr	r2, [pc, #196]	; (80019f8 <HAL_DMA_Abort+0x62c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00e      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <HAL_DMA_Abort+0x630>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d009      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <HAL_DMA_Abort+0x634>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2c      	ldr	r2, [pc, #176]	; (8001a04 <HAL_DMA_Abort+0x638>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_DMA_Abort+0x58e>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_DMA_Abort+0x590>
 800195a:	2300      	movs	r3, #0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d015      	beq.n	800198c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001968:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800197c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001980:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800198a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40020010 	.word	0x40020010
 80019ac:	40020028 	.word	0x40020028
 80019b0:	40020040 	.word	0x40020040
 80019b4:	40020058 	.word	0x40020058
 80019b8:	40020070 	.word	0x40020070
 80019bc:	40020088 	.word	0x40020088
 80019c0:	400200a0 	.word	0x400200a0
 80019c4:	400200b8 	.word	0x400200b8
 80019c8:	40020410 	.word	0x40020410
 80019cc:	40020428 	.word	0x40020428
 80019d0:	40020440 	.word	0x40020440
 80019d4:	40020458 	.word	0x40020458
 80019d8:	40020470 	.word	0x40020470
 80019dc:	40020488 	.word	0x40020488
 80019e0:	400204a0 	.word	0x400204a0
 80019e4:	400204b8 	.word	0x400204b8
 80019e8:	58025408 	.word	0x58025408
 80019ec:	5802541c 	.word	0x5802541c
 80019f0:	58025430 	.word	0x58025430
 80019f4:	58025444 	.word	0x58025444
 80019f8:	58025458 	.word	0x58025458
 80019fc:	5802546c 	.word	0x5802546c
 8001a00:	58025480 	.word	0x58025480
 8001a04:	58025494 	.word	0x58025494

08001a08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e205      	b.n	8001e26 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d004      	beq.n	8001a30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e1fa      	b.n	8001e26 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a8c      	ldr	r2, [pc, #560]	; (8001c68 <HAL_DMA_Abort_IT+0x260>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d04a      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a8b      	ldr	r2, [pc, #556]	; (8001c6c <HAL_DMA_Abort_IT+0x264>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d045      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a89      	ldr	r2, [pc, #548]	; (8001c70 <HAL_DMA_Abort_IT+0x268>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d040      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a88      	ldr	r2, [pc, #544]	; (8001c74 <HAL_DMA_Abort_IT+0x26c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d03b      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a86      	ldr	r2, [pc, #536]	; (8001c78 <HAL_DMA_Abort_IT+0x270>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d036      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a85      	ldr	r2, [pc, #532]	; (8001c7c <HAL_DMA_Abort_IT+0x274>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d031      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a83      	ldr	r2, [pc, #524]	; (8001c80 <HAL_DMA_Abort_IT+0x278>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d02c      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a82      	ldr	r2, [pc, #520]	; (8001c84 <HAL_DMA_Abort_IT+0x27c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d027      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <HAL_DMA_Abort_IT+0x280>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d022      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7f      	ldr	r2, [pc, #508]	; (8001c8c <HAL_DMA_Abort_IT+0x284>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d01d      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a7d      	ldr	r2, [pc, #500]	; (8001c90 <HAL_DMA_Abort_IT+0x288>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d018      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7c      	ldr	r2, [pc, #496]	; (8001c94 <HAL_DMA_Abort_IT+0x28c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d013      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a7a      	ldr	r2, [pc, #488]	; (8001c98 <HAL_DMA_Abort_IT+0x290>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00e      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a79      	ldr	r2, [pc, #484]	; (8001c9c <HAL_DMA_Abort_IT+0x294>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d009      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <HAL_DMA_Abort_IT+0x298>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d004      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a76      	ldr	r2, [pc, #472]	; (8001ca4 <HAL_DMA_Abort_IT+0x29c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Abort_IT+0xcc>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xce>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d065      	beq.n	8001ba6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2204      	movs	r2, #4
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a60      	ldr	r2, [pc, #384]	; (8001c68 <HAL_DMA_Abort_IT+0x260>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d04a      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a5e      	ldr	r2, [pc, #376]	; (8001c6c <HAL_DMA_Abort_IT+0x264>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d045      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <HAL_DMA_Abort_IT+0x268>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d040      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a5b      	ldr	r2, [pc, #364]	; (8001c74 <HAL_DMA_Abort_IT+0x26c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d03b      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a5a      	ldr	r2, [pc, #360]	; (8001c78 <HAL_DMA_Abort_IT+0x270>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d036      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_DMA_Abort_IT+0x274>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <HAL_DMA_Abort_IT+0x278>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d02c      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a55      	ldr	r2, [pc, #340]	; (8001c84 <HAL_DMA_Abort_IT+0x27c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d027      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a54      	ldr	r2, [pc, #336]	; (8001c88 <HAL_DMA_Abort_IT+0x280>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d022      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_DMA_Abort_IT+0x284>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01d      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <HAL_DMA_Abort_IT+0x288>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d018      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a4f      	ldr	r2, [pc, #316]	; (8001c94 <HAL_DMA_Abort_IT+0x28c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4e      	ldr	r2, [pc, #312]	; (8001c98 <HAL_DMA_Abort_IT+0x290>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00e      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <HAL_DMA_Abort_IT+0x294>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d009      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a4b      	ldr	r2, [pc, #300]	; (8001ca0 <HAL_DMA_Abort_IT+0x298>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d004      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x17a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_DMA_Abort_IT+0x29c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d108      	bne.n	8001b94 <HAL_DMA_Abort_IT+0x18c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e147      	b.n	8001e24 <HAL_DMA_Abort_IT+0x41c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e13e      	b.n	8001e24 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 020e 	bic.w	r2, r2, #14
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_DMA_Abort_IT+0x260>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d04a      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <HAL_DMA_Abort_IT+0x264>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d045      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <HAL_DMA_Abort_IT+0x268>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d040      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <HAL_DMA_Abort_IT+0x26c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d03b      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <HAL_DMA_Abort_IT+0x270>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d036      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_DMA_Abort_IT+0x274>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_DMA_Abort_IT+0x278>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d02c      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <HAL_DMA_Abort_IT+0x27c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d027      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_DMA_Abort_IT+0x280>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_DMA_Abort_IT+0x284>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01d      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_DMA_Abort_IT+0x288>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d018      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_DMA_Abort_IT+0x28c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_DMA_Abort_IT+0x290>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00e      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_DMA_Abort_IT+0x294>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_DMA_Abort_IT+0x298>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d004      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x24e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_DMA_Abort_IT+0x29c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d128      	bne.n	8001ca8 <HAL_DMA_Abort_IT+0x2a0>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e027      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x2b0>
 8001c68:	40020010 	.word	0x40020010
 8001c6c:	40020028 	.word	0x40020028
 8001c70:	40020040 	.word	0x40020040
 8001c74:	40020058 	.word	0x40020058
 8001c78:	40020070 	.word	0x40020070
 8001c7c:	40020088 	.word	0x40020088
 8001c80:	400200a0 	.word	0x400200a0
 8001c84:	400200b8 	.word	0x400200b8
 8001c88:	40020410 	.word	0x40020410
 8001c8c:	40020428 	.word	0x40020428
 8001c90:	40020440 	.word	0x40020440
 8001c94:	40020458 	.word	0x40020458
 8001c98:	40020470 	.word	0x40020470
 8001c9c:	40020488 	.word	0x40020488
 8001ca0:	400204a0 	.word	0x400204a0
 8001ca4:	400204b8 	.word	0x400204b8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5c      	ldr	r2, [pc, #368]	; (8001e30 <HAL_DMA_Abort_IT+0x428>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d072      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	; (8001e34 <HAL_DMA_Abort_IT+0x42c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d06d      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a59      	ldr	r2, [pc, #356]	; (8001e38 <HAL_DMA_Abort_IT+0x430>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d068      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <HAL_DMA_Abort_IT+0x434>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d063      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <HAL_DMA_Abort_IT+0x438>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d05e      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a55      	ldr	r2, [pc, #340]	; (8001e44 <HAL_DMA_Abort_IT+0x43c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d059      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a53      	ldr	r2, [pc, #332]	; (8001e48 <HAL_DMA_Abort_IT+0x440>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d054      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_DMA_Abort_IT+0x444>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d04f      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_DMA_Abort_IT+0x448>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d04a      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_DMA_Abort_IT+0x44c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d045      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4d      	ldr	r2, [pc, #308]	; (8001e58 <HAL_DMA_Abort_IT+0x450>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d040      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a4c      	ldr	r2, [pc, #304]	; (8001e5c <HAL_DMA_Abort_IT+0x454>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d03b      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <HAL_DMA_Abort_IT+0x458>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d036      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a49      	ldr	r2, [pc, #292]	; (8001e64 <HAL_DMA_Abort_IT+0x45c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d031      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a47      	ldr	r2, [pc, #284]	; (8001e68 <HAL_DMA_Abort_IT+0x460>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d02c      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <HAL_DMA_Abort_IT+0x464>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d027      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a44      	ldr	r2, [pc, #272]	; (8001e70 <HAL_DMA_Abort_IT+0x468>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d022      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a43      	ldr	r2, [pc, #268]	; (8001e74 <HAL_DMA_Abort_IT+0x46c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d01d      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a41      	ldr	r2, [pc, #260]	; (8001e78 <HAL_DMA_Abort_IT+0x470>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d018      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a40      	ldr	r2, [pc, #256]	; (8001e7c <HAL_DMA_Abort_IT+0x474>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3e      	ldr	r2, [pc, #248]	; (8001e80 <HAL_DMA_Abort_IT+0x478>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00e      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	; (8001e84 <HAL_DMA_Abort_IT+0x47c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d009      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_DMA_Abort_IT+0x480>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d004      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x3a0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <HAL_DMA_Abort_IT+0x484>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_DMA_Abort_IT+0x3a4>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_DMA_Abort_IT+0x3a6>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d028      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001de0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40020010 	.word	0x40020010
 8001e34:	40020028 	.word	0x40020028
 8001e38:	40020040 	.word	0x40020040
 8001e3c:	40020058 	.word	0x40020058
 8001e40:	40020070 	.word	0x40020070
 8001e44:	40020088 	.word	0x40020088
 8001e48:	400200a0 	.word	0x400200a0
 8001e4c:	400200b8 	.word	0x400200b8
 8001e50:	40020410 	.word	0x40020410
 8001e54:	40020428 	.word	0x40020428
 8001e58:	40020440 	.word	0x40020440
 8001e5c:	40020458 	.word	0x40020458
 8001e60:	40020470 	.word	0x40020470
 8001e64:	40020488 	.word	0x40020488
 8001e68:	400204a0 	.word	0x400204a0
 8001e6c:	400204b8 	.word	0x400204b8
 8001e70:	58025408 	.word	0x58025408
 8001e74:	5802541c 	.word	0x5802541c
 8001e78:	58025430 	.word	0x58025430
 8001e7c:	58025444 	.word	0x58025444
 8001e80:	58025458 	.word	0x58025458
 8001e84:	5802546c 	.word	0x5802546c
 8001e88:	58025480 	.word	0x58025480
 8001e8c:	58025494 	.word	0x58025494

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_GPIO_Init+0x234>)
 8001ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ea2:	e194      	b.n	80021ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8186 	beq.w	80021c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d005      	beq.n	8001ed4 <HAL_GPIO_Init+0x44>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d130      	bne.n	8001f36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 0201 	and.w	r2, r3, #1
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d017      	beq.n	8001f72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	69b9      	ldr	r1, [r7, #24]
 8001fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0203 	and.w	r2, r3, #3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80e0 	beq.w	80021c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_GPIO_Init+0x238>)
 800200a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800200e:	4a2e      	ldr	r2, [pc, #184]	; (80020c8 <HAL_GPIO_Init+0x238>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_GPIO_Init+0x238>)
 800201a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_GPIO_Init+0x23c>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_GPIO_Init+0x240>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d052      	beq.n	80020f8 <HAL_GPIO_Init+0x268>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_GPIO_Init+0x244>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d031      	beq.n	80020be <HAL_GPIO_Init+0x22e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_GPIO_Init+0x248>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x22a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_GPIO_Init+0x24c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x226>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_GPIO_Init+0x250>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x222>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_GPIO_Init+0x254>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x21e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <HAL_GPIO_Init+0x258>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x21a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_GPIO_Init+0x25c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x216>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_GPIO_Init+0x260>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x212>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_GPIO_Init+0x264>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x20e>
 800209a:	2309      	movs	r3, #9
 800209c:	e02d      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 800209e:	230a      	movs	r3, #10
 80020a0:	e02b      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020a2:	2308      	movs	r3, #8
 80020a4:	e029      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e027      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e025      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e023      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e021      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e01f      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e01d      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020be:	2301      	movs	r3, #1
 80020c0:	e01b      	b.n	80020fa <HAL_GPIO_Init+0x26a>
 80020c2:	bf00      	nop
 80020c4:	58000080 	.word	0x58000080
 80020c8:	58024400 	.word	0x58024400
 80020cc:	58000400 	.word	0x58000400
 80020d0:	58020000 	.word	0x58020000
 80020d4:	58020400 	.word	0x58020400
 80020d8:	58020800 	.word	0x58020800
 80020dc:	58020c00 	.word	0x58020c00
 80020e0:	58021000 	.word	0x58021000
 80020e4:	58021400 	.word	0x58021400
 80020e8:	58021800 	.word	0x58021800
 80020ec:	58021c00 	.word	0x58021c00
 80020f0:	58022000 	.word	0x58022000
 80020f4:	58022400 	.word	0x58022400
 80020f8:	2300      	movs	r3, #0
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	f002 0203 	and.w	r2, r2, #3
 8002100:	0092      	lsls	r2, r2, #2
 8002102:	4093      	lsls	r3, r2
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800210a:	4938      	ldr	r1, [pc, #224]	; (80021ec <HAL_GPIO_Init+0x35c>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800213e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800216c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	3301      	adds	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f47f ae63 	bne.w	8001ea4 <HAL_GPIO_Init+0x14>
  }
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	3724      	adds	r7, #36	; 0x24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	58000400 	.word	0x58000400

080021f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_PWREx_ConfigSupply+0x70>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b04      	cmp	r3, #4
 8002202:	d00a      	beq.n	800221a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_PWREx_ConfigSupply+0x70>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e01f      	b.n	8002256 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e01d      	b.n	8002256 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_PWREx_ConfigSupply+0x70>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	490f      	ldr	r1, [pc, #60]	; (8002260 <HAL_PWREx_ConfigSupply+0x70>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4313      	orrs	r3, r2
 8002228:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800222a:	f7fe ff83 	bl	8001134 <HAL_GetTick>
 800222e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002230:	e009      	b.n	8002246 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002232:	f7fe ff7f 	bl	8001134 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002240:	d901      	bls.n	8002246 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e007      	b.n	8002256 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_PWREx_ConfigSupply+0x70>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002252:	d1ee      	bne.n	8002232 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	58024800 	.word	0x58024800

08002264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f000 bc1c 	b.w	8002ab0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8087 	beq.w	8002394 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4b9e      	ldr	r3, [pc, #632]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002290:	4b9b      	ldr	r3, [pc, #620]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	2b10      	cmp	r3, #16
 800229a:	d007      	beq.n	80022ac <HAL_RCC_OscConfig+0x48>
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	2b18      	cmp	r3, #24
 80022a0:	d110      	bne.n	80022c4 <HAL_RCC_OscConfig+0x60>
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d06c      	beq.n	8002392 <HAL_RCC_OscConfig+0x12e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d168      	bne.n	8002392 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e3f5      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x78>
 80022ce:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a8b      	ldr	r2, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e02e      	b.n	800233a <HAL_RCC_OscConfig+0xd6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10c      	bne.n	80022fe <HAL_RCC_OscConfig+0x9a>
 80022e4:	4b86      	ldr	r3, [pc, #536]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a85      	ldr	r2, [pc, #532]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b83      	ldr	r3, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a82      	ldr	r2, [pc, #520]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e01d      	b.n	800233a <HAL_RCC_OscConfig+0xd6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0xbe>
 8002308:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a7c      	ldr	r2, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 800230e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b7a      	ldr	r3, [pc, #488]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a79      	ldr	r2, [pc, #484]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0xd6>
 8002322:	4b77      	ldr	r3, [pc, #476]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a76      	ldr	r2, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b74      	ldr	r3, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a73      	ldr	r2, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d013      	beq.n	800236a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fef7 	bl	8001134 <HAL_GetTick>
 8002346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234a:	f7fe fef3 	bl	8001134 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e3a9      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235c:	4b68      	ldr	r3, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0xe6>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fee3 	bl	8001134 <HAL_GetTick>
 800236e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002372:	f7fe fedf 	bl	8001134 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e395      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002384:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x10e>
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002392:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80ca 	beq.w	8002536 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a2:	4b57      	ldr	r3, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023ac:	4b54      	ldr	r3, [pc, #336]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_RCC_OscConfig+0x164>
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b18      	cmp	r3, #24
 80023bc:	d156      	bne.n	800246c <HAL_RCC_OscConfig+0x208>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d151      	bne.n	800246c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c8:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_OscConfig+0x17c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e367      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023e0:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 0219 	bic.w	r2, r3, #25
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4944      	ldr	r1, [pc, #272]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f2:	f7fe fe9f 	bl	8001134 <HAL_GetTick>
 80023f6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fe9b 	bl	8001134 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e351      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	f7fe febc 	bl	8001194 <HAL_GetREVID>
 800241c:	4603      	mov	r3, r0
 800241e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002422:	4293      	cmp	r3, r2
 8002424:	d817      	bhi.n	8002456 <HAL_RCC_OscConfig+0x1f2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d108      	bne.n	8002440 <HAL_RCC_OscConfig+0x1dc>
 800242e:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002436:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243e:	e07a      	b.n	8002536 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	031b      	lsls	r3, r3, #12
 800244e:	492c      	ldr	r1, [pc, #176]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	e06f      	b.n	8002536 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	061b      	lsls	r3, r3, #24
 8002464:	4926      	ldr	r1, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246a:	e064      	b.n	8002536 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d047      	beq.n	8002504 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 0219 	bic.w	r2, r3, #25
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	491f      	ldr	r1, [pc, #124]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fe55 	bl	8001134 <HAL_GetTick>
 800248a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe fe51 	bl	8001134 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e307      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	f7fe fe72 	bl	8001194 <HAL_GetREVID>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d817      	bhi.n	80024ea <HAL_RCC_OscConfig+0x286>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b40      	cmp	r3, #64	; 0x40
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x270>
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024ca:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	6053      	str	r3, [r2, #4]
 80024d2:	e030      	b.n	8002536 <HAL_RCC_OscConfig+0x2d2>
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	031b      	lsls	r3, r3, #12
 80024e2:	4907      	ldr	r1, [pc, #28]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	e025      	b.n	8002536 <HAL_RCC_OscConfig+0x2d2>
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	061b      	lsls	r3, r3, #24
 80024f8:	4901      	ldr	r1, [pc, #4]	; (8002500 <HAL_RCC_OscConfig+0x29c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
 80024fe:	e01a      	b.n	8002536 <HAL_RCC_OscConfig+0x2d2>
 8002500:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002504:	4b9e      	ldr	r3, [pc, #632]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a9d      	ldr	r2, [pc, #628]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fe10 	bl	8001134 <HAL_GetTick>
 8002514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe fe0c 	bl	8001134 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e2c2      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800252a:	4b95      	ldr	r3, [pc, #596]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80a9 	beq.w	8002696 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800254c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254e:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b08      	cmp	r3, #8
 8002558:	d007      	beq.n	800256a <HAL_RCC_OscConfig+0x306>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b18      	cmp	r3, #24
 800255e:	d13a      	bne.n	80025d6 <HAL_RCC_OscConfig+0x372>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d135      	bne.n	80025d6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x31e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e296      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002582:	f7fe fe07 	bl	8001194 <HAL_GetREVID>
 8002586:	4603      	mov	r3, r0
 8002588:	f241 0203 	movw	r2, #4099	; 0x1003
 800258c:	4293      	cmp	r3, r2
 800258e:	d817      	bhi.n	80025c0 <HAL_RCC_OscConfig+0x35c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2b20      	cmp	r3, #32
 8002596:	d108      	bne.n	80025aa <HAL_RCC_OscConfig+0x346>
 8002598:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025a0:	4a77      	ldr	r2, [pc, #476]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80025a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a8:	e075      	b.n	8002696 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025aa:	4b75      	ldr	r3, [pc, #468]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	069b      	lsls	r3, r3, #26
 80025b8:	4971      	ldr	r1, [pc, #452]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025be:	e06a      	b.n	8002696 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025c0:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	496c      	ldr	r1, [pc, #432]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025d4:	e05f      	b.n	8002696 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d042      	beq.n	8002664 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025de:	4b68      	ldr	r3, [pc, #416]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a67      	ldr	r2, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fda3 	bl	8001134 <HAL_GetTick>
 80025ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025f2:	f7fe fd9f 	bl	8001134 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e255      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002610:	f7fe fdc0 	bl	8001194 <HAL_GetREVID>
 8002614:	4603      	mov	r3, r0
 8002616:	f241 0203 	movw	r2, #4099	; 0x1003
 800261a:	4293      	cmp	r3, r2
 800261c:	d817      	bhi.n	800264e <HAL_RCC_OscConfig+0x3ea>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2b20      	cmp	r3, #32
 8002624:	d108      	bne.n	8002638 <HAL_RCC_OscConfig+0x3d4>
 8002626:	4b56      	ldr	r3, [pc, #344]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800262e:	4a54      	ldr	r2, [pc, #336]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002634:	6053      	str	r3, [r2, #4]
 8002636:	e02e      	b.n	8002696 <HAL_RCC_OscConfig+0x432>
 8002638:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	494e      	ldr	r1, [pc, #312]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	e023      	b.n	8002696 <HAL_RCC_OscConfig+0x432>
 800264e:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4948      	ldr	r1, [pc, #288]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
 8002662:	e018      	b.n	8002696 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002664:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800266a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fd60 	bl	8001134 <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002678:	f7fe fd5c 	bl	8001134 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e212      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d036      	beq.n	8002710 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d019      	beq.n	80026de <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	4a34      	ldr	r2, [pc, #208]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe fd3d 	bl	8001134 <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe fd39 	bl	8001134 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e1ef      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x45a>
 80026dc:	e018      	b.n	8002710 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	4a27      	ldr	r2, [pc, #156]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fd23 	bl	8001134 <HAL_GetTick>
 80026ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fd1f 	bl	8001134 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1d5      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d039      	beq.n	8002790 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800272a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800272e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002730:	f7fe fd00 	bl	8001134 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002738:	f7fe fcfc 	bl	8001134 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1b2      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x4d4>
 8002756:	e01b      	b.n	8002790 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_RCC_OscConfig+0x51c>)
 800275e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002762:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002764:	f7fe fce6 	bl	8001134 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800276c:	f7fe fce2 	bl	8001134 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d904      	bls.n	8002784 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e198      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
 800277e:	bf00      	nop
 8002780:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002784:	4ba3      	ldr	r3, [pc, #652]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ed      	bne.n	800276c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8081 	beq.w	80028a0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800279e:	4b9e      	ldr	r3, [pc, #632]	; (8002a18 <HAL_RCC_OscConfig+0x7b4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a9d      	ldr	r2, [pc, #628]	; (8002a18 <HAL_RCC_OscConfig+0x7b4>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027aa:	f7fe fcc3 	bl	8001134 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fe fcbf 	bl	8001134 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e175      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c4:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <HAL_RCC_OscConfig+0x7b4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x582>
 80027d8:	4b8e      	ldr	r3, [pc, #568]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a8d      	ldr	r2, [pc, #564]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_OscConfig+0x5de>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x5a4>
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a88      	ldr	r2, [pc, #544]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b86      	ldr	r3, [pc, #536]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a85      	ldr	r2, [pc, #532]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x5de>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x5c6>
 8002810:	4b80      	ldr	r3, [pc, #512]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a7f      	ldr	r2, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	4b7d      	ldr	r3, [pc, #500]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a7c      	ldr	r2, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x5de>
 800282a:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a79      	ldr	r2, [pc, #484]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b77      	ldr	r3, [pc, #476]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a76      	ldr	r2, [pc, #472]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fe fc73 	bl	8001134 <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fc6f 	bl	8001134 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e123      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002868:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x5ee>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7fe fc5d 	bl	8001134 <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fc59 	bl	8001134 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e10d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002894:	4b5f      	ldr	r3, [pc, #380]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8102 	beq.w	8002aae <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028aa:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	f000 80bd 	beq.w	8002a32 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2b02      	cmp	r3, #2
 80028be:	f040 8095 	bne.w	80029ec <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a53      	ldr	r2, [pc, #332]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80028c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fc31 	bl	8001134 <HAL_GetTick>
 80028d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fc2d 	bl	8001134 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0e3      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e8:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f4:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80028f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f8:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <HAL_RCC_OscConfig+0x7b8>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	430a      	orrs	r2, r1
 8002908:	4942      	ldr	r1, [pc, #264]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	628b      	str	r3, [r1, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	3b01      	subs	r3, #1
 8002914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	3b01      	subs	r3, #1
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	b29b      	uxth	r3, r3
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	3b01      	subs	r3, #1
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800293e:	4935      	ldr	r1, [pc, #212]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002950:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_RCC_OscConfig+0x7bc>)
 8002956:	4013      	ands	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800295c:	00d2      	lsls	r2, r2, #3
 800295e:	492d      	ldr	r1, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f023 020c 	bic.w	r2, r3, #12
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	4928      	ldr	r1, [pc, #160]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002976:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f023 0202 	bic.w	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4924      	ldr	r1, [pc, #144]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002994:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fbb6 	bl	8001134 <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fbb2 	bl	8001134 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e068      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x768>
 80029ea:	e060      	b.n	8002aae <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fb9c 	bl	8001134 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fe:	e011      	b.n	8002a24 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fb98 	bl	8001134 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d90a      	bls.n	8002a24 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
 8002a12:	bf00      	nop
 8002a14:	58024400 	.word	0x58024400
 8002a18:	58024800 	.word	0x58024800
 8002a1c:	fffffc0c 	.word	0xfffffc0c
 8002a20:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a24:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x854>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e7      	bne.n	8002a00 <HAL_RCC_OscConfig+0x79c>
 8002a30:	e03d      	b.n	8002aae <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCC_OscConfig+0x854>)
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_OscConfig+0x854>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d031      	beq.n	8002aaa <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d12a      	bne.n	8002aaa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d122      	bne.n	8002aaa <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d11a      	bne.n	8002aaa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0a5b      	lsrs	r3, r3, #9
 8002a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d111      	bne.n	8002aaa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d108      	bne.n	8002aaa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	0e1b      	lsrs	r3, r3, #24
 8002a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	58024400 	.word	0x58024400

08002abc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e19c      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b8a      	ldr	r3, [pc, #552]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b87      	ldr	r3, [pc, #540]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	4985      	ldr	r1, [pc, #532]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e184      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d908      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b1c:	4b78      	ldr	r3, [pc, #480]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4975      	ldr	r1, [pc, #468]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d010      	beq.n	8002b5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d908      	bls.n	8002b5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b4a:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	496a      	ldr	r1, [pc, #424]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d908      	bls.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	495e      	ldr	r1, [pc, #376]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d908      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4953      	ldr	r1, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d010      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d908      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f023 020f 	bic.w	r2, r3, #15
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4947      	ldr	r1, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d055      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bf2:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4940      	ldr	r1, [pc, #256]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c0c:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d121      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0f6      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c24:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d115      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0ea      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0de      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d6      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f023 0207 	bic.w	r2, r3, #7
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4925      	ldr	r1, [pc, #148]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fa61 	bl	8001134 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c76:	f7fe fa5d 	bl	8001134 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0be      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d1eb      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d208      	bcs.n	8002ccc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f023 020f 	bic.w	r2, r3, #15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d214      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4906      	ldr	r1, [pc, #24]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e086      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
 8002cfc:	52002000 	.word	0x52002000
 8002d00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d208      	bcs.n	8002d32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d20:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4939      	ldr	r1, [pc, #228]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d208      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	492e      	ldr	r1, [pc, #184]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d208      	bcs.n	8002d8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	4922      	ldr	r1, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d208      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	4917      	ldr	r1, [pc, #92]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dbc:	f000 f834 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	4912      	ldr	r1, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x35c>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <HAL_RCC_ClockConfig+0x35c>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x360>)
 8002df2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x364>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x368>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f94e 	bl	80010a0 <HAL_InitTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400
 8002e18:	08007800 	.word	0x08007800
 8002e1c:	24004e44 	.word	0x24004e44
 8002e20:	24004e40 	.word	0x24004e40
 8002e24:	24004e48 	.word	0x24004e48

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2e:	4bb3      	ldr	r3, [pc, #716]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e36:	2b18      	cmp	r3, #24
 8002e38:	f200 8155 	bhi.w	80030e6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002ea9 	.word	0x08002ea9
 8002e48:	080030e7 	.word	0x080030e7
 8002e4c:	080030e7 	.word	0x080030e7
 8002e50:	080030e7 	.word	0x080030e7
 8002e54:	080030e7 	.word	0x080030e7
 8002e58:	080030e7 	.word	0x080030e7
 8002e5c:	080030e7 	.word	0x080030e7
 8002e60:	080030e7 	.word	0x080030e7
 8002e64:	08002ecf 	.word	0x08002ecf
 8002e68:	080030e7 	.word	0x080030e7
 8002e6c:	080030e7 	.word	0x080030e7
 8002e70:	080030e7 	.word	0x080030e7
 8002e74:	080030e7 	.word	0x080030e7
 8002e78:	080030e7 	.word	0x080030e7
 8002e7c:	080030e7 	.word	0x080030e7
 8002e80:	080030e7 	.word	0x080030e7
 8002e84:	08002ed5 	.word	0x08002ed5
 8002e88:	080030e7 	.word	0x080030e7
 8002e8c:	080030e7 	.word	0x080030e7
 8002e90:	080030e7 	.word	0x080030e7
 8002e94:	080030e7 	.word	0x080030e7
 8002e98:	080030e7 	.word	0x080030e7
 8002e9c:	080030e7 	.word	0x080030e7
 8002ea0:	080030e7 	.word	0x080030e7
 8002ea4:	08002edb 	.word	0x08002edb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea8:	4b94      	ldr	r3, [pc, #592]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002eb4:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	4a90      	ldr	r2, [pc, #576]	; (8003100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ec6:	e111      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ec8:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eca:	61bb      	str	r3, [r7, #24]
    break;
 8002ecc:	e10e      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ece:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ed0:	61bb      	str	r3, [r7, #24]
    break;
 8002ed2:	e10b      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ed4:	4b8c      	ldr	r3, [pc, #560]	; (8003108 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ed6:	61bb      	str	r3, [r7, #24]
    break;
 8002ed8:	e108      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ee4:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ef0:	4b82      	ldr	r3, [pc, #520]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002efa:	4b80      	ldr	r3, [pc, #512]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80e1 	beq.w	80030e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	f000 8083 	beq.w	800302c <HAL_RCC_GetSysClockFreq+0x204>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	f200 80a1 	bhi.w	8003070 <HAL_RCC_GetSysClockFreq+0x248>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x114>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d056      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f3a:	e099      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f3c:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02d      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f48:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	4a6b      	ldr	r2, [pc, #428]	; (8003100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f86:	eddf 5a61 	vldr	s11, [pc, #388]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002fa2:	e087      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003110 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb6:	4b51      	ldr	r3, [pc, #324]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fe6:	e065      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003114 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ffa:	4b40      	ldr	r3, [pc, #256]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800300a:	ed97 6a02 	vldr	s12, [r7, #8]
 800300e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800301a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800301e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800302a:	e043      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003118 <HAL_RCC_GetSysClockFreq+0x2f0>
 800303a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303e:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003052:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800305a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800305e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800306e:	e021      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003114 <HAL_RCC_GetSysClockFreq+0x2ec>
 800307e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003092:	ed97 6a02 	vldr	s12, [r7, #8]
 8003096:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 800309a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	0a5b      	lsrs	r3, r3, #9
 80030ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030be:	3301      	adds	r3, #1
 80030c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80030d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d8:	ee17 3a90 	vmov	r3, s15
 80030dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030de:	e005      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    break;
 80030e4:	e002      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030e8:	61bb      	str	r3, [r7, #24]
    break;
 80030ea:	bf00      	nop
  }

  return sysclockfreq;
 80030ec:	69bb      	ldr	r3, [r7, #24]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	58024400 	.word	0x58024400
 8003100:	03d09000 	.word	0x03d09000
 8003104:	003d0900 	.word	0x003d0900
 8003108:	017d7840 	.word	0x017d7840
 800310c:	46000000 	.word	0x46000000
 8003110:	4c742400 	.word	0x4c742400
 8003114:	4a742400 	.word	0x4a742400
 8003118:	4bbebc20 	.word	0x4bbebc20

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003122:	f7ff fe81 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8003126:	4602      	mov	r2, r0
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCC_GetHCLKFreq+0x50>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	490f      	ldr	r1, [pc, #60]	; (8003170 <HAL_RCC_GetHCLKFreq+0x54>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_GetHCLKFreq+0x50>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_RCC_GetHCLKFreq+0x54>)
 800314a:	5cd3      	ldrb	r3, [r2, r3]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_RCC_GetHCLKFreq+0x58>)
 8003158:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800315a:	4a07      	ldr	r2, [pc, #28]	; (8003178 <HAL_RCC_GetHCLKFreq+0x5c>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_GetHCLKFreq+0x58>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	58024400 	.word	0x58024400
 8003170:	08007800 	.word	0x08007800
 8003174:	24004e44 	.word	0x24004e44
 8003178:	24004e40 	.word	0x24004e40

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003180:	f7ff ffcc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4904      	ldr	r1, [pc, #16]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	58024400 	.word	0x58024400
 80031a4:	08007800 	.word	0x08007800

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031ac:	f7ff ffb6 	bl	800311c <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4904      	ldr	r1, [pc, #16]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	58024400 	.word	0x58024400
 80031d0:	08007800 	.word	0x08007800

080031d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031dc:	2300      	movs	r3, #0
 80031de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e0:	2300      	movs	r3, #0
 80031e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d03f      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031f8:	d02a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031fe:	d824      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003204:	d018      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800320a:	d81e      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003214:	d007      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003216:	e018      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003218:	4bab      	ldr	r3, [pc, #684]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	4aaa      	ldr	r2, [pc, #680]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800321e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3304      	adds	r3, #4
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f001 f9cf 	bl	80045d0 <RCCEx_PLL2_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003236:	e00c      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3324      	adds	r3, #36	; 0x24
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fa78 	bl	8004734 <RCCEx_PLL3_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	75fb      	strb	r3, [r7, #23]
      break;
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003258:	4b9b      	ldr	r3, [pc, #620]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003264:	4998      	ldr	r1, [pc, #608]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	650b      	str	r3, [r1, #80]	; 0x50
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03d      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	2b04      	cmp	r3, #4
 8003282:	d826      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032a1 	.word	0x080032a1
 8003290:	080032af 	.word	0x080032af
 8003294:	080032c1 	.word	0x080032c1
 8003298:	080032d9 	.word	0x080032d9
 800329c:	080032d9 	.word	0x080032d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a0:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4a88      	ldr	r2, [pc, #544]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ac:	e015      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 f98b 	bl	80045d0 <RCCEx_PLL2_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032be:	e00c      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3324      	adds	r3, #36	; 0x24
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fa34 	bl	8004734 <RCCEx_PLL3_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
      break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e0:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	f023 0207 	bic.w	r2, r3, #7
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	4976      	ldr	r1, [pc, #472]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	650b      	str	r3, [r1, #80]	; 0x50
 80032f2:	e001      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	2b00      	cmp	r3, #0
 8003302:	d042      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330c:	d02b      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800330e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003312:	d825      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003314:	2bc0      	cmp	r3, #192	; 0xc0
 8003316:	d028      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003318:	2bc0      	cmp	r3, #192	; 0xc0
 800331a:	d821      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800331c:	2b80      	cmp	r3, #128	; 0x80
 800331e:	d016      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d81d      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d007      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800332c:	e018      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	4a65      	ldr	r2, [pc, #404]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800333a:	e017      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f001 f944 	bl	80045d0 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800334c:	e00e      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3324      	adds	r3, #36	; 0x24
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f001 f9ed 	bl	8004734 <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800335e:	e005      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
      break;
 8003364:	e002      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800336a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003376:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	4952      	ldr	r1, [pc, #328]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003380:	4313      	orrs	r3, r2
 8003382:	650b      	str	r3, [r1, #80]	; 0x50
 8003384:	e001      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003392:	2b00      	cmp	r3, #0
 8003394:	d049      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800339c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033a0:	d030      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80033a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033a6:	d82a      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033ac:	d02c      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80033ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033b2:	d824      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b8:	d018      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033be:	d81e      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c8:	d007      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033ca:	e018      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033cc:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033d8:	e017      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3304      	adds	r3, #4
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 f8f5 	bl	80045d0 <RCCEx_PLL2_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033ea:	e00e      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3324      	adds	r3, #36	; 0x24
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 f99e 	bl	8004734 <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033fc:	e005      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
      break;
 8003402:	e002      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003404:	bf00      	nop
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800341e:	492a      	ldr	r1, [pc, #168]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	658b      	str	r3, [r1, #88]	; 0x58
 8003424:	e001      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	2b00      	cmp	r3, #0
 8003434:	d04c      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800343c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003440:	d030      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003446:	d82a      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003448:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800344c:	d02c      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800344e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003452:	d824      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003458:	d018      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800345a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800345e:	d81e      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d007      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800346a:	e018      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003478:	e017      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f001 f8a5 	bl	80045d0 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800348a:	e00e      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f94e 	bl	8004734 <RCCEx_PLL3_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800349c:	e005      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80034a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034be:	4902      	ldr	r1, [pc, #8]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	658b      	str	r3, [r1, #88]	; 0x58
 80034c4:	e004      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d032      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e0:	2b30      	cmp	r3, #48	; 0x30
 80034e2:	d01c      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034e4:	2b30      	cmp	r3, #48	; 0x30
 80034e6:	d817      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d00c      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d813      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d016      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d10f      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f8:	4baf      	ldr	r3, [pc, #700]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	4aae      	ldr	r2, [pc, #696]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003502:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003504:	e00e      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	2102      	movs	r1, #2
 800350c:	4618      	mov	r0, r3
 800350e:	f001 f85f 	bl	80045d0 <RCCEx_PLL2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003516:	e005      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	e002      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800352a:	4ba3      	ldr	r3, [pc, #652]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	49a0      	ldr	r1, [pc, #640]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800353c:	e001      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d047      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003556:	d030      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800355c:	d82a      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800355e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003562:	d02c      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003564:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003568:	d824      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800356a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356e:	d018      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d81e      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357e:	d007      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003580:	e018      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003582:	4b8d      	ldr	r3, [pc, #564]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	4a8c      	ldr	r2, [pc, #560]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800358e:	e017      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f81a 	bl	80045d0 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035a0:	e00e      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3324      	adds	r3, #36	; 0x24
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 f8c3 	bl	8004734 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035b2:	e005      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80035be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035c6:	4b7c      	ldr	r3, [pc, #496]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	4979      	ldr	r1, [pc, #484]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	650b      	str	r3, [r1, #80]	; 0x50
 80035d8:	e001      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d049      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f2:	d02e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d828      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80035fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035fe:	d02a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003604:	d822      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003606:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800360a:	d026      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800360c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003610:	d81c      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003616:	d010      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361c:	d816      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01d      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003626:	d111      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f000 ffce 	bl	80045d0 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003638:	e012      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3324      	adds	r3, #36	; 0x24
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f877 	bl	8004734 <RCCEx_PLL3_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800364a:	e009      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	e006      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003652:	bf00      	nop
 8003654:	e004      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800365e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003666:	4b54      	ldr	r3, [pc, #336]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	4951      	ldr	r1, [pc, #324]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	650b      	str	r3, [r1, #80]	; 0x50
 8003678:	e001      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04b      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003694:	d02e      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369a:	d828      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d02a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a6:	d822      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036ac:	d026      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 80036ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036b2:	d81c      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b8:	d010      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80036ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036be:	d816      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01d      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80036c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c8:	d111      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2101      	movs	r1, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 ff7d 	bl	80045d0 <RCCEx_PLL2_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036da:	e012      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f826 	bl	8004734 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036ec:	e009      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
      break;
 80036f2:	e006      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036f4:	bf00      	nop
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036f8:	bf00      	nop
 80036fa:	e002      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003716:	4928      	ldr	r1, [pc, #160]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003718:	4313      	orrs	r3, r2
 800371a:	658b      	str	r3, [r1, #88]	; 0x58
 800371c:	e001      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02f      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003736:	d00e      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800373c:	d814      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d015      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003746:	d10f      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a1a      	ldr	r2, [pc, #104]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003754:	e00c      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2101      	movs	r1, #1
 800375c:	4618      	mov	r0, r3
 800375e:	f000 ff37 	bl	80045d0 <RCCEx_PLL2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003766:	e003      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
      break;
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800376e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003782:	490d      	ldr	r1, [pc, #52]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	650b      	str	r3, [r1, #80]	; 0x50
 8003788:	e001      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d033      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d81c      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037e3 	.word	0x080037e3
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037cb 	.word	0x080037cb
 80037b4:	080037e3 	.word	0x080037e3
 80037b8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037bc:	4bb8      	ldr	r3, [pc, #736]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	4ab7      	ldr	r2, [pc, #732]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037c8:	e00c      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fefd 	bl	80045d0 <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037da:	e003      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
      break;
 80037e0:	e000      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80037e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037ea:	4bad      	ldr	r3, [pc, #692]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	f023 0203 	bic.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	49aa      	ldr	r1, [pc, #680]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037fc:	e001      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8086 	beq.w	800391c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4ba4      	ldr	r3, [pc, #656]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4aa3      	ldr	r2, [pc, #652]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381c:	f7fd fc8a 	bl	8001134 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fd fc86 	bl	8001134 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d902      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	75fb      	strb	r3, [r7, #23]
        break;
 8003836:	e005      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003838:	4b9a      	ldr	r3, [pc, #616]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d166      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800384a:	4b95      	ldr	r3, [pc, #596]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800384c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003854:	4053      	eors	r3, r2
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d013      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800385e:	4b90      	ldr	r3, [pc, #576]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003868:	4b8d      	ldr	r3, [pc, #564]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a8c      	ldr	r2, [pc, #560]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003874:	4b8a      	ldr	r3, [pc, #552]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a89      	ldr	r2, [pc, #548]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800387a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003880:	4a87      	ldr	r2, [pc, #540]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800388c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003890:	d115      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fd fc4f 	bl	8001134 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003898:	e00b      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fd fc4b 	bl	8001134 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d902      	bls.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	75fb      	strb	r3, [r7, #23]
            break;
 80038b0:	e005      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b2:	4b7b      	ldr	r3, [pc, #492]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ed      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d126      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80038d4:	4b72      	ldr	r3, [pc, #456]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e2:	0919      	lsrs	r1, r3, #4
 80038e4:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80038e6:	400b      	ands	r3, r1
 80038e8:	496d      	ldr	r1, [pc, #436]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	610b      	str	r3, [r1, #16]
 80038ee:	e005      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80038f0:	4b6b      	ldr	r3, [pc, #428]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	4a6a      	ldr	r2, [pc, #424]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038fa:	6113      	str	r3, [r2, #16]
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800390c:	4313      	orrs	r3, r2
 800390e:	670b      	str	r3, [r1, #112]	; 0x70
 8003910:	e004      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	75bb      	strb	r3, [r7, #22]
 8003916:	e001      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d07e      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392c:	2b28      	cmp	r3, #40	; 0x28
 800392e:	d867      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003a07 	.word	0x08003a07
 800393c:	08003a01 	.word	0x08003a01
 8003940:	08003a01 	.word	0x08003a01
 8003944:	08003a01 	.word	0x08003a01
 8003948:	08003a01 	.word	0x08003a01
 800394c:	08003a01 	.word	0x08003a01
 8003950:	08003a01 	.word	0x08003a01
 8003954:	08003a01 	.word	0x08003a01
 8003958:	080039dd 	.word	0x080039dd
 800395c:	08003a01 	.word	0x08003a01
 8003960:	08003a01 	.word	0x08003a01
 8003964:	08003a01 	.word	0x08003a01
 8003968:	08003a01 	.word	0x08003a01
 800396c:	08003a01 	.word	0x08003a01
 8003970:	08003a01 	.word	0x08003a01
 8003974:	08003a01 	.word	0x08003a01
 8003978:	080039ef 	.word	0x080039ef
 800397c:	08003a01 	.word	0x08003a01
 8003980:	08003a01 	.word	0x08003a01
 8003984:	08003a01 	.word	0x08003a01
 8003988:	08003a01 	.word	0x08003a01
 800398c:	08003a01 	.word	0x08003a01
 8003990:	08003a01 	.word	0x08003a01
 8003994:	08003a01 	.word	0x08003a01
 8003998:	08003a07 	.word	0x08003a07
 800399c:	08003a01 	.word	0x08003a01
 80039a0:	08003a01 	.word	0x08003a01
 80039a4:	08003a01 	.word	0x08003a01
 80039a8:	08003a01 	.word	0x08003a01
 80039ac:	08003a01 	.word	0x08003a01
 80039b0:	08003a01 	.word	0x08003a01
 80039b4:	08003a01 	.word	0x08003a01
 80039b8:	08003a07 	.word	0x08003a07
 80039bc:	08003a01 	.word	0x08003a01
 80039c0:	08003a01 	.word	0x08003a01
 80039c4:	08003a01 	.word	0x08003a01
 80039c8:	08003a01 	.word	0x08003a01
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a01 	.word	0x08003a01
 80039d4:	08003a01 	.word	0x08003a01
 80039d8:	08003a07 	.word	0x08003a07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	2101      	movs	r1, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fdf4 	bl	80045d0 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3324      	adds	r3, #36	; 0x24
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fe9d 	bl	8004734 <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a1a:	4921      	ldr	r1, [pc, #132]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	654b      	str	r3, [r1, #84]	; 0x54
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03e      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d820      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a83 	.word	0x08003a83
 8003a44:	08003a59 	.word	0x08003a59
 8003a48:	08003a6b 	.word	0x08003a6b
 8003a4c:	08003a83 	.word	0x08003a83
 8003a50:	08003a83 	.word	0x08003a83
 8003a54:	08003a83 	.word	0x08003a83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fdb6 	bl	80045d0 <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a68:	e00c      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3324      	adds	r3, #36	; 0x24
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fe5f 	bl	8004734 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a7a:	e003      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d110      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	f023 0207 	bic.w	r2, r3, #7
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a96:	4902      	ldr	r1, [pc, #8]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	654b      	str	r3, [r1, #84]	; 0x54
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003a9e:	bf00      	nop
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	58024800 	.word	0x58024800
 8003aa8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d039      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d820      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b0f 	.word	0x08003b0f
 8003ad0:	08003ae5 	.word	0x08003ae5
 8003ad4:	08003af7 	.word	0x08003af7
 8003ad8:	08003b0f 	.word	0x08003b0f
 8003adc:	08003b0f 	.word	0x08003b0f
 8003ae0:	08003b0f 	.word	0x08003b0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fd70 	bl	80045d0 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003af4:	e00c      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fe19 	bl	8004734 <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b06:	e003      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b16:	4bb7      	ldr	r3, [pc, #732]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	49b3      	ldr	r1, [pc, #716]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	658b      	str	r3, [r1, #88]	; 0x58
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d04b      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b46:	d02e      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b4c:	d828      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b52:	d02a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d822      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b5e:	d026      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003b60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b64:	d81c      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6a:	d010      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b70:	d816      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01d      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fd24 	bl	80045d0 <RCCEx_PLL2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b8c:	e012      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3324      	adds	r3, #36	; 0x24
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fdcd 	bl	8004734 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba4:	e006      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e004      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bba:	4b8e      	ldr	r3, [pc, #568]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc8:	498a      	ldr	r1, [pc, #552]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	654b      	str	r3, [r1, #84]	; 0x54
 8003bce:	e001      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d04b      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bea:	d02e      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003bec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bf0:	d828      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf6:	d02a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfc:	d822      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c02:	d026      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c08:	d81c      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d816      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01d      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fcd2 	bl	80045d0 <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c30:	e012      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3324      	adds	r3, #36	; 0x24
 8003c36:	2102      	movs	r1, #2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd7b 	bl	8004734 <RCCEx_PLL3_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c42:	e009      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
      break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e004      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c5e:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6c:	4961      	ldr	r1, [pc, #388]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	658b      	str	r3, [r1, #88]	; 0x58
 8003c72:	e001      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d04b      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c8e:	d02e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003c90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c94:	d828      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9a:	d02a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca0:	d822      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ca2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ca6:	d026      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ca8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cac:	d81c      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb8:	d816      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01d      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fc80 	bl	80045d0 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cd4:	e012      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3324      	adds	r3, #36	; 0x24
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fd29 	bl	8004734 <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ce6:	e009      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
      break;
 8003cec:	e006      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e004      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d02:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d10:	4938      	ldr	r1, [pc, #224]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	658b      	str	r3, [r1, #88]	; 0x58
 8003d16:	e001      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d10a      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3324      	adds	r3, #36	; 0x24
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fcfa 	bl	8004734 <RCCEx_PLL3_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d58:	4926      	ldr	r1, [pc, #152]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d74:	d10a      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3324      	adds	r3, #36	; 0x24
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fcd9 	bl	8004734 <RCCEx_PLL3_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9a:	4916      	ldr	r1, [pc, #88]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d036      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db6:	d01f      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dbc:	d817      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003dc8:	e011      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fbfd 	bl	80045d0 <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003dda:	e00e      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	2102      	movs	r1, #2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fca6 	bl	8004734 <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003dec:	e005      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003df4:	58024400 	.word	0x58024400
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e00:	4b93      	ldr	r3, [pc, #588]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e0e:	4990      	ldr	r1, [pc, #576]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	658b      	str	r3, [r1, #88]	; 0x58
 8003e14:	e001      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d033      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e30:	d01c      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003e32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e36:	d816      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3c:	d003      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e42:	d007      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003e44:	e00f      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e46:	4b82      	ldr	r3, [pc, #520]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	4a81      	ldr	r2, [pc, #516]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e52:	e00c      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3324      	adds	r3, #36	; 0x24
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fc6a 	bl	8004734 <RCCEx_PLL3_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e64:	e003      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6a:	e000      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e74:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e82:	4973      	ldr	r1, [pc, #460]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	654b      	str	r3, [r1, #84]	; 0x54
 8003e88:	e001      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d029      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d007      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003ea8:	e00f      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eaa:	4b69      	ldr	r3, [pc, #420]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a68      	ldr	r2, [pc, #416]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fb86 	bl	80045d0 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ed6:	4b5e      	ldr	r3, [pc, #376]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	495b      	ldr	r1, [pc, #364]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ee8:	e001      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3324      	adds	r3, #36	; 0x24
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fc17 	bl	8004734 <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d030      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f24:	d017      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2a:	d811      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f30:	d013      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f36:	d80b      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f40:	d106      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f42:	4b43      	ldr	r3, [pc, #268]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	4a42      	ldr	r2, [pc, #264]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f4e:	e007      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
      break;
 8003f54:	e004      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f66:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f72:	4937      	ldr	r1, [pc, #220]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	654b      	str	r3, [r1, #84]	; 0x54
 8003f78:	e001      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	492e      	ldr	r1, [pc, #184]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fa8:	4b29      	ldr	r3, [pc, #164]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fb6:	4926      	ldr	r1, [pc, #152]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fc8:	4b21      	ldr	r3, [pc, #132]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd4:	491e      	ldr	r1, [pc, #120]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ff0:	6113      	str	r3, [r2, #16]
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ffc:	4914      	ldr	r1, [pc, #80]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da08      	bge.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	490e      	ldr	r1, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	4906      	ldr	r1, [pc, #24]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004038:	4313      	orrs	r3, r2
 800403a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800403c:	7dbb      	ldrb	r3, [r7, #22]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	58024400 	.word	0x58024400

08004054 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004058:	f7ff f860 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4904      	ldr	r1, [pc, #16]	; (800407c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004074:	4618      	mov	r0, r3
 8004076:	bd80      	pop	{r7, pc}
 8004078:	58024400 	.word	0x58024400
 800407c:	08007800 	.word	0x08007800

08004080 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004080:	b480      	push	{r7}
 8004082:	b089      	sub	sp, #36	; 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004088:	4ba1      	ldr	r3, [pc, #644]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004092:	4b9f      	ldr	r3, [pc, #636]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	0b1b      	lsrs	r3, r3, #12
 8004098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800409c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800409e:	4b9c      	ldr	r3, [pc, #624]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80040aa:	4b99      	ldr	r3, [pc, #612]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	08db      	lsrs	r3, r3, #3
 80040b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8111 	beq.w	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	f000 8083 	beq.w	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	f200 80a1 	bhi.w	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d056      	beq.n	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040ea:	e099      	b.n	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040ec:	4b88      	ldr	r3, [pc, #544]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d02d      	beq.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040f8:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	4a84      	ldr	r2, [pc, #528]	; (8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004152:	e087      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800431c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004166:	4b6a      	ldr	r3, [pc, #424]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	ed97 6a03 	vldr	s12, [r7, #12]
 800417a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004196:	e065      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041aa:	4b59      	ldr	r3, [pc, #356]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80041be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041da:	e043      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ee:	4b48      	ldr	r3, [pc, #288]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004202:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800421e:	e021      	b.n	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004232:	4b37      	ldr	r3, [pc, #220]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004242:	ed97 6a03 	vldr	s12, [r7, #12]
 8004246:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004262:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	0a5b      	lsrs	r3, r3, #9
 800426a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800427a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800427e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428a:	ee17 2a90 	vmov	r2, s15
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429c:	ee07 3a90 	vmov	s15, r3
 80042a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80042b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b8:	ee17 2a90 	vmov	r2, s15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80042c0:	4b13      	ldr	r3, [pc, #76]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	0e1b      	lsrs	r3, r3, #24
 80042c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042da:	edd7 6a07 	vldr	s13, [r7, #28]
 80042de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e6:	ee17 2a90 	vmov	r2, s15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042ee:	e008      	b.n	8004302 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
}
 8004302:	bf00      	nop
 8004304:	3724      	adds	r7, #36	; 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	58024400 	.word	0x58024400
 8004314:	03d09000 	.word	0x03d09000
 8004318:	46000000 	.word	0x46000000
 800431c:	4c742400 	.word	0x4c742400
 8004320:	4a742400 	.word	0x4a742400
 8004324:	4bbebc20 	.word	0x4bbebc20

08004328 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	; 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004330:	4ba1      	ldr	r3, [pc, #644]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800433a:	4b9f      	ldr	r3, [pc, #636]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	0d1b      	lsrs	r3, r3, #20
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004346:	4b9c      	ldr	r3, [pc, #624]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004352:	4b99      	ldr	r3, [pc, #612]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	08db      	lsrs	r3, r3, #3
 8004358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8111 	beq.w	8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b02      	cmp	r3, #2
 800437a:	f000 8083 	beq.w	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b02      	cmp	r3, #2
 8004382:	f200 80a1 	bhi.w	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d056      	beq.n	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004392:	e099      	b.n	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004394:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d02d      	beq.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043a0:	4b85      	ldr	r3, [pc, #532]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	4a84      	ldr	r2, [pc, #528]	; (80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a03 	vldr	s12, [r7, #12]
 80043de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043fa:	e087      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004422:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800443e:	e065      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a03 	vldr	s12, [r7, #12]
 8004466:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004482:	e043      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b48      	ldr	r3, [pc, #288]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044c6:	e021      	b.n	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800450a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	0a5b      	lsrs	r3, r3, #9
 8004512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004526:	edd7 6a07 	vldr	s13, [r7, #28]
 800452a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800452e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004532:	ee17 2a90 	vmov	r2, s15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800453a:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004554:	edd7 6a07 	vldr	s13, [r7, #28]
 8004558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004560:	ee17 2a90 	vmov	r2, s15
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800457e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004582:	edd7 6a07 	vldr	s13, [r7, #28]
 8004586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458e:	ee17 2a90 	vmov	r2, s15
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004596:	e008      	b.n	80045aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	58024400 	.word	0x58024400
 80045bc:	03d09000 	.word	0x03d09000
 80045c0:	46000000 	.word	0x46000000
 80045c4:	4c742400 	.word	0x4c742400
 80045c8:	4a742400 	.word	0x4a742400
 80045cc:	4bbebc20 	.word	0x4bbebc20

080045d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045de:	4b53      	ldr	r3, [pc, #332]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d101      	bne.n	80045ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e099      	b.n	8004722 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045ee:	4b4f      	ldr	r3, [pc, #316]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4e      	ldr	r2, [pc, #312]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80045f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fa:	f7fc fd9b 	bl	8001134 <HAL_GetTick>
 80045fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004600:	e008      	b.n	8004614 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004602:	f7fc fd97 	bl	8001134 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e086      	b.n	8004722 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004614:	4b45      	ldr	r3, [pc, #276]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	031b      	lsls	r3, r3, #12
 800462e:	493f      	ldr	r1, [pc, #252]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	628b      	str	r3, [r1, #40]	; 0x28
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	3b01      	subs	r3, #1
 800463a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	025b      	lsls	r3, r3, #9
 8004646:	b29b      	uxth	r3, r3
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	3b01      	subs	r3, #1
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004664:	4931      	ldr	r1, [pc, #196]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800466a:	4b30      	ldr	r3, [pc, #192]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	492d      	ldr	r1, [pc, #180]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	f023 0220 	bic.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	4928      	ldr	r1, [pc, #160]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4a26      	ldr	r2, [pc, #152]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004694:	f023 0310 	bic.w	r3, r3, #16
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 800469c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <RCCEx_PLL2_Config+0x160>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	69d2      	ldr	r2, [r2, #28]
 80046a6:	00d2      	lsls	r2, r2, #3
 80046a8:	4920      	ldr	r1, [pc, #128]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046b4:	f043 0310 	orr.w	r3, r3, #16
 80046b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4a19      	ldr	r2, [pc, #100]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046cc:	e00f      	b.n	80046ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046e0:	e005      	b.n	80046ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a11      	ldr	r2, [pc, #68]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 80046f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fa:	f7fc fd1b 	bl	8001134 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004700:	e008      	b.n	8004714 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004702:	f7fc fd17 	bl	8001134 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <RCCEx_PLL2_Config+0x15c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	58024400 	.word	0x58024400
 8004730:	ffff0007 	.word	0xffff0007

08004734 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004742:	4b53      	ldr	r3, [pc, #332]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d101      	bne.n	8004752 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e099      	b.n	8004886 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004752:	4b4f      	ldr	r3, [pc, #316]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4e      	ldr	r2, [pc, #312]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475e:	f7fc fce9 	bl	8001134 <HAL_GetTick>
 8004762:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004764:	e008      	b.n	8004778 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004766:	f7fc fce5 	bl	8001134 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e086      	b.n	8004886 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004778:	4b45      	ldr	r3, [pc, #276]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004784:	4b42      	ldr	r3, [pc, #264]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	051b      	lsls	r3, r3, #20
 8004792:	493f      	ldr	r1, [pc, #252]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	628b      	str	r3, [r1, #40]	; 0x28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	3b01      	subs	r3, #1
 800479e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047c8:	4931      	ldr	r1, [pc, #196]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047ce:	4b30      	ldr	r3, [pc, #192]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	492d      	ldr	r1, [pc, #180]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	4928      	ldr	r1, [pc, #160]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047f2:	4b27      	ldr	r3, [pc, #156]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <RCCEx_PLL3_Config+0x160>)
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	69d2      	ldr	r2, [r2, #28]
 800480a:	00d2      	lsls	r2, r2, #3
 800480c:	4920      	ldr	r1, [pc, #128]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004812:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800482a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800482e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004830:	e00f      	b.n	8004852 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800483e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004844:	e005      	b.n	8004852 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800484c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004850:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485e:	f7fc fc69 	bl	8001134 <HAL_GetTick>
 8004862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004864:	e008      	b.n	8004878 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004866:	f7fc fc65 	bl	8001134 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e006      	b.n	8004886 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <RCCEx_PLL3_Config+0x15c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400
 8004894:	ffff0007 	.word	0xffff0007

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e049      	b.n	800493e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc fa40 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 f9a6 	bl	8004c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d001      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e054      	b.n	8004a0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <HAL_TIM_Base_Start_IT+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d022      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d01d      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a21      	ldr	r2, [pc, #132]	; (8004a20 <HAL_TIM_Base_Start_IT+0xd8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <HAL_TIM_Base_Start_IT+0xe0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_TIM_Base_Start_IT+0xe4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x80>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <HAL_TIM_Base_Start_IT+0xe8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d115      	bne.n	80049f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_TIM_Base_Start_IT+0xec>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d015      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0xbe>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d011      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	e008      	b.n	8004a06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e000      	b.n	8004a08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40001800 	.word	0x40001800
 8004a30:	40014000 	.word	0x40014000
 8004a34:	00010007 	.word	0x00010007

08004a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_ConfigClockSource+0x1c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0dc      	b.n	8004c0e <HAL_TIM_ConfigClockSource+0x1d6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a64      	ldr	r2, [pc, #400]	; (8004c1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	f000 80a9 	beq.w	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004a90:	4a62      	ldr	r2, [pc, #392]	; (8004c1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	f200 80ae 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004a98:	4a61      	ldr	r2, [pc, #388]	; (8004c20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	f000 80a1 	beq.w	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004aa0:	4a5f      	ldr	r2, [pc, #380]	; (8004c20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	f200 80a6 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004aa8:	4a5e      	ldr	r2, [pc, #376]	; (8004c24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	f000 8099 	beq.w	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ab0:	4a5c      	ldr	r2, [pc, #368]	; (8004c24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	f200 809e 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ab8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004abc:	f000 8091 	beq.w	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ac0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ac4:	f200 8096 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004acc:	f000 8089 	beq.w	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad4:	f200 808e 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004adc:	d03e      	beq.n	8004b5c <HAL_TIM_ConfigClockSource+0x124>
 8004ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae2:	f200 8087 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	f000 8086 	beq.w	8004bfa <HAL_TIM_ConfigClockSource+0x1c2>
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af2:	d87f      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004af4:	2b70      	cmp	r3, #112	; 0x70
 8004af6:	d01a      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xf6>
 8004af8:	2b70      	cmp	r3, #112	; 0x70
 8004afa:	d87b      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d050      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0x16a>
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d877      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b04:	2b50      	cmp	r3, #80	; 0x50
 8004b06:	d03c      	beq.n	8004b82 <HAL_TIM_ConfigClockSource+0x14a>
 8004b08:	2b50      	cmp	r3, #80	; 0x50
 8004b0a:	d873      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d058      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0x18a>
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d86f      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d064      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b18:	2b30      	cmp	r3, #48	; 0x30
 8004b1a:	d86b      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d060      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d867      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d05c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d05a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b2c:	e062      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f000 f98b 	bl	8004e58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	609a      	str	r2, [r3, #8]
      break;
 8004b5a:	e04f      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6899      	ldr	r1, [r3, #8]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f000 f974 	bl	8004e58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b7e:	609a      	str	r2, [r3, #8]
      break;
 8004b80:	e03c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6859      	ldr	r1, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f000 f8e4 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2150      	movs	r1, #80	; 0x50
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f93e 	bl	8004e1c <TIM_ITRx_SetConfig>
      break;
 8004ba0:	e02c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f000 f903 	bl	8004dba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2160      	movs	r1, #96	; 0x60
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f92e 	bl	8004e1c <TIM_ITRx_SetConfig>
      break;
 8004bc0:	e01c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f000 f8c4 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2140      	movs	r1, #64	; 0x40
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f91e 	bl	8004e1c <TIM_ITRx_SetConfig>
      break;
 8004be0:	e00c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f000 f915 	bl	8004e1c <TIM_ITRx_SetConfig>
      break;
 8004bf2:	e003      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf8:	e000      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	ffceff88 	.word	0xffceff88
 8004c1c:	00100040 	.word	0x00100040
 8004c20:	00100030 	.word	0x00100030
 8004c24:	00100020 	.word	0x00100020

08004c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a40      	ldr	r2, [pc, #256]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d00f      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3d      	ldr	r2, [pc, #244]	; (8004d40 <TIM_Base_SetConfig+0x118>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <TIM_Base_SetConfig+0x11c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d007      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3b      	ldr	r2, [pc, #236]	; (8004d48 <TIM_Base_SetConfig+0x120>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3a      	ldr	r2, [pc, #232]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01f      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d01b      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <TIM_Base_SetConfig+0x118>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d017      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <TIM_Base_SetConfig+0x11c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2a      	ldr	r2, [pc, #168]	; (8004d48 <TIM_Base_SetConfig+0x120>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00f      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00b      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a28      	ldr	r2, [pc, #160]	; (8004d50 <TIM_Base_SetConfig+0x128>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <TIM_Base_SetConfig+0x12c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <TIM_Base_SetConfig+0x130>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d108      	bne.n	8004cd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00f      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a11      	ldr	r2, [pc, #68]	; (8004d50 <TIM_Base_SetConfig+0x128>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <TIM_Base_SetConfig+0x12c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0f      	ldr	r2, [pc, #60]	; (8004d58 <TIM_Base_SetConfig+0x130>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 030a 	bic.w	r3, r3, #10
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f023 0210 	bic.w	r2, r3, #16
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	031b      	lsls	r3, r3, #12
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <TIM_ITRx_SetConfig+0x38>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f043 0307 	orr.w	r3, r3, #7
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	609a      	str	r2, [r3, #8]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	ffcfff8f 	.word	0xffcfff8f

08004e58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	021a      	lsls	r2, r3, #8
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	609a      	str	r2, [r3, #8]
}
 8004e8c:	bf00      	nop
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e06d      	b.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a30      	ldr	r2, [pc, #192]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2f      	ldr	r2, [pc, #188]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d01d      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1a      	ldr	r2, [pc, #104]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a16      	ldr	r2, [pc, #88]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10c      	bne.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40001800 	.word	0x40001800
 8004fb0:	40014000 	.word	0x40014000

08004fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e042      	b.n	800504c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fb fed3 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2224      	movs	r2, #36	; 0x24
 8004fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fc80 	bl	80058fc <UART_SetConfig>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e022      	b.n	800504c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 f9d4 	bl	80063bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f001 fa5b 	bl	8006500 <UART_CheckIdleState>
 800504a:	4603      	mov	r3, r0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506a:	2b20      	cmp	r3, #32
 800506c:	f040 8083 	bne.w	8005176 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_UART_Transmit+0x28>
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e07b      	b.n	8005178 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_UART_Transmit+0x3a>
 800508a:	2302      	movs	r3, #2
 800508c:	e074      	b.n	8005178 <HAL_UART_Transmit+0x124>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2221      	movs	r2, #33	; 0x21
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050a6:	f7fc f845 	bl	8001134 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c4:	d108      	bne.n	80050d8 <HAL_UART_Transmit+0x84>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	e003      	b.n	80050e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80050e8:	e02c      	b.n	8005144 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f001 fa4e 	bl	8006596 <UART_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e039      	b.n	8005178 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005118:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3302      	adds	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e007      	b.n	8005132 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	3301      	adds	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1cc      	bne.n	80050ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2200      	movs	r2, #0
 8005158:	2140      	movs	r1, #64	; 0x40
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f001 fa1b 	bl	8006596 <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e006      	b.n	8005178 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b0ba      	sub	sp, #232	; 0xe8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80051ae:	4013      	ands	r3, r2
 80051b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11b      	bne.n	80051f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 835a 	beq.w	800589e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
      }
      return;
 80051f2:	e354      	b.n	800589e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 811f 	beq.w	800543c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005202:	4b8b      	ldr	r3, [pc, #556]	; (8005430 <HAL_UART_IRQHandler+0x2b0>)
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800520a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800520e:	4b89      	ldr	r3, [pc, #548]	; (8005434 <HAL_UART_IRQHandler+0x2b4>)
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8112 	beq.w	800543c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d011      	beq.n	8005248 <HAL_UART_IRQHandler+0xc8>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2201      	movs	r2, #1
 8005236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523e:	f043 0201 	orr.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <HAL_UART_IRQHandler+0xf8>
 8005254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2202      	movs	r2, #2
 8005266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <HAL_UART_IRQHandler+0x128>
 8005284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2204      	movs	r2, #4
 8005296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052c4:	4b5a      	ldr	r3, [pc, #360]	; (8005430 <HAL_UART_IRQHandler+0x2b0>)
 80052c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2208      	movs	r2, #8
 80052d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052da:	f043 0208 	orr.w	r2, r3, #8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_UART_IRQHandler+0x196>
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 82c0 	beq.w	80058a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d013      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d005      	beq.n	800537a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800536e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005376:	2b00      	cmp	r3, #0
 8005378:	d04f      	beq.n	800541a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 f9d4 	bl	8006728 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d141      	bne.n	8005412 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1d9      	bne.n	800538e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d013      	beq.n	800540a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e6:	4a14      	ldr	r2, [pc, #80]	; (8005438 <HAL_UART_IRQHandler+0x2b8>)
 80053e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc fb0a 	bl	8001a08 <HAL_DMA_Abort_IT>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005404:	4610      	mov	r0, r2
 8005406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	e00f      	b.n	800542a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa60 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	e00b      	b.n	800542a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa5c 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	e007      	b.n	800542a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa58 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005428:	e23b      	b.n	80058a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542a:	bf00      	nop
    return;
 800542c:	e239      	b.n	80058a2 <HAL_UART_IRQHandler+0x722>
 800542e:	bf00      	nop
 8005430:	10000001 	.word	0x10000001
 8005434:	04000120 	.word	0x04000120
 8005438:	080067f5 	.word	0x080067f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005440:	2b01      	cmp	r3, #1
 8005442:	f040 81ce 	bne.w	80057e2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 81c7 	beq.w	80057e2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 81c0 	beq.w	80057e2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2210      	movs	r2, #16
 8005468:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	f040 813b 	bne.w	80056f0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a8b      	ldr	r2, [pc, #556]	; (80056b0 <HAL_UART_IRQHandler+0x530>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d059      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a89      	ldr	r2, [pc, #548]	; (80056b4 <HAL_UART_IRQHandler+0x534>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d053      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a87      	ldr	r2, [pc, #540]	; (80056b8 <HAL_UART_IRQHandler+0x538>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d04d      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a85      	ldr	r2, [pc, #532]	; (80056bc <HAL_UART_IRQHandler+0x53c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d047      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a83      	ldr	r2, [pc, #524]	; (80056c0 <HAL_UART_IRQHandler+0x540>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d041      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a81      	ldr	r2, [pc, #516]	; (80056c4 <HAL_UART_IRQHandler+0x544>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d03b      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a7f      	ldr	r2, [pc, #508]	; (80056c8 <HAL_UART_IRQHandler+0x548>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d035      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7d      	ldr	r2, [pc, #500]	; (80056cc <HAL_UART_IRQHandler+0x54c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02f      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a7b      	ldr	r2, [pc, #492]	; (80056d0 <HAL_UART_IRQHandler+0x550>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d029      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a79      	ldr	r2, [pc, #484]	; (80056d4 <HAL_UART_IRQHandler+0x554>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d023      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a77      	ldr	r2, [pc, #476]	; (80056d8 <HAL_UART_IRQHandler+0x558>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01d      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a75      	ldr	r2, [pc, #468]	; (80056dc <HAL_UART_IRQHandler+0x55c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d017      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a73      	ldr	r2, [pc, #460]	; (80056e0 <HAL_UART_IRQHandler+0x560>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d011      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a71      	ldr	r2, [pc, #452]	; (80056e4 <HAL_UART_IRQHandler+0x564>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00b      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6f      	ldr	r2, [pc, #444]	; (80056e8 <HAL_UART_IRQHandler+0x568>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d005      	beq.n	800553a <HAL_UART_IRQHandler+0x3ba>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a6d      	ldr	r2, [pc, #436]	; (80056ec <HAL_UART_IRQHandler+0x56c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d105      	bne.n	8005546 <HAL_UART_IRQHandler+0x3c6>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	b29b      	uxth	r3, r3
 8005544:	e004      	b.n	8005550 <HAL_UART_IRQHandler+0x3d0>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 81a4 	beq.w	80058a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005568:	429a      	cmp	r2, r3
 800556a:	f080 819c 	bcs.w	80058a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005582:	f000 8086 	beq.w	8005692 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800559a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800559e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1da      	bne.n	8005586 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e1      	bne.n	80055d0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800561c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005630:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005632:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005636:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800563e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e3      	bne.n	800560c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005662:	f023 0310 	bic.w	r3, r3, #16
 8005666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005674:	65bb      	str	r3, [r7, #88]	; 0x58
 8005676:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800567a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e4      	bne.n	8005652 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568c:	4618      	mov	r0, r3
 800568e:	f7fb fe9d 	bl	80013cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f91c 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056ac:	e0fb      	b.n	80058a6 <HAL_UART_IRQHandler+0x726>
 80056ae:	bf00      	nop
 80056b0:	40020010 	.word	0x40020010
 80056b4:	40020028 	.word	0x40020028
 80056b8:	40020040 	.word	0x40020040
 80056bc:	40020058 	.word	0x40020058
 80056c0:	40020070 	.word	0x40020070
 80056c4:	40020088 	.word	0x40020088
 80056c8:	400200a0 	.word	0x400200a0
 80056cc:	400200b8 	.word	0x400200b8
 80056d0:	40020410 	.word	0x40020410
 80056d4:	40020428 	.word	0x40020428
 80056d8:	40020440 	.word	0x40020440
 80056dc:	40020458 	.word	0x40020458
 80056e0:	40020470 	.word	0x40020470
 80056e4:	40020488 	.word	0x40020488
 80056e8:	400204a0 	.word	0x400204a0
 80056ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80cc 	beq.w	80058aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8005712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80c7 	beq.w	80058aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800573e:	647b      	str	r3, [r7, #68]	; 0x44
 8005740:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e4      	bne.n	800571c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	623b      	str	r3, [r7, #32]
   return(result);
 8005762:	6a3a      	ldr	r2, [r7, #32]
 8005764:	4b54      	ldr	r3, [pc, #336]	; (80058b8 <HAL_UART_IRQHandler+0x738>)
 8005766:	4013      	ands	r3, r2
 8005768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005776:	633a      	str	r2, [r7, #48]	; 0x30
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800577c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e3      	bne.n	8005752 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0310 	bic.w	r3, r3, #16
 80057b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	69b9      	ldr	r1, [r7, #24]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	617b      	str	r3, [r7, #20]
   return(result);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e4      	bne.n	800579e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f882 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e0:	e063      	b.n	80058aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00e      	beq.n	800580c <HAL_UART_IRQHandler+0x68c>
 80057ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005802:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 f836 	bl	8006876 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800580a:	e051      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800580c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d014      	beq.n	8005842 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005834:	2b00      	cmp	r3, #0
 8005836:	d03a      	beq.n	80058ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
    }
    return;
 8005840:	e035      	b.n	80058ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_UART_IRQHandler+0x6e2>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 ffe0 	bl	8006820 <UART_EndTransmit_IT>
    return;
 8005860:	e026      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_UART_IRQHandler+0x702>
 800586e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005872:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 f80f 	bl	800689e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005880:	e016      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_UART_IRQHandler+0x730>
 800588e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005892:	2b00      	cmp	r3, #0
 8005894:	da0c      	bge.n	80058b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fff7 	bl	800688a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800589c:	e008      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
      return;
 800589e:	bf00      	nop
 80058a0:	e006      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
    return;
 80058a2:	bf00      	nop
 80058a4:	e004      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
      return;
 80058a6:	bf00      	nop
 80058a8:	e002      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
      return;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <HAL_UART_IRQHandler+0x730>
    return;
 80058ae:	bf00      	nop
  }
}
 80058b0:	37e8      	adds	r7, #232	; 0xe8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	effffffe 	.word	0xeffffffe

080058bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b5b0      	push	{r4, r5, r7, lr}
 80058fe:	b08e      	sub	sp, #56	; 0x38
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	4313      	orrs	r3, r2
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4bbf      	ldr	r3, [pc, #764]	; (8005c28 <UART_SetConfig+0x32c>)
 800592a:	4013      	ands	r3, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005932:	430b      	orrs	r3, r1
 8005934:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4ab5      	ldr	r2, [pc, #724]	; (8005c2c <UART_SetConfig+0x330>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005962:	4313      	orrs	r3, r2
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	4bb0      	ldr	r3, [pc, #704]	; (8005c30 <UART_SetConfig+0x334>)
 800596e:	4013      	ands	r3, r2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005976:	430b      	orrs	r3, r1
 8005978:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	f023 010f 	bic.w	r1, r3, #15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4aa7      	ldr	r2, [pc, #668]	; (8005c34 <UART_SetConfig+0x338>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d176      	bne.n	8005a88 <UART_SetConfig+0x18c>
 800599a:	4ba7      	ldr	r3, [pc, #668]	; (8005c38 <UART_SetConfig+0x33c>)
 800599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a2:	2b28      	cmp	r3, #40	; 0x28
 80059a4:	d86c      	bhi.n	8005a80 <UART_SetConfig+0x184>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <UART_SetConfig+0xb0>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a81 	.word	0x08005a81
 80059b4:	08005a81 	.word	0x08005a81
 80059b8:	08005a81 	.word	0x08005a81
 80059bc:	08005a81 	.word	0x08005a81
 80059c0:	08005a81 	.word	0x08005a81
 80059c4:	08005a81 	.word	0x08005a81
 80059c8:	08005a81 	.word	0x08005a81
 80059cc:	08005a59 	.word	0x08005a59
 80059d0:	08005a81 	.word	0x08005a81
 80059d4:	08005a81 	.word	0x08005a81
 80059d8:	08005a81 	.word	0x08005a81
 80059dc:	08005a81 	.word	0x08005a81
 80059e0:	08005a81 	.word	0x08005a81
 80059e4:	08005a81 	.word	0x08005a81
 80059e8:	08005a81 	.word	0x08005a81
 80059ec:	08005a61 	.word	0x08005a61
 80059f0:	08005a81 	.word	0x08005a81
 80059f4:	08005a81 	.word	0x08005a81
 80059f8:	08005a81 	.word	0x08005a81
 80059fc:	08005a81 	.word	0x08005a81
 8005a00:	08005a81 	.word	0x08005a81
 8005a04:	08005a81 	.word	0x08005a81
 8005a08:	08005a81 	.word	0x08005a81
 8005a0c:	08005a69 	.word	0x08005a69
 8005a10:	08005a81 	.word	0x08005a81
 8005a14:	08005a81 	.word	0x08005a81
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	08005a81 	.word	0x08005a81
 8005a20:	08005a81 	.word	0x08005a81
 8005a24:	08005a81 	.word	0x08005a81
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a81 	.word	0x08005a81
 8005a34:	08005a81 	.word	0x08005a81
 8005a38:	08005a81 	.word	0x08005a81
 8005a3c:	08005a81 	.word	0x08005a81
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005a81 	.word	0x08005a81
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a56:	e222      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5e:	e21e      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a66:	e21a      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6e:	e216      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005a70:	2320      	movs	r3, #32
 8005a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a76:	e212      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7e:	e20e      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a86:	e20a      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a6b      	ldr	r2, [pc, #428]	; (8005c3c <UART_SetConfig+0x340>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d130      	bne.n	8005af4 <UART_SetConfig+0x1f8>
 8005a92:	4b69      	ldr	r3, [pc, #420]	; (8005c38 <UART_SetConfig+0x33c>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d826      	bhi.n	8005aec <UART_SetConfig+0x1f0>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x1a8>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005abd 	.word	0x08005abd
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	08005acd 	.word	0x08005acd
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac2:	e1ec      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aca:	e1e8      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad2:	e1e4      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ada:	e1e0      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005adc:	2320      	movs	r3, #32
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e1dc      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aea:	e1d8      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af2:	e1d4      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a51      	ldr	r2, [pc, #324]	; (8005c40 <UART_SetConfig+0x344>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d130      	bne.n	8005b60 <UART_SetConfig+0x264>
 8005afe:	4b4e      	ldr	r3, [pc, #312]	; (8005c38 <UART_SetConfig+0x33c>)
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	d826      	bhi.n	8005b58 <UART_SetConfig+0x25c>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x214>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b31 	.word	0x08005b31
 8005b18:	08005b39 	.word	0x08005b39
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2e:	e1b6      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b30:	2304      	movs	r3, #4
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	e1b2      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e1ae      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e1aa      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e1a6      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e1a2      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e19e      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a37      	ldr	r2, [pc, #220]	; (8005c44 <UART_SetConfig+0x348>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d130      	bne.n	8005bcc <UART_SetConfig+0x2d0>
 8005b6a:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <UART_SetConfig+0x33c>)
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	d826      	bhi.n	8005bc4 <UART_SetConfig+0x2c8>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0x280>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005b95 	.word	0x08005b95
 8005b80:	08005b9d 	.word	0x08005b9d
 8005b84:	08005ba5 	.word	0x08005ba5
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bbd 	.word	0x08005bbd
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9a:	e180      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba2:	e17c      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005baa:	e178      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb2:	e174      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005bb4:	2320      	movs	r3, #32
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bba:	e170      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005bbc:	2340      	movs	r3, #64	; 0x40
 8005bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc2:	e16c      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bca:	e168      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <UART_SetConfig+0x34c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d142      	bne.n	8005c5c <UART_SetConfig+0x360>
 8005bd6:	4b18      	ldr	r3, [pc, #96]	; (8005c38 <UART_SetConfig+0x33c>)
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d838      	bhi.n	8005c54 <UART_SetConfig+0x358>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0x2ec>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c01 	.word	0x08005c01
 8005bec:	08005c09 	.word	0x08005c09
 8005bf0:	08005c11 	.word	0x08005c11
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c4d 	.word	0x08005c4d
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c06:	e14a      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0e:	e146      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005c10:	2308      	movs	r3, #8
 8005c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c16:	e142      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1e:	e13e      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005c20:	2320      	movs	r3, #32
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e13a      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005c28:	cfff69f3 	.word	0xcfff69f3
 8005c2c:	58000c00 	.word	0x58000c00
 8005c30:	11fff4ff 	.word	0x11fff4ff
 8005c34:	40011000 	.word	0x40011000
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	40004400 	.word	0x40004400
 8005c40:	40004800 	.word	0x40004800
 8005c44:	40004c00 	.word	0x40004c00
 8005c48:	40005000 	.word	0x40005000
 8005c4c:	2340      	movs	r3, #64	; 0x40
 8005c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c52:	e124      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5a:	e120      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4acc      	ldr	r2, [pc, #816]	; (8005f94 <UART_SetConfig+0x698>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d176      	bne.n	8005d54 <UART_SetConfig+0x458>
 8005c66:	4bcc      	ldr	r3, [pc, #816]	; (8005f98 <UART_SetConfig+0x69c>)
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c6e:	2b28      	cmp	r3, #40	; 0x28
 8005c70:	d86c      	bhi.n	8005d4c <UART_SetConfig+0x450>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <UART_SetConfig+0x37c>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005d1d 	.word	0x08005d1d
 8005c7c:	08005d4d 	.word	0x08005d4d
 8005c80:	08005d4d 	.word	0x08005d4d
 8005c84:	08005d4d 	.word	0x08005d4d
 8005c88:	08005d4d 	.word	0x08005d4d
 8005c8c:	08005d4d 	.word	0x08005d4d
 8005c90:	08005d4d 	.word	0x08005d4d
 8005c94:	08005d4d 	.word	0x08005d4d
 8005c98:	08005d25 	.word	0x08005d25
 8005c9c:	08005d4d 	.word	0x08005d4d
 8005ca0:	08005d4d 	.word	0x08005d4d
 8005ca4:	08005d4d 	.word	0x08005d4d
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d4d 	.word	0x08005d4d
 8005cb0:	08005d4d 	.word	0x08005d4d
 8005cb4:	08005d4d 	.word	0x08005d4d
 8005cb8:	08005d2d 	.word	0x08005d2d
 8005cbc:	08005d4d 	.word	0x08005d4d
 8005cc0:	08005d4d 	.word	0x08005d4d
 8005cc4:	08005d4d 	.word	0x08005d4d
 8005cc8:	08005d4d 	.word	0x08005d4d
 8005ccc:	08005d4d 	.word	0x08005d4d
 8005cd0:	08005d4d 	.word	0x08005d4d
 8005cd4:	08005d4d 	.word	0x08005d4d
 8005cd8:	08005d35 	.word	0x08005d35
 8005cdc:	08005d4d 	.word	0x08005d4d
 8005ce0:	08005d4d 	.word	0x08005d4d
 8005ce4:	08005d4d 	.word	0x08005d4d
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005d4d 	.word	0x08005d4d
 8005cf0:	08005d4d 	.word	0x08005d4d
 8005cf4:	08005d4d 	.word	0x08005d4d
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d4d 	.word	0x08005d4d
 8005d00:	08005d4d 	.word	0x08005d4d
 8005d04:	08005d4d 	.word	0x08005d4d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	08005d4d 	.word	0x08005d4d
 8005d14:	08005d4d 	.word	0x08005d4d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d22:	e0bc      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2a:	e0b8      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d32:	e0b4      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3a:	e0b0      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e0ac      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e0a8      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e0a4      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a90      	ldr	r2, [pc, #576]	; (8005f9c <UART_SetConfig+0x6a0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d130      	bne.n	8005dc0 <UART_SetConfig+0x4c4>
 8005d5e:	4b8e      	ldr	r3, [pc, #568]	; (8005f98 <UART_SetConfig+0x69c>)
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d826      	bhi.n	8005db8 <UART_SetConfig+0x4bc>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0x474>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8e:	e086      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d96:	e082      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9e:	e07e      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e07a      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005da8:	2320      	movs	r3, #32
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e076      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e072      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e06e      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a76      	ldr	r2, [pc, #472]	; (8005fa0 <UART_SetConfig+0x6a4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d130      	bne.n	8005e2c <UART_SetConfig+0x530>
 8005dca:	4b73      	ldr	r3, [pc, #460]	; (8005f98 <UART_SetConfig+0x69c>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	d826      	bhi.n	8005e24 <UART_SetConfig+0x528>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0x4e0>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	08005e05 	.word	0x08005e05
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfa:	e050      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e02:	e04c      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0a:	e048      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e12:	e044      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e14:	2320      	movs	r3, #32
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e040      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e1c:	2340      	movs	r3, #64	; 0x40
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e03c      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e038      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5c      	ldr	r2, [pc, #368]	; (8005fa4 <UART_SetConfig+0x6a8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d130      	bne.n	8005e98 <UART_SetConfig+0x59c>
 8005e36:	4b58      	ldr	r3, [pc, #352]	; (8005f98 <UART_SetConfig+0x69c>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d826      	bhi.n	8005e90 <UART_SetConfig+0x594>
 8005e42:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0x54c>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e61 	.word	0x08005e61
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	08005e71 	.word	0x08005e71
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	2302      	movs	r3, #2
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e01a      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e016      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	e012      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e00e      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e80:	2320      	movs	r3, #32
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e00a      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e88:	2340      	movs	r3, #64	; 0x40
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e006      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e002      	b.n	8005e9e <UART_SetConfig+0x5a2>
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <UART_SetConfig+0x6a8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	f040 80ef 	bne.w	8006088 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	dc46      	bgt.n	8005f40 <UART_SetConfig+0x644>
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	f2c0 8081 	blt.w	8005fba <UART_SetConfig+0x6be>
 8005eb8:	3b02      	subs	r3, #2
 8005eba:	2b1e      	cmp	r3, #30
 8005ebc:	d87d      	bhi.n	8005fba <UART_SetConfig+0x6be>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x5c8>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f47 	.word	0x08005f47
 8005ec8:	08005fbb 	.word	0x08005fbb
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005fbb 	.word	0x08005fbb
 8005ed4:	08005fbb 	.word	0x08005fbb
 8005ed8:	08005fbb 	.word	0x08005fbb
 8005edc:	08005f5f 	.word	0x08005f5f
 8005ee0:	08005fbb 	.word	0x08005fbb
 8005ee4:	08005fbb 	.word	0x08005fbb
 8005ee8:	08005fbb 	.word	0x08005fbb
 8005eec:	08005fbb 	.word	0x08005fbb
 8005ef0:	08005fbb 	.word	0x08005fbb
 8005ef4:	08005fbb 	.word	0x08005fbb
 8005ef8:	08005fbb 	.word	0x08005fbb
 8005efc:	08005f6f 	.word	0x08005f6f
 8005f00:	08005fbb 	.word	0x08005fbb
 8005f04:	08005fbb 	.word	0x08005fbb
 8005f08:	08005fbb 	.word	0x08005fbb
 8005f0c:	08005fbb 	.word	0x08005fbb
 8005f10:	08005fbb 	.word	0x08005fbb
 8005f14:	08005fbb 	.word	0x08005fbb
 8005f18:	08005fbb 	.word	0x08005fbb
 8005f1c:	08005fbb 	.word	0x08005fbb
 8005f20:	08005fbb 	.word	0x08005fbb
 8005f24:	08005fbb 	.word	0x08005fbb
 8005f28:	08005fbb 	.word	0x08005fbb
 8005f2c:	08005fbb 	.word	0x08005fbb
 8005f30:	08005fbb 	.word	0x08005fbb
 8005f34:	08005fbb 	.word	0x08005fbb
 8005f38:	08005fbb 	.word	0x08005fbb
 8005f3c:	08005fad 	.word	0x08005fad
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d036      	beq.n	8005fb2 <UART_SetConfig+0x6b6>
 8005f44:	e039      	b.n	8005fba <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f46:	f7fe f885 	bl	8004054 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f4c:	e03b      	b.n	8005fc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f4e:	f107 0314 	add.w	r3, r7, #20
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe f894 	bl	8004080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f5c:	e033      	b.n	8005fc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5e:	f107 0308 	add.w	r3, r7, #8
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe f9e0 	bl	8004328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f6c:	e02b      	b.n	8005fc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <UART_SetConfig+0x69c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <UART_SetConfig+0x69c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	08db      	lsrs	r3, r3, #3
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	4a08      	ldr	r2, [pc, #32]	; (8005fa8 <UART_SetConfig+0x6ac>)
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f8c:	e01b      	b.n	8005fc6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <UART_SetConfig+0x6ac>)
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f92:	e018      	b.n	8005fc6 <UART_SetConfig+0x6ca>
 8005f94:	40011400 	.word	0x40011400
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	40007800 	.word	0x40007800
 8005fa0:	40007c00 	.word	0x40007c00
 8005fa4:	58000c00 	.word	0x58000c00
 8005fa8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fac:	4bc4      	ldr	r3, [pc, #784]	; (80062c0 <UART_SetConfig+0x9c4>)
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb0:	e009      	b.n	8005fc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb8:	e005      	b.n	8005fc6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 81da 	beq.w	8006382 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	4abc      	ldr	r2, [pc, #752]	; (80062c4 <UART_SetConfig+0x9c8>)
 8005fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	4413      	add	r3, r2
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d305      	bcc.n	8005ffe <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d903      	bls.n	8006006 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006004:	e1bd      	b.n	8006382 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	4618      	mov	r0, r3
 800600a:	f04f 0100 	mov.w	r1, #0
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	4aac      	ldr	r2, [pc, #688]	; (80062c4 <UART_SetConfig+0x9c8>)
 8006014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006018:	b29a      	uxth	r2, r3
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	f7fa f95b 	bl	80002d8 <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4610      	mov	r0, r2
 8006028:	4619      	mov	r1, r3
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	020b      	lsls	r3, r1, #8
 8006034:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006038:	0202      	lsls	r2, r0, #8
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	6849      	ldr	r1, [r1, #4]
 800603e:	0849      	lsrs	r1, r1, #1
 8006040:	4608      	mov	r0, r1
 8006042:	f04f 0100 	mov.w	r1, #0
 8006046:	1814      	adds	r4, r2, r0
 8006048:	eb43 0501 	adc.w	r5, r3, r1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	461a      	mov	r2, r3
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	f7fa f93d 	bl	80002d8 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4613      	mov	r3, r2
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606c:	d308      	bcc.n	8006080 <UART_SetConfig+0x784>
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006074:	d204      	bcs.n	8006080 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607c:	60da      	str	r2, [r3, #12]
 800607e:	e180      	b.n	8006382 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006086:	e17c      	b.n	8006382 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006090:	f040 80be 	bne.w	8006210 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006098:	2b20      	cmp	r3, #32
 800609a:	dc49      	bgt.n	8006130 <UART_SetConfig+0x834>
 800609c:	2b00      	cmp	r3, #0
 800609e:	db7c      	blt.n	800619a <UART_SetConfig+0x89e>
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d87a      	bhi.n	800619a <UART_SetConfig+0x89e>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0x7b0>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	08006137 	.word	0x08006137
 80060b0:	0800613f 	.word	0x0800613f
 80060b4:	0800619b 	.word	0x0800619b
 80060b8:	0800619b 	.word	0x0800619b
 80060bc:	08006147 	.word	0x08006147
 80060c0:	0800619b 	.word	0x0800619b
 80060c4:	0800619b 	.word	0x0800619b
 80060c8:	0800619b 	.word	0x0800619b
 80060cc:	08006157 	.word	0x08006157
 80060d0:	0800619b 	.word	0x0800619b
 80060d4:	0800619b 	.word	0x0800619b
 80060d8:	0800619b 	.word	0x0800619b
 80060dc:	0800619b 	.word	0x0800619b
 80060e0:	0800619b 	.word	0x0800619b
 80060e4:	0800619b 	.word	0x0800619b
 80060e8:	0800619b 	.word	0x0800619b
 80060ec:	08006167 	.word	0x08006167
 80060f0:	0800619b 	.word	0x0800619b
 80060f4:	0800619b 	.word	0x0800619b
 80060f8:	0800619b 	.word	0x0800619b
 80060fc:	0800619b 	.word	0x0800619b
 8006100:	0800619b 	.word	0x0800619b
 8006104:	0800619b 	.word	0x0800619b
 8006108:	0800619b 	.word	0x0800619b
 800610c:	0800619b 	.word	0x0800619b
 8006110:	0800619b 	.word	0x0800619b
 8006114:	0800619b 	.word	0x0800619b
 8006118:	0800619b 	.word	0x0800619b
 800611c:	0800619b 	.word	0x0800619b
 8006120:	0800619b 	.word	0x0800619b
 8006124:	0800619b 	.word	0x0800619b
 8006128:	0800619b 	.word	0x0800619b
 800612c:	0800618d 	.word	0x0800618d
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d02e      	beq.n	8006192 <UART_SetConfig+0x896>
 8006134:	e031      	b.n	800619a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006136:	f7fd f821 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 800613a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800613c:	e033      	b.n	80061a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800613e:	f7fd f833 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8006142:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006144:	e02f      	b.n	80061a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd ff98 	bl	8004080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006154:	e027      	b.n	80061a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006156:	f107 0308 	add.w	r3, r7, #8
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe f8e4 	bl	8004328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006164:	e01f      	b.n	80061a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006166:	4b58      	ldr	r3, [pc, #352]	; (80062c8 <UART_SetConfig+0x9cc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006172:	4b55      	ldr	r3, [pc, #340]	; (80062c8 <UART_SetConfig+0x9cc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	4a53      	ldr	r2, [pc, #332]	; (80062cc <UART_SetConfig+0x9d0>)
 800617e:	fa22 f303 	lsr.w	r3, r2, r3
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006184:	e00f      	b.n	80061a6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006186:	4b51      	ldr	r3, [pc, #324]	; (80062cc <UART_SetConfig+0x9d0>)
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800618a:	e00c      	b.n	80061a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800618c:	4b4c      	ldr	r3, [pc, #304]	; (80062c0 <UART_SetConfig+0x9c4>)
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006190:	e009      	b.n	80061a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006198:	e005      	b.n	80061a6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 80ea 	beq.w	8006382 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	4a44      	ldr	r2, [pc, #272]	; (80062c4 <UART_SetConfig+0x9c8>)
 80061b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	005a      	lsls	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	441a      	add	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d916      	bls.n	8006208 <UART_SetConfig+0x90c>
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d212      	bcs.n	8006208 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f023 030f 	bic.w	r3, r3, #15
 80061ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061fa:	4313      	orrs	r3, r2
 80061fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006204:	60da      	str	r2, [r3, #12]
 8006206:	e0bc      	b.n	8006382 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800620e:	e0b8      	b.n	8006382 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006210:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006214:	2b20      	cmp	r3, #32
 8006216:	dc4b      	bgt.n	80062b0 <UART_SetConfig+0x9b4>
 8006218:	2b00      	cmp	r3, #0
 800621a:	f2c0 8087 	blt.w	800632c <UART_SetConfig+0xa30>
 800621e:	2b20      	cmp	r3, #32
 8006220:	f200 8084 	bhi.w	800632c <UART_SetConfig+0xa30>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0x930>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062d1 	.word	0x080062d1
 8006234:	0800632d 	.word	0x0800632d
 8006238:	0800632d 	.word	0x0800632d
 800623c:	080062d9 	.word	0x080062d9
 8006240:	0800632d 	.word	0x0800632d
 8006244:	0800632d 	.word	0x0800632d
 8006248:	0800632d 	.word	0x0800632d
 800624c:	080062e9 	.word	0x080062e9
 8006250:	0800632d 	.word	0x0800632d
 8006254:	0800632d 	.word	0x0800632d
 8006258:	0800632d 	.word	0x0800632d
 800625c:	0800632d 	.word	0x0800632d
 8006260:	0800632d 	.word	0x0800632d
 8006264:	0800632d 	.word	0x0800632d
 8006268:	0800632d 	.word	0x0800632d
 800626c:	080062f9 	.word	0x080062f9
 8006270:	0800632d 	.word	0x0800632d
 8006274:	0800632d 	.word	0x0800632d
 8006278:	0800632d 	.word	0x0800632d
 800627c:	0800632d 	.word	0x0800632d
 8006280:	0800632d 	.word	0x0800632d
 8006284:	0800632d 	.word	0x0800632d
 8006288:	0800632d 	.word	0x0800632d
 800628c:	0800632d 	.word	0x0800632d
 8006290:	0800632d 	.word	0x0800632d
 8006294:	0800632d 	.word	0x0800632d
 8006298:	0800632d 	.word	0x0800632d
 800629c:	0800632d 	.word	0x0800632d
 80062a0:	0800632d 	.word	0x0800632d
 80062a4:	0800632d 	.word	0x0800632d
 80062a8:	0800632d 	.word	0x0800632d
 80062ac:	0800631f 	.word	0x0800631f
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d037      	beq.n	8006324 <UART_SetConfig+0xa28>
 80062b4:	e03a      	b.n	800632c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7fc ff61 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 80062ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062bc:	e03c      	b.n	8006338 <UART_SetConfig+0xa3c>
 80062be:	bf00      	nop
 80062c0:	003d0900 	.word	0x003d0900
 80062c4:	08007810 	.word	0x08007810
 80062c8:	58024400 	.word	0x58024400
 80062cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d0:	f7fc ff6a 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 80062d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062d6:	e02f      	b.n	8006338 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fd fecf 	bl	8004080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062e6:	e027      	b.n	8006338 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062e8:	f107 0308 	add.w	r3, r7, #8
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe f81b 	bl	8004328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062f6:	e01f      	b.n	8006338 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f8:	4b2c      	ldr	r3, [pc, #176]	; (80063ac <UART_SetConfig+0xab0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <UART_SetConfig+0xab0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	08db      	lsrs	r3, r3, #3
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <UART_SetConfig+0xab4>)
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006316:	e00f      	b.n	8006338 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <UART_SetConfig+0xab4>)
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800631c:	e00c      	b.n	8006338 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800631e:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <UART_SetConfig+0xab8>)
 8006320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006322:	e009      	b.n	8006338 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800632a:	e005      	b.n	8006338 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006336:	bf00      	nop
    }

    if (pclk != 0U)
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d021      	beq.n	8006382 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <UART_SetConfig+0xabc>)
 8006344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006348:	461a      	mov	r2, r3
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	441a      	add	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d909      	bls.n	800637c <UART_SetConfig+0xa80>
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636e:	d205      	bcs.n	800637c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e002      	b.n	8006382 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800639e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3738      	adds	r7, #56	; 0x38
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bdb0      	pop	{r4, r5, r7, pc}
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
 80063b0:	03d09000 	.word	0x03d09000
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	08007810 	.word	0x08007810

080063bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ba:	d10a      	bne.n	80064d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af02      	add	r7, sp, #8
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006510:	f7fa fe10 	bl	8001134 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b08      	cmp	r3, #8
 8006522:	d10e      	bne.n	8006542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f82f 	bl	8006596 <UART_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e025      	b.n	800658e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b04      	cmp	r3, #4
 800654e:	d10e      	bne.n	800656e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f819 	bl	8006596 <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e00f      	b.n	800658e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b09c      	sub	sp, #112	; 0x70
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a6:	e0a9      	b.n	80066fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	f000 80a5 	beq.w	80066fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fa fdbf 	bl	8001134 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80065c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d140      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065dc:	667b      	str	r3, [r7, #100]	; 0x64
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e6      	bne.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	663b      	str	r3, [r7, #96]	; 0x60
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3308      	adds	r3, #8
 8006618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800661a:	64ba      	str	r2, [r7, #72]	; 0x48
 800661c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e5      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e069      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d051      	beq.n	80066fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006666:	d149      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006670:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
 8006692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	613b      	str	r3, [r7, #16]
   return(result);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066c4:	623a      	str	r2, [r7, #32]
 80066c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69f9      	ldr	r1, [r7, #28]
 80066ca:	6a3a      	ldr	r2, [r7, #32]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e5      	bne.n	80066a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e010      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4013      	ands	r3, r2
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	429a      	cmp	r2, r3
 800670a:	bf0c      	ite	eq
 800670c:	2301      	moveq	r3, #1
 800670e:	2300      	movne	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	429a      	cmp	r2, r3
 8006718:	f43f af46 	beq.w	80065a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3770      	adds	r7, #112	; 0x70
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b095      	sub	sp, #84	; 0x54
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006744:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674e:	643b      	str	r3, [r7, #64]	; 0x40
 8006750:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e6      	bne.n	8006730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	61fb      	str	r3, [r7, #28]
   return(result);
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <UART_EndRxTransfer+0xc8>)
 8006776:	4013      	ands	r3, r2
 8006778:	64bb      	str	r3, [r7, #72]	; 0x48
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e5      	bne.n	8006762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d118      	bne.n	80067d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f023 0310 	bic.w	r3, r3, #16
 80067b2:	647b      	str	r3, [r7, #68]	; 0x44
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80067e4:	bf00      	nop
 80067e6:	3754      	adds	r7, #84	; 0x54
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	effffffe 	.word	0xeffffffe

080067f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff f85c 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	60bb      	str	r3, [r7, #8]
   return(result);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6979      	ldr	r1, [r7, #20]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	613b      	str	r3, [r7, #16]
   return(result);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e6      	bne.n	8006828 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff f827 	bl	80058bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686e:	bf00      	nop
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e027      	b.n	8006918 <HAL_UARTEx_DisableFifoMode+0x66>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2224      	movs	r2, #36	; 0x24
 80068d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e02d      	b.n	8006998 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2224      	movs	r2, #36	; 0x24
 8006948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f84f 	bl	8006a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e02d      	b.n	8006a14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2224      	movs	r2, #36	; 0x24
 80069c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f811 	bl	8006a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d108      	bne.n	8006a3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a3c:	e031      	b.n	8006aa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a3e:	2310      	movs	r3, #16
 8006a40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a42:	2310      	movs	r3, #16
 8006a44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	0e5b      	lsrs	r3, r3, #25
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	0f5b      	lsrs	r3, r3, #29
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	7b3a      	ldrb	r2, [r7, #12]
 8006a6a:	4911      	ldr	r1, [pc, #68]	; (8006ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8006a6c:	5c8a      	ldrb	r2, [r1, r2]
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a72:	7b3a      	ldrb	r2, [r7, #12]
 8006a74:	490f      	ldr	r1, [pc, #60]	; (8006ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8006a76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	7b7a      	ldrb	r2, [r7, #13]
 8006a88:	4909      	ldr	r1, [pc, #36]	; (8006ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8006a8a:	5c8a      	ldrb	r2, [r1, r2]
 8006a8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a90:	7b7a      	ldrb	r2, [r7, #13]
 8006a92:	4908      	ldr	r1, [pc, #32]	; (8006ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8006a94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a96:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	08007828 	.word	0x08007828
 8006ab4:	08007830 	.word	0x08007830

08006ab8 <__libc_init_array>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4d0d      	ldr	r5, [pc, #52]	; (8006af0 <__libc_init_array+0x38>)
 8006abc:	4c0d      	ldr	r4, [pc, #52]	; (8006af4 <__libc_init_array+0x3c>)
 8006abe:	1b64      	subs	r4, r4, r5
 8006ac0:	10a4      	asrs	r4, r4, #2
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	42a6      	cmp	r6, r4
 8006ac6:	d109      	bne.n	8006adc <__libc_init_array+0x24>
 8006ac8:	4d0b      	ldr	r5, [pc, #44]	; (8006af8 <__libc_init_array+0x40>)
 8006aca:	4c0c      	ldr	r4, [pc, #48]	; (8006afc <__libc_init_array+0x44>)
 8006acc:	f000 fe8a 	bl	80077e4 <_init>
 8006ad0:	1b64      	subs	r4, r4, r5
 8006ad2:	10a4      	asrs	r4, r4, #2
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	42a6      	cmp	r6, r4
 8006ad8:	d105      	bne.n	8006ae6 <__libc_init_array+0x2e>
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae0:	4798      	blx	r3
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7ee      	b.n	8006ac4 <__libc_init_array+0xc>
 8006ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aea:	4798      	blx	r3
 8006aec:	3601      	adds	r6, #1
 8006aee:	e7f2      	b.n	8006ad6 <__libc_init_array+0x1e>
 8006af0:	08007a18 	.word	0x08007a18
 8006af4:	08007a18 	.word	0x08007a18
 8006af8:	08007a18 	.word	0x08007a18
 8006afc:	08007a1c 	.word	0x08007a1c

08006b00 <memset>:
 8006b00:	4402      	add	r2, r0
 8006b02:	4603      	mov	r3, r0
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d100      	bne.n	8006b0a <memset+0xa>
 8006b08:	4770      	bx	lr
 8006b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0e:	e7f9      	b.n	8006b04 <memset+0x4>

08006b10 <cos>:
 8006b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b12:	eeb0 7b40 	vmov.f64	d7, d0
 8006b16:	ee17 3a90 	vmov	r3, s15
 8006b1a:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <cos+0x88>)
 8006b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b20:	4293      	cmp	r3, r2
 8006b22:	dc04      	bgt.n	8006b2e <cos+0x1e>
 8006b24:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8006b90 <cos+0x80>
 8006b28:	f000 fa06 	bl	8006f38 <__kernel_cos>
 8006b2c:	e004      	b.n	8006b38 <cos+0x28>
 8006b2e:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <cos+0x8c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	dd04      	ble.n	8006b3e <cos+0x2e>
 8006b34:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006b38:	b005      	add	sp, #20
 8006b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b3e:	4668      	mov	r0, sp
 8006b40:	f000 f8ba 	bl	8006cb8 <__ieee754_rem_pio2>
 8006b44:	f000 0003 	and.w	r0, r0, #3
 8006b48:	2801      	cmp	r0, #1
 8006b4a:	d007      	beq.n	8006b5c <cos+0x4c>
 8006b4c:	2802      	cmp	r0, #2
 8006b4e:	d00e      	beq.n	8006b6e <cos+0x5e>
 8006b50:	b9a0      	cbnz	r0, 8006b7c <cos+0x6c>
 8006b52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b56:	ed9d 0b00 	vldr	d0, [sp]
 8006b5a:	e7e5      	b.n	8006b28 <cos+0x18>
 8006b5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b60:	ed9d 0b00 	vldr	d0, [sp]
 8006b64:	f000 fcd4 	bl	8007510 <__kernel_sin>
 8006b68:	eeb1 0b40 	vneg.f64	d0, d0
 8006b6c:	e7e4      	b.n	8006b38 <cos+0x28>
 8006b6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b72:	ed9d 0b00 	vldr	d0, [sp]
 8006b76:	f000 f9df 	bl	8006f38 <__kernel_cos>
 8006b7a:	e7f5      	b.n	8006b68 <cos+0x58>
 8006b7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b80:	ed9d 0b00 	vldr	d0, [sp]
 8006b84:	2001      	movs	r0, #1
 8006b86:	f000 fcc3 	bl	8007510 <__kernel_sin>
 8006b8a:	e7d5      	b.n	8006b38 <cos+0x28>
 8006b8c:	f3af 8000 	nop.w
	...
 8006b98:	3fe921fb 	.word	0x3fe921fb
 8006b9c:	7fefffff 	.word	0x7fefffff

08006ba0 <sin>:
 8006ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8006ba6:	ee17 3a90 	vmov	r3, s15
 8006baa:	4a1f      	ldr	r2, [pc, #124]	; (8006c28 <sin+0x88>)
 8006bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	dc05      	bgt.n	8006bc0 <sin+0x20>
 8006bb4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8006c20 <sin+0x80>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f000 fca9 	bl	8007510 <__kernel_sin>
 8006bbe:	e004      	b.n	8006bca <sin+0x2a>
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <sin+0x8c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	dd04      	ble.n	8006bd0 <sin+0x30>
 8006bc6:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006bca:	b005      	add	sp, #20
 8006bcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bd0:	4668      	mov	r0, sp
 8006bd2:	f000 f871 	bl	8006cb8 <__ieee754_rem_pio2>
 8006bd6:	f000 0003 	and.w	r0, r0, #3
 8006bda:	2801      	cmp	r0, #1
 8006bdc:	d008      	beq.n	8006bf0 <sin+0x50>
 8006bde:	2802      	cmp	r0, #2
 8006be0:	d00d      	beq.n	8006bfe <sin+0x5e>
 8006be2:	b9b0      	cbnz	r0, 8006c12 <sin+0x72>
 8006be4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006be8:	ed9d 0b00 	vldr	d0, [sp]
 8006bec:	2001      	movs	r0, #1
 8006bee:	e7e4      	b.n	8006bba <sin+0x1a>
 8006bf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bf4:	ed9d 0b00 	vldr	d0, [sp]
 8006bf8:	f000 f99e 	bl	8006f38 <__kernel_cos>
 8006bfc:	e7e5      	b.n	8006bca <sin+0x2a>
 8006bfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c02:	ed9d 0b00 	vldr	d0, [sp]
 8006c06:	2001      	movs	r0, #1
 8006c08:	f000 fc82 	bl	8007510 <__kernel_sin>
 8006c0c:	eeb1 0b40 	vneg.f64	d0, d0
 8006c10:	e7db      	b.n	8006bca <sin+0x2a>
 8006c12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c16:	ed9d 0b00 	vldr	d0, [sp]
 8006c1a:	f000 f98d 	bl	8006f38 <__kernel_cos>
 8006c1e:	e7f5      	b.n	8006c0c <sin+0x6c>
	...
 8006c28:	3fe921fb 	.word	0x3fe921fb
 8006c2c:	7fefffff 	.word	0x7fefffff

08006c30 <ceilf>:
 8006c30:	ee10 3a10 	vmov	r3, s0
 8006c34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006c38:	3a7f      	subs	r2, #127	; 0x7f
 8006c3a:	2a16      	cmp	r2, #22
 8006c3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c40:	dc2a      	bgt.n	8006c98 <ceilf+0x68>
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	da11      	bge.n	8006c6a <ceilf+0x3a>
 8006c46:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006cac <ceilf+0x7c>
 8006c4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c56:	dd05      	ble.n	8006c64 <ceilf+0x34>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	db23      	blt.n	8006ca4 <ceilf+0x74>
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	bf18      	it	ne
 8006c60:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8006c64:	ee00 3a10 	vmov	s0, r3
 8006c68:	4770      	bx	lr
 8006c6a:	4911      	ldr	r1, [pc, #68]	; (8006cb0 <ceilf+0x80>)
 8006c6c:	4111      	asrs	r1, r2
 8006c6e:	420b      	tst	r3, r1
 8006c70:	d0fa      	beq.n	8006c68 <ceilf+0x38>
 8006c72:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006cac <ceilf+0x7c>
 8006c76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c82:	ddef      	ble.n	8006c64 <ceilf+0x34>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bfc2      	ittt	gt
 8006c88:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8006c8c:	fa40 f202 	asrgt.w	r2, r0, r2
 8006c90:	189b      	addgt	r3, r3, r2
 8006c92:	ea23 0301 	bic.w	r3, r3, r1
 8006c96:	e7e5      	b.n	8006c64 <ceilf+0x34>
 8006c98:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006c9c:	d3e4      	bcc.n	8006c68 <ceilf+0x38>
 8006c9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006ca2:	4770      	bx	lr
 8006ca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ca8:	e7dc      	b.n	8006c64 <ceilf+0x34>
 8006caa:	bf00      	nop
 8006cac:	7149f2ca 	.word	0x7149f2ca
 8006cb0:	007fffff 	.word	0x007fffff
 8006cb4:	00000000 	.word	0x00000000

08006cb8 <__ieee754_rem_pio2>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	eeb0 7b40 	vmov.f64	d7, d0
 8006cbe:	ee17 5a90 	vmov	r5, s15
 8006cc2:	4b97      	ldr	r3, [pc, #604]	; (8006f20 <__ieee754_rem_pio2+0x268>)
 8006cc4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006cc8:	429e      	cmp	r6, r3
 8006cca:	b088      	sub	sp, #32
 8006ccc:	4604      	mov	r4, r0
 8006cce:	dc07      	bgt.n	8006ce0 <__ieee754_rem_pio2+0x28>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	ed84 0b00 	vstr	d0, [r4]
 8006cd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e01b      	b.n	8006d18 <__ieee754_rem_pio2+0x60>
 8006ce0:	4b90      	ldr	r3, [pc, #576]	; (8006f24 <__ieee754_rem_pio2+0x26c>)
 8006ce2:	429e      	cmp	r6, r3
 8006ce4:	dc3b      	bgt.n	8006d5e <__ieee754_rem_pio2+0xa6>
 8006ce6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8006ee0 <__ieee754_rem_pio2+0x228>
 8006cf0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8006cf4:	dd19      	ble.n	8006d2a <__ieee754_rem_pio2+0x72>
 8006cf6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006cfa:	429e      	cmp	r6, r3
 8006cfc:	d00e      	beq.n	8006d1c <__ieee754_rem_pio2+0x64>
 8006cfe:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8006ee8 <__ieee754_rem_pio2+0x230>
 8006d02:	ee37 5b46 	vsub.f64	d5, d7, d6
 8006d06:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006d0a:	ed84 5b00 	vstr	d5, [r4]
 8006d0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006d12:	ed84 7b02 	vstr	d7, [r4, #8]
 8006d16:	2001      	movs	r0, #1
 8006d18:	b008      	add	sp, #32
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8006ef0 <__ieee754_rem_pio2+0x238>
 8006d20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006d24:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8006ef8 <__ieee754_rem_pio2+0x240>
 8006d28:	e7eb      	b.n	8006d02 <__ieee754_rem_pio2+0x4a>
 8006d2a:	429e      	cmp	r6, r3
 8006d2c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006d30:	d00e      	beq.n	8006d50 <__ieee754_rem_pio2+0x98>
 8006d32:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8006ee8 <__ieee754_rem_pio2+0x230>
 8006d36:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006d3a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006d3e:	ed84 5b00 	vstr	d5, [r4]
 8006d42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d46:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006d4e:	e7e3      	b.n	8006d18 <__ieee754_rem_pio2+0x60>
 8006d50:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006ef0 <__ieee754_rem_pio2+0x238>
 8006d54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d58:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006ef8 <__ieee754_rem_pio2+0x240>
 8006d5c:	e7eb      	b.n	8006d36 <__ieee754_rem_pio2+0x7e>
 8006d5e:	4b72      	ldr	r3, [pc, #456]	; (8006f28 <__ieee754_rem_pio2+0x270>)
 8006d60:	429e      	cmp	r6, r3
 8006d62:	dc6e      	bgt.n	8006e42 <__ieee754_rem_pio2+0x18a>
 8006d64:	f000 fc2c 	bl	80075c0 <fabs>
 8006d68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006d6c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006f00 <__ieee754_rem_pio2+0x248>
 8006d70:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006d74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006d78:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006d7c:	ee17 0a90 	vmov	r0, s15
 8006d80:	eeb1 4b45 	vneg.f64	d4, d5
 8006d84:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8006ee0 <__ieee754_rem_pio2+0x228>
 8006d88:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006d8c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8006ee8 <__ieee754_rem_pio2+0x230>
 8006d90:	281f      	cmp	r0, #31
 8006d92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006d96:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006d9a:	dc08      	bgt.n	8006dae <__ieee754_rem_pio2+0xf6>
 8006d9c:	4b63      	ldr	r3, [pc, #396]	; (8006f2c <__ieee754_rem_pio2+0x274>)
 8006d9e:	1e42      	subs	r2, r0, #1
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	42b3      	cmp	r3, r6
 8006da6:	d002      	beq.n	8006dae <__ieee754_rem_pio2+0xf6>
 8006da8:	ed84 6b00 	vstr	d6, [r4]
 8006dac:	e024      	b.n	8006df8 <__ieee754_rem_pio2+0x140>
 8006dae:	ee16 3a90 	vmov	r3, s13
 8006db2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006db6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006dc0:	ddf2      	ble.n	8006da8 <__ieee754_rem_pio2+0xf0>
 8006dc2:	eeb0 6b40 	vmov.f64	d6, d0
 8006dc6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8006ef0 <__ieee754_rem_pio2+0x238>
 8006dca:	eea4 6b03 	vfma.f64	d6, d4, d3
 8006dce:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006dd2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006dd6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8006ef8 <__ieee754_rem_pio2+0x240>
 8006dda:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8006dde:	ee36 3b47 	vsub.f64	d3, d6, d7
 8006de2:	ee13 3a90 	vmov	r3, s7
 8006de6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b31      	cmp	r3, #49	; 0x31
 8006dee:	dc17      	bgt.n	8006e20 <__ieee754_rem_pio2+0x168>
 8006df0:	eeb0 0b46 	vmov.f64	d0, d6
 8006df4:	ed84 3b00 	vstr	d3, [r4]
 8006df8:	ed94 6b00 	vldr	d6, [r4]
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006e02:	ee30 7b47 	vsub.f64	d7, d0, d7
 8006e06:	ed84 7b02 	vstr	d7, [r4, #8]
 8006e0a:	da85      	bge.n	8006d18 <__ieee754_rem_pio2+0x60>
 8006e0c:	eeb1 6b46 	vneg.f64	d6, d6
 8006e10:	ed84 6b00 	vstr	d6, [r4]
 8006e14:	eeb1 7b47 	vneg.f64	d7, d7
 8006e18:	4240      	negs	r0, r0
 8006e1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006e1e:	e77b      	b.n	8006d18 <__ieee754_rem_pio2+0x60>
 8006e20:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8006f08 <__ieee754_rem_pio2+0x250>
 8006e24:	eeb0 0b46 	vmov.f64	d0, d6
 8006e28:	eea4 0b03 	vfma.f64	d0, d4, d3
 8006e2c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8006e30:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006f10 <__ieee754_rem_pio2+0x258>
 8006e34:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006e38:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8006e3c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006e40:	e7b2      	b.n	8006da8 <__ieee754_rem_pio2+0xf0>
 8006e42:	4b3b      	ldr	r3, [pc, #236]	; (8006f30 <__ieee754_rem_pio2+0x278>)
 8006e44:	429e      	cmp	r6, r3
 8006e46:	dd06      	ble.n	8006e56 <__ieee754_rem_pio2+0x19e>
 8006e48:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006e4c:	ed80 7b02 	vstr	d7, [r0, #8]
 8006e50:	ed80 7b00 	vstr	d7, [r0]
 8006e54:	e742      	b.n	8006cdc <__ieee754_rem_pio2+0x24>
 8006e56:	1532      	asrs	r2, r6, #20
 8006e58:	ee10 0a10 	vmov	r0, s0
 8006e5c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006e60:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006e64:	ec41 0b17 	vmov	d7, r0, r1
 8006e68:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006e6c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8006f18 <__ieee754_rem_pio2+0x260>
 8006e70:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006e74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e78:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006e7c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e80:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006e84:	a902      	add	r1, sp, #8
 8006e86:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006e8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e8e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006e92:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e9a:	2603      	movs	r6, #3
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	ed91 7b04 	vldr	d7, [r1, #16]
 8006ea2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eaa:	4633      	mov	r3, r6
 8006eac:	f1a1 0108 	sub.w	r1, r1, #8
 8006eb0:	f106 36ff 	add.w	r6, r6, #4294967295
 8006eb4:	d0f3      	beq.n	8006e9e <__ieee754_rem_pio2+0x1e6>
 8006eb6:	491f      	ldr	r1, [pc, #124]	; (8006f34 <__ieee754_rem_pio2+0x27c>)
 8006eb8:	9101      	str	r1, [sp, #4]
 8006eba:	2102      	movs	r1, #2
 8006ebc:	9100      	str	r1, [sp, #0]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f000 f8a6 	bl	8007010 <__kernel_rem_pio2>
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	f6bf af27 	bge.w	8006d18 <__ieee754_rem_pio2+0x60>
 8006eca:	ed94 7b00 	vldr	d7, [r4]
 8006ece:	eeb1 7b47 	vneg.f64	d7, d7
 8006ed2:	ed84 7b00 	vstr	d7, [r4]
 8006ed6:	ed94 7b02 	vldr	d7, [r4, #8]
 8006eda:	e79b      	b.n	8006e14 <__ieee754_rem_pio2+0x15c>
 8006edc:	f3af 8000 	nop.w
 8006ee0:	54400000 	.word	0x54400000
 8006ee4:	3ff921fb 	.word	0x3ff921fb
 8006ee8:	1a626331 	.word	0x1a626331
 8006eec:	3dd0b461 	.word	0x3dd0b461
 8006ef0:	1a600000 	.word	0x1a600000
 8006ef4:	3dd0b461 	.word	0x3dd0b461
 8006ef8:	2e037073 	.word	0x2e037073
 8006efc:	3ba3198a 	.word	0x3ba3198a
 8006f00:	6dc9c883 	.word	0x6dc9c883
 8006f04:	3fe45f30 	.word	0x3fe45f30
 8006f08:	2e000000 	.word	0x2e000000
 8006f0c:	3ba3198a 	.word	0x3ba3198a
 8006f10:	252049c1 	.word	0x252049c1
 8006f14:	397b839a 	.word	0x397b839a
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	41700000 	.word	0x41700000
 8006f20:	3fe921fb 	.word	0x3fe921fb
 8006f24:	4002d97b 	.word	0x4002d97b
 8006f28:	413921fb 	.word	0x413921fb
 8006f2c:	08007838 	.word	0x08007838
 8006f30:	7fefffff 	.word	0x7fefffff
 8006f34:	080078b8 	.word	0x080078b8

08006f38 <__kernel_cos>:
 8006f38:	ee10 1a90 	vmov	r1, s1
 8006f3c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8006f40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f44:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006f48:	da05      	bge.n	8006f56 <__kernel_cos+0x1e>
 8006f4a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006f4e:	ee17 3a90 	vmov	r3, s15
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d03d      	beq.n	8006fd2 <__kernel_cos+0x9a>
 8006f56:	ee20 3b00 	vmul.f64	d3, d0, d0
 8006f5a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8006fd8 <__kernel_cos+0xa0>
 8006f5e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8006fe0 <__kernel_cos+0xa8>
 8006f62:	eea3 6b07 	vfma.f64	d6, d3, d7
 8006f66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006fe8 <__kernel_cos+0xb0>
 8006f6a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006f6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8006ff0 <__kernel_cos+0xb8>
 8006f72:	eea7 6b03 	vfma.f64	d6, d7, d3
 8006f76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006ff8 <__kernel_cos+0xc0>
 8006f7a:	4b23      	ldr	r3, [pc, #140]	; (8007008 <__kernel_cos+0xd0>)
 8006f7c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006f80:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8007000 <__kernel_cos+0xc8>
 8006f84:	4299      	cmp	r1, r3
 8006f86:	eea7 6b03 	vfma.f64	d6, d7, d3
 8006f8a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006f8e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8006f92:	ee23 7b07 	vmul.f64	d7, d3, d7
 8006f96:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8006f9a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8006f9e:	dc04      	bgt.n	8006faa <__kernel_cos+0x72>
 8006fa0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8006fa4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8006fa8:	4770      	bx	lr
 8006faa:	4b18      	ldr	r3, [pc, #96]	; (800700c <__kernel_cos+0xd4>)
 8006fac:	4299      	cmp	r1, r3
 8006fae:	dc0d      	bgt.n	8006fcc <__kernel_cos+0x94>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8006fb6:	ec43 2b15 	vmov	d5, r2, r3
 8006fba:	ee34 0b45 	vsub.f64	d0, d4, d5
 8006fbe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006fc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006fc6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8006fca:	4770      	bx	lr
 8006fcc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8006fd0:	e7f3      	b.n	8006fba <__kernel_cos+0x82>
 8006fd2:	eeb0 0b44 	vmov.f64	d0, d4
 8006fd6:	4770      	bx	lr
 8006fd8:	be8838d4 	.word	0xbe8838d4
 8006fdc:	bda8fae9 	.word	0xbda8fae9
 8006fe0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006fe4:	3e21ee9e 	.word	0x3e21ee9e
 8006fe8:	809c52ad 	.word	0x809c52ad
 8006fec:	be927e4f 	.word	0xbe927e4f
 8006ff0:	19cb1590 	.word	0x19cb1590
 8006ff4:	3efa01a0 	.word	0x3efa01a0
 8006ff8:	16c15177 	.word	0x16c15177
 8006ffc:	bf56c16c 	.word	0xbf56c16c
 8007000:	5555554c 	.word	0x5555554c
 8007004:	3fa55555 	.word	0x3fa55555
 8007008:	3fd33332 	.word	0x3fd33332
 800700c:	3fe90000 	.word	0x3fe90000

08007010 <__kernel_rem_pio2>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	ed2d 8b06 	vpush	{d8-d10}
 8007018:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800701c:	469b      	mov	fp, r3
 800701e:	460f      	mov	r7, r1
 8007020:	4bcf      	ldr	r3, [pc, #828]	; (8007360 <__kernel_rem_pio2+0x350>)
 8007022:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8007024:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8007028:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800702c:	9000      	str	r0, [sp, #0]
 800702e:	f112 0f14 	cmn.w	r2, #20
 8007032:	bfa8      	it	ge
 8007034:	2318      	movge	r3, #24
 8007036:	f10b 31ff 	add.w	r1, fp, #4294967295
 800703a:	bfb8      	it	lt
 800703c:	2300      	movlt	r3, #0
 800703e:	f06f 0417 	mvn.w	r4, #23
 8007042:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8007348 <__kernel_rem_pio2+0x338>
 8007046:	bfa4      	itt	ge
 8007048:	f1a2 0a03 	subge.w	sl, r2, #3
 800704c:	fb9a f3f3 	sdivge	r3, sl, r3
 8007050:	fb03 4404 	mla	r4, r3, r4, r4
 8007054:	1a5d      	subs	r5, r3, r1
 8007056:	4414      	add	r4, r2
 8007058:	eb09 0601 	add.w	r6, r9, r1
 800705c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8007060:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8007064:	2200      	movs	r2, #0
 8007066:	42b2      	cmp	r2, r6
 8007068:	dd12      	ble.n	8007090 <__kernel_rem_pio2+0x80>
 800706a:	aa18      	add	r2, sp, #96	; 0x60
 800706c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8007070:	460e      	mov	r6, r1
 8007072:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8007076:	f1cb 0a01 	rsb	sl, fp, #1
 800707a:	eb0a 0006 	add.w	r0, sl, r6
 800707e:	4581      	cmp	r9, r0
 8007080:	db25      	blt.n	80070ce <__kernel_rem_pio2+0xbe>
 8007082:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8007348 <__kernel_rem_pio2+0x338>
 8007086:	f8dd e000 	ldr.w	lr, [sp]
 800708a:	4615      	mov	r5, r2
 800708c:	2000      	movs	r0, #0
 800708e:	e015      	b.n	80070bc <__kernel_rem_pio2+0xac>
 8007090:	42d5      	cmn	r5, r2
 8007092:	d409      	bmi.n	80070a8 <__kernel_rem_pio2+0x98>
 8007094:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8007098:	ee07 0a90 	vmov	s15, r0
 800709c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a0:	eca8 7b02 	vstmia	r8!, {d7}
 80070a4:	3201      	adds	r2, #1
 80070a6:	e7de      	b.n	8007066 <__kernel_rem_pio2+0x56>
 80070a8:	eeb0 7b46 	vmov.f64	d7, d6
 80070ac:	e7f8      	b.n	80070a0 <__kernel_rem_pio2+0x90>
 80070ae:	ecbe 5b02 	vldmia	lr!, {d5}
 80070b2:	ed95 6b00 	vldr	d6, [r5]
 80070b6:	3001      	adds	r0, #1
 80070b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80070bc:	4288      	cmp	r0, r1
 80070be:	f1a5 0508 	sub.w	r5, r5, #8
 80070c2:	ddf4      	ble.n	80070ae <__kernel_rem_pio2+0x9e>
 80070c4:	eca8 7b02 	vstmia	r8!, {d7}
 80070c8:	3208      	adds	r2, #8
 80070ca:	3601      	adds	r6, #1
 80070cc:	e7d5      	b.n	800707a <__kernel_rem_pio2+0x6a>
 80070ce:	aa04      	add	r2, sp, #16
 80070d0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8007350 <__kernel_rem_pio2+0x340>
 80070d4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8007358 <__kernel_rem_pio2+0x348>
 80070d8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80070dc:	9201      	str	r2, [sp, #4]
 80070de:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80070e2:	464e      	mov	r6, r9
 80070e4:	ab90      	add	r3, sp, #576	; 0x240
 80070e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070ea:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80070ee:	ab04      	add	r3, sp, #16
 80070f0:	4618      	mov	r0, r3
 80070f2:	4632      	mov	r2, r6
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	dc4e      	bgt.n	8007196 <__kernel_rem_pio2+0x186>
 80070f8:	4620      	mov	r0, r4
 80070fa:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80070fe:	f000 fadf 	bl	80076c0 <scalbn>
 8007102:	eeb0 8b40 	vmov.f64	d8, d0
 8007106:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800710a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800710e:	f000 fa63 	bl	80075d8 <floor>
 8007112:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8007116:	eea0 8b47 	vfms.f64	d8, d0, d7
 800711a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800711e:	2c00      	cmp	r4, #0
 8007120:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8007124:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8007128:	ee38 8b40 	vsub.f64	d8, d8, d0
 800712c:	ee17 8a90 	vmov	r8, s15
 8007130:	dd46      	ble.n	80071c0 <__kernel_rem_pio2+0x1b0>
 8007132:	1e70      	subs	r0, r6, #1
 8007134:	aa04      	add	r2, sp, #16
 8007136:	f1c4 0c18 	rsb	ip, r4, #24
 800713a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800713e:	fa45 f20c 	asr.w	r2, r5, ip
 8007142:	4490      	add	r8, r2
 8007144:	fa02 f20c 	lsl.w	r2, r2, ip
 8007148:	1aad      	subs	r5, r5, r2
 800714a:	aa04      	add	r2, sp, #16
 800714c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8007150:	f1c4 0217 	rsb	r2, r4, #23
 8007154:	4115      	asrs	r5, r2
 8007156:	2d00      	cmp	r5, #0
 8007158:	dd41      	ble.n	80071de <__kernel_rem_pio2+0x1ce>
 800715a:	f04f 0c00 	mov.w	ip, #0
 800715e:	f108 0801 	add.w	r8, r8, #1
 8007162:	4660      	mov	r0, ip
 8007164:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8007168:	4566      	cmp	r6, ip
 800716a:	dc69      	bgt.n	8007240 <__kernel_rem_pio2+0x230>
 800716c:	2c00      	cmp	r4, #0
 800716e:	dd03      	ble.n	8007178 <__kernel_rem_pio2+0x168>
 8007170:	2c01      	cmp	r4, #1
 8007172:	d076      	beq.n	8007262 <__kernel_rem_pio2+0x252>
 8007174:	2c02      	cmp	r4, #2
 8007176:	d07f      	beq.n	8007278 <__kernel_rem_pio2+0x268>
 8007178:	2d02      	cmp	r5, #2
 800717a:	d130      	bne.n	80071de <__kernel_rem_pio2+0x1ce>
 800717c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007180:	ee30 8b48 	vsub.f64	d8, d0, d8
 8007184:	b358      	cbz	r0, 80071de <__kernel_rem_pio2+0x1ce>
 8007186:	4620      	mov	r0, r4
 8007188:	9102      	str	r1, [sp, #8]
 800718a:	f000 fa99 	bl	80076c0 <scalbn>
 800718e:	9902      	ldr	r1, [sp, #8]
 8007190:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007194:	e023      	b.n	80071de <__kernel_rem_pio2+0x1ce>
 8007196:	ee20 7b09 	vmul.f64	d7, d0, d9
 800719a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800719e:	3a01      	subs	r2, #1
 80071a0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80071a4:	ad68      	add	r5, sp, #416	; 0x1a0
 80071a6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80071aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80071ae:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80071b2:	eca0 0a01 	vstmia	r0!, {s0}
 80071b6:	ed95 0b00 	vldr	d0, [r5]
 80071ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 80071be:	e799      	b.n	80070f4 <__kernel_rem_pio2+0xe4>
 80071c0:	d105      	bne.n	80071ce <__kernel_rem_pio2+0x1be>
 80071c2:	1e72      	subs	r2, r6, #1
 80071c4:	a804      	add	r0, sp, #16
 80071c6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80071ca:	15ed      	asrs	r5, r5, #23
 80071cc:	e7c3      	b.n	8007156 <__kernel_rem_pio2+0x146>
 80071ce:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80071d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80071d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071da:	da2f      	bge.n	800723c <__kernel_rem_pio2+0x22c>
 80071dc:	2500      	movs	r5, #0
 80071de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e6:	f040 8087 	bne.w	80072f8 <__kernel_rem_pio2+0x2e8>
 80071ea:	1e73      	subs	r3, r6, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f04f 0c00 	mov.w	ip, #0
 80071f2:	4548      	cmp	r0, r9
 80071f4:	da47      	bge.n	8007286 <__kernel_rem_pio2+0x276>
 80071f6:	f1bc 0f00 	cmp.w	ip, #0
 80071fa:	d070      	beq.n	80072de <__kernel_rem_pio2+0x2ce>
 80071fc:	aa04      	add	r2, sp, #16
 80071fe:	3c18      	subs	r4, #24
 8007200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007204:	2a00      	cmp	r2, #0
 8007206:	d075      	beq.n	80072f4 <__kernel_rem_pio2+0x2e4>
 8007208:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800720c:	4620      	mov	r0, r4
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	f000 fa56 	bl	80076c0 <scalbn>
 8007214:	9b00      	ldr	r3, [sp, #0]
 8007216:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8007350 <__kernel_rem_pio2+0x340>
 800721a:	461a      	mov	r2, r3
 800721c:	2a00      	cmp	r2, #0
 800721e:	f280 80ac 	bge.w	800737a <__kernel_rem_pio2+0x36a>
 8007222:	4619      	mov	r1, r3
 8007224:	2000      	movs	r0, #0
 8007226:	2900      	cmp	r1, #0
 8007228:	f2c0 80cd 	blt.w	80073c6 <__kernel_rem_pio2+0x3b6>
 800722c:	aa68      	add	r2, sp, #416	; 0x1a0
 800722e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8007232:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8007348 <__kernel_rem_pio2+0x338>
 8007236:	4e4b      	ldr	r6, [pc, #300]	; (8007364 <__kernel_rem_pio2+0x354>)
 8007238:	2200      	movs	r2, #0
 800723a:	e0b8      	b.n	80073ae <__kernel_rem_pio2+0x39e>
 800723c:	2502      	movs	r5, #2
 800723e:	e78c      	b.n	800715a <__kernel_rem_pio2+0x14a>
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	b948      	cbnz	r0, 8007258 <__kernel_rem_pio2+0x248>
 8007244:	b11a      	cbz	r2, 800724e <__kernel_rem_pio2+0x23e>
 8007246:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	2201      	movs	r2, #1
 800724e:	f10c 0c01 	add.w	ip, ip, #1
 8007252:	3304      	adds	r3, #4
 8007254:	4610      	mov	r0, r2
 8007256:	e787      	b.n	8007168 <__kernel_rem_pio2+0x158>
 8007258:	ebae 0202 	sub.w	r2, lr, r2
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	4602      	mov	r2, r0
 8007260:	e7f5      	b.n	800724e <__kernel_rem_pio2+0x23e>
 8007262:	1e72      	subs	r2, r6, #1
 8007264:	ab04      	add	r3, sp, #16
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800726e:	f10d 0c10 	add.w	ip, sp, #16
 8007272:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8007276:	e77f      	b.n	8007178 <__kernel_rem_pio2+0x168>
 8007278:	1e72      	subs	r2, r6, #1
 800727a:	ab04      	add	r3, sp, #16
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007284:	e7f3      	b.n	800726e <__kernel_rem_pio2+0x25e>
 8007286:	aa04      	add	r2, sp, #16
 8007288:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800728c:	3801      	subs	r0, #1
 800728e:	ea4c 0c02 	orr.w	ip, ip, r2
 8007292:	e7ae      	b.n	80071f2 <__kernel_rem_pio2+0x1e2>
 8007294:	3001      	adds	r0, #1
 8007296:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800729a:	2a00      	cmp	r2, #0
 800729c:	d0fa      	beq.n	8007294 <__kernel_rem_pio2+0x284>
 800729e:	eb06 020b 	add.w	r2, r6, fp
 80072a2:	ad18      	add	r5, sp, #96	; 0x60
 80072a4:	1c73      	adds	r3, r6, #1
 80072a6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80072aa:	4406      	add	r6, r0
 80072ac:	429e      	cmp	r6, r3
 80072ae:	f6ff af19 	blt.w	80070e4 <__kernel_rem_pio2+0xd4>
 80072b2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80072b6:	9d00      	ldr	r5, [sp, #0]
 80072b8:	ee07 0a90 	vmov	s15, r0
 80072bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072c0:	2000      	movs	r0, #0
 80072c2:	eca2 7b02 	vstmia	r2!, {d7}
 80072c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007348 <__kernel_rem_pio2+0x338>
 80072ca:	4694      	mov	ip, r2
 80072cc:	4288      	cmp	r0, r1
 80072ce:	dd09      	ble.n	80072e4 <__kernel_rem_pio2+0x2d4>
 80072d0:	a868      	add	r0, sp, #416	; 0x1a0
 80072d2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80072d6:	ed80 7b00 	vstr	d7, [r0]
 80072da:	3301      	adds	r3, #1
 80072dc:	e7e6      	b.n	80072ac <__kernel_rem_pio2+0x29c>
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	2001      	movs	r0, #1
 80072e2:	e7d8      	b.n	8007296 <__kernel_rem_pio2+0x286>
 80072e4:	ecb5 5b02 	vldmia	r5!, {d5}
 80072e8:	ed3c 6b02 	vldmdb	ip!, {d6}
 80072ec:	3001      	adds	r0, #1
 80072ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 80072f2:	e7eb      	b.n	80072cc <__kernel_rem_pio2+0x2bc>
 80072f4:	3b01      	subs	r3, #1
 80072f6:	e781      	b.n	80071fc <__kernel_rem_pio2+0x1ec>
 80072f8:	4260      	negs	r0, r4
 80072fa:	eeb0 0b48 	vmov.f64	d0, d8
 80072fe:	f000 f9df 	bl	80076c0 <scalbn>
 8007302:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8007358 <__kernel_rem_pio2+0x348>
 8007306:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800730a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730e:	db2b      	blt.n	8007368 <__kernel_rem_pio2+0x358>
 8007310:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007350 <__kernel_rem_pio2+0x340>
 8007314:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007318:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800731c:	aa04      	add	r2, sp, #16
 800731e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8007322:	eea5 0b46 	vfms.f64	d0, d5, d6
 8007326:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800732a:	a904      	add	r1, sp, #16
 800732c:	ee10 3a10 	vmov	r3, s0
 8007330:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007334:	ee17 2a10 	vmov	r2, s14
 8007338:	1c73      	adds	r3, r6, #1
 800733a:	3418      	adds	r4, #24
 800733c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007340:	e762      	b.n	8007208 <__kernel_rem_pio2+0x1f8>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
	...
 8007354:	3e700000 	.word	0x3e700000
 8007358:	00000000 	.word	0x00000000
 800735c:	41700000 	.word	0x41700000
 8007360:	08007a00 	.word	0x08007a00
 8007364:	080079c0 	.word	0x080079c0
 8007368:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800736c:	aa04      	add	r2, sp, #16
 800736e:	ee10 3a10 	vmov	r3, s0
 8007372:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007376:	4633      	mov	r3, r6
 8007378:	e746      	b.n	8007208 <__kernel_rem_pio2+0x1f8>
 800737a:	a804      	add	r0, sp, #16
 800737c:	a968      	add	r1, sp, #416	; 0x1a0
 800737e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007382:	9000      	str	r0, [sp, #0]
 8007384:	ee07 0a90 	vmov	s15, r0
 8007388:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800738c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007390:	3a01      	subs	r2, #1
 8007392:	ee27 7b00 	vmul.f64	d7, d7, d0
 8007396:	ee20 0b06 	vmul.f64	d0, d0, d6
 800739a:	ed81 7b00 	vstr	d7, [r1]
 800739e:	e73d      	b.n	800721c <__kernel_rem_pio2+0x20c>
 80073a0:	ecb6 5b02 	vldmia	r6!, {d5}
 80073a4:	ecb4 6b02 	vldmia	r4!, {d6}
 80073a8:	3201      	adds	r2, #1
 80073aa:	eea5 7b06 	vfma.f64	d7, d5, d6
 80073ae:	454a      	cmp	r2, r9
 80073b0:	dc01      	bgt.n	80073b6 <__kernel_rem_pio2+0x3a6>
 80073b2:	4290      	cmp	r0, r2
 80073b4:	daf4      	bge.n	80073a0 <__kernel_rem_pio2+0x390>
 80073b6:	aa40      	add	r2, sp, #256	; 0x100
 80073b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80073bc:	ed82 7b00 	vstr	d7, [r2]
 80073c0:	3901      	subs	r1, #1
 80073c2:	3001      	adds	r0, #1
 80073c4:	e72f      	b.n	8007226 <__kernel_rem_pio2+0x216>
 80073c6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80073c8:	2a02      	cmp	r2, #2
 80073ca:	dc0a      	bgt.n	80073e2 <__kernel_rem_pio2+0x3d2>
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	dc5a      	bgt.n	8007486 <__kernel_rem_pio2+0x476>
 80073d0:	d039      	beq.n	8007446 <__kernel_rem_pio2+0x436>
 80073d2:	f008 0007 	and.w	r0, r8, #7
 80073d6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80073da:	ecbd 8b06 	vpop	{d8-d10}
 80073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80073e4:	2a03      	cmp	r2, #3
 80073e6:	d1f4      	bne.n	80073d2 <__kernel_rem_pio2+0x3c2>
 80073e8:	aa40      	add	r2, sp, #256	; 0x100
 80073ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f1a1 0108 	sub.w	r1, r1, #8
 80073f8:	dc52      	bgt.n	80074a0 <__kernel_rem_pio2+0x490>
 80073fa:	4619      	mov	r1, r3
 80073fc:	2901      	cmp	r1, #1
 80073fe:	f1a2 0208 	sub.w	r2, r2, #8
 8007402:	dc5d      	bgt.n	80074c0 <__kernel_rem_pio2+0x4b0>
 8007404:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8007508 <__kernel_rem_pio2+0x4f8>
 8007408:	2b01      	cmp	r3, #1
 800740a:	dc69      	bgt.n	80074e0 <__kernel_rem_pio2+0x4d0>
 800740c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8007410:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8007414:	2d00      	cmp	r5, #0
 8007416:	d16c      	bne.n	80074f2 <__kernel_rem_pio2+0x4e2>
 8007418:	ed87 5b00 	vstr	d5, [r7]
 800741c:	ed87 6b02 	vstr	d6, [r7, #8]
 8007420:	ed87 7b04 	vstr	d7, [r7, #16]
 8007424:	e7d5      	b.n	80073d2 <__kernel_rem_pio2+0x3c2>
 8007426:	aa40      	add	r2, sp, #256	; 0x100
 8007428:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800742c:	ed92 6b00 	vldr	d6, [r2]
 8007430:	3b01      	subs	r3, #1
 8007432:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007436:	2b00      	cmp	r3, #0
 8007438:	daf5      	bge.n	8007426 <__kernel_rem_pio2+0x416>
 800743a:	b10d      	cbz	r5, 8007440 <__kernel_rem_pio2+0x430>
 800743c:	eeb1 7b47 	vneg.f64	d7, d7
 8007440:	ed87 7b00 	vstr	d7, [r7]
 8007444:	e7c5      	b.n	80073d2 <__kernel_rem_pio2+0x3c2>
 8007446:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007508 <__kernel_rem_pio2+0x4f8>
 800744a:	e7f4      	b.n	8007436 <__kernel_rem_pio2+0x426>
 800744c:	a940      	add	r1, sp, #256	; 0x100
 800744e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007452:	ed91 7b00 	vldr	d7, [r1]
 8007456:	3a01      	subs	r2, #1
 8007458:	ee36 6b07 	vadd.f64	d6, d6, d7
 800745c:	2a00      	cmp	r2, #0
 800745e:	daf5      	bge.n	800744c <__kernel_rem_pio2+0x43c>
 8007460:	b1ad      	cbz	r5, 800748e <__kernel_rem_pio2+0x47e>
 8007462:	eeb1 7b46 	vneg.f64	d7, d6
 8007466:	ed87 7b00 	vstr	d7, [r7]
 800746a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800746e:	a942      	add	r1, sp, #264	; 0x108
 8007470:	2201      	movs	r2, #1
 8007472:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007476:	4293      	cmp	r3, r2
 8007478:	da0c      	bge.n	8007494 <__kernel_rem_pio2+0x484>
 800747a:	b10d      	cbz	r5, 8007480 <__kernel_rem_pio2+0x470>
 800747c:	eeb1 7b47 	vneg.f64	d7, d7
 8007480:	ed87 7b02 	vstr	d7, [r7, #8]
 8007484:	e7a5      	b.n	80073d2 <__kernel_rem_pio2+0x3c2>
 8007486:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8007508 <__kernel_rem_pio2+0x4f8>
 800748a:	461a      	mov	r2, r3
 800748c:	e7e6      	b.n	800745c <__kernel_rem_pio2+0x44c>
 800748e:	eeb0 7b46 	vmov.f64	d7, d6
 8007492:	e7e8      	b.n	8007466 <__kernel_rem_pio2+0x456>
 8007494:	ecb1 6b02 	vldmia	r1!, {d6}
 8007498:	3201      	adds	r2, #1
 800749a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800749e:	e7ea      	b.n	8007476 <__kernel_rem_pio2+0x466>
 80074a0:	ed91 7b00 	vldr	d7, [r1]
 80074a4:	ed91 5b02 	vldr	d5, [r1, #8]
 80074a8:	3801      	subs	r0, #1
 80074aa:	ee37 6b05 	vadd.f64	d6, d7, d5
 80074ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074b2:	ed81 6b00 	vstr	d6, [r1]
 80074b6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80074ba:	ed81 7b02 	vstr	d7, [r1, #8]
 80074be:	e798      	b.n	80073f2 <__kernel_rem_pio2+0x3e2>
 80074c0:	ed92 7b00 	vldr	d7, [r2]
 80074c4:	ed92 5b02 	vldr	d5, [r2, #8]
 80074c8:	3901      	subs	r1, #1
 80074ca:	ee37 6b05 	vadd.f64	d6, d7, d5
 80074ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074d2:	ed82 6b00 	vstr	d6, [r2]
 80074d6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80074da:	ed82 7b02 	vstr	d7, [r2, #8]
 80074de:	e78d      	b.n	80073fc <__kernel_rem_pio2+0x3ec>
 80074e0:	aa40      	add	r2, sp, #256	; 0x100
 80074e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80074e6:	ed92 6b00 	vldr	d6, [r2]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80074f0:	e78a      	b.n	8007408 <__kernel_rem_pio2+0x3f8>
 80074f2:	eeb1 5b45 	vneg.f64	d5, d5
 80074f6:	eeb1 6b46 	vneg.f64	d6, d6
 80074fa:	ed87 5b00 	vstr	d5, [r7]
 80074fe:	eeb1 7b47 	vneg.f64	d7, d7
 8007502:	ed87 6b02 	vstr	d6, [r7, #8]
 8007506:	e78b      	b.n	8007420 <__kernel_rem_pio2+0x410>
	...

08007510 <__kernel_sin>:
 8007510:	ee10 3a90 	vmov	r3, s1
 8007514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007518:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800751c:	da04      	bge.n	8007528 <__kernel_sin+0x18>
 800751e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8007522:	ee17 3a90 	vmov	r3, s15
 8007526:	b35b      	cbz	r3, 8007580 <__kernel_sin+0x70>
 8007528:	ee20 6b00 	vmul.f64	d6, d0, d0
 800752c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8007530:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007588 <__kernel_sin+0x78>
 8007534:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007590 <__kernel_sin+0x80>
 8007538:	eea6 4b07 	vfma.f64	d4, d6, d7
 800753c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007598 <__kernel_sin+0x88>
 8007540:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007544:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80075a0 <__kernel_sin+0x90>
 8007548:	eea7 4b06 	vfma.f64	d4, d7, d6
 800754c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80075a8 <__kernel_sin+0x98>
 8007550:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007554:	b930      	cbnz	r0, 8007564 <__kernel_sin+0x54>
 8007556:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80075b0 <__kernel_sin+0xa0>
 800755a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800755e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8007562:	4770      	bx	lr
 8007564:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8007568:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800756c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8007570:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8007574:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80075b8 <__kernel_sin+0xa8>
 8007578:	eea5 1b07 	vfma.f64	d1, d5, d7
 800757c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	f3af 8000 	nop.w
 8007588:	5acfd57c 	.word	0x5acfd57c
 800758c:	3de5d93a 	.word	0x3de5d93a
 8007590:	8a2b9ceb 	.word	0x8a2b9ceb
 8007594:	be5ae5e6 	.word	0xbe5ae5e6
 8007598:	57b1fe7d 	.word	0x57b1fe7d
 800759c:	3ec71de3 	.word	0x3ec71de3
 80075a0:	19c161d5 	.word	0x19c161d5
 80075a4:	bf2a01a0 	.word	0xbf2a01a0
 80075a8:	1110f8a6 	.word	0x1110f8a6
 80075ac:	3f811111 	.word	0x3f811111
 80075b0:	55555549 	.word	0x55555549
 80075b4:	bfc55555 	.word	0xbfc55555
 80075b8:	55555549 	.word	0x55555549
 80075bc:	3fc55555 	.word	0x3fc55555

080075c0 <fabs>:
 80075c0:	ec51 0b10 	vmov	r0, r1, d0
 80075c4:	ee10 2a10 	vmov	r2, s0
 80075c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075cc:	ec43 2b10 	vmov	d0, r2, r3
 80075d0:	4770      	bx	lr
 80075d2:	0000      	movs	r0, r0
 80075d4:	0000      	movs	r0, r0
	...

080075d8 <floor>:
 80075d8:	ee10 1a90 	vmov	r1, s1
 80075dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80075e4:	2b13      	cmp	r3, #19
 80075e6:	b530      	push	{r4, r5, lr}
 80075e8:	ee10 0a10 	vmov	r0, s0
 80075ec:	ee10 5a10 	vmov	r5, s0
 80075f0:	dc31      	bgt.n	8007656 <floor+0x7e>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da15      	bge.n	8007622 <floor+0x4a>
 80075f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80076b0 <floor+0xd8>
 80075fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80075fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007606:	dd07      	ble.n	8007618 <floor+0x40>
 8007608:	2900      	cmp	r1, #0
 800760a:	da4e      	bge.n	80076aa <floor+0xd2>
 800760c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007610:	4318      	orrs	r0, r3
 8007612:	d001      	beq.n	8007618 <floor+0x40>
 8007614:	4928      	ldr	r1, [pc, #160]	; (80076b8 <floor+0xe0>)
 8007616:	2000      	movs	r0, #0
 8007618:	460b      	mov	r3, r1
 800761a:	4602      	mov	r2, r0
 800761c:	ec43 2b10 	vmov	d0, r2, r3
 8007620:	e020      	b.n	8007664 <floor+0x8c>
 8007622:	4a26      	ldr	r2, [pc, #152]	; (80076bc <floor+0xe4>)
 8007624:	411a      	asrs	r2, r3
 8007626:	ea01 0402 	and.w	r4, r1, r2
 800762a:	4304      	orrs	r4, r0
 800762c:	d01a      	beq.n	8007664 <floor+0x8c>
 800762e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80076b0 <floor+0xd8>
 8007632:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007636:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	ddeb      	ble.n	8007618 <floor+0x40>
 8007640:	2900      	cmp	r1, #0
 8007642:	bfbe      	ittt	lt
 8007644:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8007648:	fa40 f303 	asrlt.w	r3, r0, r3
 800764c:	18c9      	addlt	r1, r1, r3
 800764e:	ea21 0102 	bic.w	r1, r1, r2
 8007652:	2000      	movs	r0, #0
 8007654:	e7e0      	b.n	8007618 <floor+0x40>
 8007656:	2b33      	cmp	r3, #51	; 0x33
 8007658:	dd05      	ble.n	8007666 <floor+0x8e>
 800765a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765e:	d101      	bne.n	8007664 <floor+0x8c>
 8007660:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007664:	bd30      	pop	{r4, r5, pc}
 8007666:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	40e2      	lsrs	r2, r4
 8007670:	4202      	tst	r2, r0
 8007672:	d0f7      	beq.n	8007664 <floor+0x8c>
 8007674:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80076b0 <floor+0xd8>
 8007678:	ee30 0b07 	vadd.f64	d0, d0, d7
 800767c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007684:	ddc8      	ble.n	8007618 <floor+0x40>
 8007686:	2900      	cmp	r1, #0
 8007688:	da02      	bge.n	8007690 <floor+0xb8>
 800768a:	2b14      	cmp	r3, #20
 800768c:	d103      	bne.n	8007696 <floor+0xbe>
 800768e:	3101      	adds	r1, #1
 8007690:	ea20 0002 	bic.w	r0, r0, r2
 8007694:	e7c0      	b.n	8007618 <floor+0x40>
 8007696:	2401      	movs	r4, #1
 8007698:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800769c:	fa04 f303 	lsl.w	r3, r4, r3
 80076a0:	4418      	add	r0, r3
 80076a2:	42a8      	cmp	r0, r5
 80076a4:	bf38      	it	cc
 80076a6:	1909      	addcc	r1, r1, r4
 80076a8:	e7f2      	b.n	8007690 <floor+0xb8>
 80076aa:	2000      	movs	r0, #0
 80076ac:	4601      	mov	r1, r0
 80076ae:	e7b3      	b.n	8007618 <floor+0x40>
 80076b0:	8800759c 	.word	0x8800759c
 80076b4:	7e37e43c 	.word	0x7e37e43c
 80076b8:	bff00000 	.word	0xbff00000
 80076bc:	000fffff 	.word	0x000fffff

080076c0 <scalbn>:
 80076c0:	b082      	sub	sp, #8
 80076c2:	ed8d 0b00 	vstr	d0, [sp]
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80076cc:	b9a2      	cbnz	r2, 80076f8 <scalbn+0x38>
 80076ce:	9a00      	ldr	r2, [sp, #0]
 80076d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076d4:	4313      	orrs	r3, r2
 80076d6:	d03a      	beq.n	800774e <scalbn+0x8e>
 80076d8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80077b0 <scalbn+0xf0>
 80076dc:	4b40      	ldr	r3, [pc, #256]	; (80077e0 <scalbn+0x120>)
 80076de:	ee20 7b07 	vmul.f64	d7, d0, d7
 80076e2:	4298      	cmp	r0, r3
 80076e4:	ed8d 7b00 	vstr	d7, [sp]
 80076e8:	da11      	bge.n	800770e <scalbn+0x4e>
 80076ea:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80077b8 <scalbn+0xf8>
 80076ee:	ed9d 6b00 	vldr	d6, [sp]
 80076f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076f6:	e007      	b.n	8007708 <scalbn+0x48>
 80076f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80076fc:	428a      	cmp	r2, r1
 80076fe:	d10a      	bne.n	8007716 <scalbn+0x56>
 8007700:	ed9d 7b00 	vldr	d7, [sp]
 8007704:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007708:	ed8d 7b00 	vstr	d7, [sp]
 800770c:	e01f      	b.n	800774e <scalbn+0x8e>
 800770e:	9b01      	ldr	r3, [sp, #4]
 8007710:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007714:	3a36      	subs	r2, #54	; 0x36
 8007716:	4402      	add	r2, r0
 8007718:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800771c:	428a      	cmp	r2, r1
 800771e:	dd0a      	ble.n	8007736 <scalbn+0x76>
 8007720:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80077c0 <scalbn+0x100>
 8007724:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80077c8 <scalbn+0x108>
 8007728:	eeb0 6b47 	vmov.f64	d6, d7
 800772c:	9b01      	ldr	r3, [sp, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	fe27 7b05 	vselge.f64	d7, d7, d5
 8007734:	e7dd      	b.n	80076f2 <scalbn+0x32>
 8007736:	2a00      	cmp	r2, #0
 8007738:	dd0d      	ble.n	8007756 <scalbn+0x96>
 800773a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800773e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007742:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007746:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800774a:	e9cd 0100 	strd	r0, r1, [sp]
 800774e:	ed9d 0b00 	vldr	d0, [sp]
 8007752:	b002      	add	sp, #8
 8007754:	4770      	bx	lr
 8007756:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800775a:	da18      	bge.n	800778e <scalbn+0xce>
 800775c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007760:	4298      	cmp	r0, r3
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007768:	dd09      	ble.n	800777e <scalbn+0xbe>
 800776a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80077c0 <scalbn+0x100>
 800776e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80077c8 <scalbn+0x108>
 8007772:	eeb0 6b47 	vmov.f64	d6, d7
 8007776:	2b00      	cmp	r3, #0
 8007778:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800777c:	e7b9      	b.n	80076f2 <scalbn+0x32>
 800777e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80077b8 <scalbn+0xf8>
 8007782:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80077d0 <scalbn+0x110>
 8007786:	eeb0 6b47 	vmov.f64	d6, d7
 800778a:	2b00      	cmp	r3, #0
 800778c:	e7f4      	b.n	8007778 <scalbn+0xb8>
 800778e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007792:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007796:	3236      	adds	r2, #54	; 0x36
 8007798:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800779c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80077a0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80077d8 <scalbn+0x118>
 80077a4:	ec41 0b17 	vmov	d7, r0, r1
 80077a8:	e7a3      	b.n	80076f2 <scalbn+0x32>
 80077aa:	bf00      	nop
 80077ac:	f3af 8000 	nop.w
 80077b0:	00000000 	.word	0x00000000
 80077b4:	43500000 	.word	0x43500000
 80077b8:	c2f8f359 	.word	0xc2f8f359
 80077bc:	01a56e1f 	.word	0x01a56e1f
 80077c0:	8800759c 	.word	0x8800759c
 80077c4:	7e37e43c 	.word	0x7e37e43c
 80077c8:	8800759c 	.word	0x8800759c
 80077cc:	fe37e43c 	.word	0xfe37e43c
 80077d0:	c2f8f359 	.word	0xc2f8f359
 80077d4:	81a56e1f 	.word	0x81a56e1f
 80077d8:	00000000 	.word	0x00000000
 80077dc:	3c900000 	.word	0x3c900000
 80077e0:	ffff3cb0 	.word	0xffff3cb0

080077e4 <_init>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	bf00      	nop
 80077e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ea:	bc08      	pop	{r3}
 80077ec:	469e      	mov	lr, r3
 80077ee:	4770      	bx	lr

080077f0 <_fini>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	bf00      	nop
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr
